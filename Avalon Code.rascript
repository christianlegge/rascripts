// Avalon Code
// #ID = 7807

// $156754: [16bit] Map ID
//          8=Sunny Hill
//          9=Grana Plains 1
//          0xa=Grana Plains 2
//          0xb=Grana Plains 3
//          0xc=Grana Plains 4
//          0xd=Grana Plains 5
//          0xe=Grana Plains 6
//          0xf=Grana Plains 7
//          0x10=Grana Plains 8
//          0x11=Grana Plains 9
//          0x12=Three-Way Road Ruins
//          0x13=Grana Plains 10
//          0x14=Grana Plains 11
//          0x15=Grana Plains 12
//          0x16=Grana Plains 13
//          0x19=Town Entrance
//          0x1a=Crossroads of the World
//          0x1c=Center of Town
//          0x1d=Training Hall Road
//          0x1e=Fortune-Teller Alley
//          0x1f=Back Alleys
//          0x21=Central Park
//          0x22=Road to Castle
//          0x23=Arena
//          0x24=Mayor's House
//          0x25=Vis' House
//          0x26=Outside Abandoned House
//          0x27=Cemetery
//          0x28=Home
//          0x29=Training Hall
//          0x2a=Underground Training Space 1
//          0x2b=Underground Training Space 2
//          0x2c=Underground Training Space 3
//          0x2d=Underground Training Space 4
//          0x2e=Underground Training Space 7
//          0x2f=Underground Training Space 10
//          0x30=Duran's House 1F
//          0x31=Swordsman's Domain
//          0x32=Rex's House
//          0x33=Nanai's House 1F
//          0x34=Haochy's House
//          0x35=Duran's House 2F
//          0x36=Underground Training Space 5
//          0x37=Kamui's House
//          0x38=Nanai's House 2F
//          0x39=Fana's House 1F
//          0x3a=Fana's House 2F
//          0x3b=Romaioni's House 1F
//          0x3c=Romaioni's House 2F
//          0x3f=Mayor's House 1F
//          0x40=Mayor's House 2F
//          0x41=Vis' House
//          0x43=Abandoned House
//          0x45=Castle Gates
//          0x46=Entrance
//          0x47=Path to Dungeon 2
//          0x49=Hall
//          0x4a=Council Room
//          0x4b=Dining Hall
//          0x4c=Witch's Hidden Room 1
//          0x4d=Witch's Hidden Room 2
//          0x4e=Witch's Hidden Room 3
//          0x4f=Witch's Hidden Room 4
//          0x50=Witch's Hidden Room 5
//          0x51=Witch's Hidden Room 6
//          0x52=Witch's Hidden Room 7
//          0x53=Corridor
//          0x54=Corridor
//          0x55=Path to Dungeon 1
//          0x56=Corridor
//          0x5c=Underground Training Space 6
//          0x5d=Underground Training Space 8
//          0x5e=Underground Training Space 9
//          0x5f=Audience Chamber
//          0x60=Princess' Quarters
//          0x62=King's Quarters
//          0x64=Great Gate
//          0x6d=Inner Garden
//          0x6e=Fro's Hiding Place
//          0x6f=Hidden Meia 16
//          0x70=Eternal Abyss
//          0x72=Dungeon 8
//          0x73=Dungeon Entrance
//          0x74=Dungeon 3
//          0x75=Dungeon 6
//          0x76=Dungeon 7
//          0x77=Hidden Meia 4
//          0x78=Prison
//          0x79=Dungeon 2s
//          0x7a=Hidden Meia 3
//          0x7b=Hidden Meia 15
//          0x7c=Dungeon 1
//          0x7d=Dungeon 4
//          0x7e=Dungeon 9
//          0x7f=Hidden Meia 1
//          0x80=Dungeon 5
//          0x81=Hidden Meia 2
//          0x82=Hidden Meia 5
//          0x83=Hidden Meia 10
//          0x84=Hidden Meia 11
//          0x85=Hidden Meia 7
//          0x86=Hidden Meia 6
//          0x87=Hidden Meia 8
//          0x88=Hidden Meia 12
//          0x89=Hidden Meia 13
//          0x8a=Hidden Meia 14
//          0x8b=Hidden Meia 9
//          0x8d=Great Spear of Mastema 2
//          0x8e=Great Spear of Mastema 1
//          0x8f=Great Spear of Mastema 3
//          0x90=Great Spear of Mastema 4
//          0x91=Great Spear of Mastema 5
//          0x92=Great Spear of Mastema 6
//          0x93=Great Spear of Mastema 7
//          0x94=Great Spear of Mastema 8
//          0x95=Paradise at Cloud's End
//          0x96=Great Spear of Mastema 9
//          0x97=Great Spear of Mastema 10
//          0x98=Great Spear of Mastema 11
//          0x99=Great Spear of Mastema 12
//          0x9a=Great Spear of Mastema 13
//          0x9b=Great Spear of Mastema 14
//          0x9c=Great Spear of Mastema 15
//          0x9d=Great Spear of Mastema 16
//          0x9e=Great Spear of Mastema 17
//          0x9f=Great Spear of Mastema 18
//          0xa0=Great Spear of Mastema 19
//          0xa1=Great Spear of Mastema 20
//          0xa2=Great Spear of Mastema 21
//          0xa4=Northern Battlefield
//          0xa5=Wargliss Fortress 2
//          0xa6=Wargliss Fortress 1
//          0xa8=Waisen Empire Camp
//          0xa9=Wargliss Fortress 3
//          0xaa=Wargliss Fortress 4
//          0xab=Wargliss Fortress 5
//          0xac=Wargliss Fortress 6
//          0xad=Wargliss Fortress 7
//          0xaf=Tornaq Ice Cavern 1
//          0xb0=Tornaq Ice Cavern 2
//          0xb1=Tornaq Ice Cavern 16
//          0xb2=Tornaq Ice Cavern 4
//          0xb3=Tornaq Ice Cavern 12
//          0xb4=Tornaq Ice Cavern 8
//          0xb5=Sealed Domain
//          0xb6=Tornaq Ice Cavern 3
//          0xb7=Tornaq Ice Cavern 5
//          0xb8=Tornaq Ice Cavern 6
//          0xb9=Tornaw Ice Cavern 7
//          0xba=Tornaq Ice Cavern 9
//          0xbb=Tornaq Ice Cavern 10
//          0xbc=Tornaq Ice Cavern 11
//          0xbd=Tornaq Ice Cavern 13
//          0xbe=Tornaq Ice Cavern 14
//          0xbf=Tornaq Ice Cavern 15
//          0xc0=Tornaq Ice Cavern 17
//          0xc1=Tornaq Ice Cavern 18
//          0xc2=Tornaq Ice Cavern 19
//          0xc7=Depths of Ice Cavern 1
//          0xc8=Depths of Ice Cavern 2
//          0xc9=Depths of Ice Cavern 3
//          0xca=Depths of Ice Cavern 4
//          0xcb=Depths of Ice Cavern 5
//          0xcc=Depths of Ice Cavern 6
//          0xcd=Depths of Ice Cavern 7
//          0xce=Depths of Ice Cavern 8
//          0xcf=Depths of Ice Cavern 9
//          0xd0=Absolute Zero
//          0xd1=Depths of Ice Cavern 10
//          0xd2=Depths of Ice Cavern 11
//          0xd3=Depths of Ice Cavern 12
//          0xd4=Depths of Ice Cavern 13
//          0xd5=Depths of Ice Cavern 14
//          0xd6=Depths of Ice Cavern 15
//          0xd7=Depths of Ice Cavern 16
//          0xd8=Depths of Ice Cavern 17
//          0xd9=Depths of Ice Cavern 18
//          0xda=Depths of Ice Cavern 19
//          0xde=Granatum Forest 1
//          0xdf=Granatum Forest 2
//          0xe0=Granatum Forest 3
//          0xe1=Granatum Forest 4
//          0xe2=Granatum Forest 5
//          0xe3=Granatum Forest 6
//          0xe4=Granatum Forest 7
//          0xe5=Granatum Forest 8
//          0xe6=Granatum Forest 9
//          0xe7=Granatum Forest 10
//          0xe8=Granatum Forest 11
//          0xe9=Granatum Forest 12
//          0xea=Granatum Forest 13
//          0xeb=Granatum Forest 14
//          0xee=Deep Forest 1
//          0xef=Deep Forest 2
//          0xf0=Deep Forest 3
//          0xf1=Deep Forest 4
//          0xf2=Deep Forest 5
//          0xf3=Western Big Tree
//          0xf4=Beast's Lair
//          0xf7=Bridge
//          0xfc=Eastern Big Tree
//          0xfd=Lauca Meia's House
//          0xfe=Hunter's Trail 1
//          0xff=Hunter's Trail 2
//          0x100=Hunter's Trail 3
//          0x101=Hunter's Trail 4
//          0x102=Hunter's Trail 5
//          0x103=Beast's Cemetery
//          0x104=Hunter's Trail 6
//          0x105=Hunter's Trail 7
//          0x106=Hunter's Trail 8
//          0x107=Hunter's Trail 9
//          0x108=Hunter's Trail 10
//          0x10a=Relneia Marsh 4
//          0x10b=Relneia Marsh 1
//          0x10c=Relneia Marsh 2
//          0x10d=Relneia Marsh 3
//          0x10e=Relneia Marsh 5
//          0x10f=Eddy of Decay
//          0x110=Relneia Marsh 6
//          0x111=Relneia Marsh 7
//          0x112=Relneia Marsh 8
//          0x113=Relneia Marsh 9
//          0x114=Relneia Marsh 10
//          0x115=Relneia Marsh 11
//          0x116=Relneia Marsh 12
//          0x117=Relneia Marsh 13
//          0x119=Eastern Desert 1
//          0x11a=Eastern Desert 2
//          0x11b=Eastern Desert 3
//          0x11c=Eastern Desert 4
//          0x11d=Eastern Desert 5
//          0x11e=Eastern Desert 6
//          0x11f=Eastern Desert 7
//          0x120=Eastern Desert 8
//          0x121=Eastern Desert 9
//          0x122=Eastern Desert 10
//          0x123=Eastern Desert 11
//          0x124=Eastern Desert 12
//          0x125=Eastern Desert 13
//          0x126=Eastern Desert 14
//          0x127=Eastern Desert 15
//          0x128=Eastern Desert 16
//          0x129=Eastern Desert 17
//          0x12a=Eastern Desert 18
//          0x12d=Underground Lake Avernus 1
//          0x137=Central Desert 1
//          0x138=Central Desert 2
//          0x139=Central Desert 3
//          0x13a=Central Desert 4
//          0x13b=Central Desert 5
//          0x13c=Central Desert 6
//          0x13d=Central Desert 7
//          0x13e=Central Desert 8
//          0x13f=Central Desert 9
//          0x140=Central Desert 10
//          0x141=Central Desert 11
//          0x142=Central Desert 12
//          0x143=Central Desert 13
//          0x144=Central Desert 14
//          0x145=Central Desert 15
//          0x14a=Site of Cyril 1
//          0x14b=Site of Cyril 2
//          0x14c=Site of Cyril 3
//          0x14d=Site of Cyril 4
//          0x14e=Site of Cyril 5
//          0x14f=Site of Cyril 6
//          0x150=Site of Cyril 7
//          0x151=Site of Cyril 8
//          0x152=Site of Cyril 9
//          0x153=Site of Cyril 10
//          0x154=Site of Cyril 11
//          0x155=Site of Cyril 12
//          0x156=Site of Cyril 13
//          0x157=Site of Cyril 14
//          0x158=Site of Cyril 15
//          0x159=Site of Cyril 16
//          0x15a=Site of Cyril 17
//          0x15b=Site of Cyril 18
//          0x15c=Site of Cyril 19
//          0x15d=Site of Cyril 20
//          0x15e=Site of Cyril 21
//          0x15f=Site of Cyril 22
//          0x160=Site of Cyril 23
//          0x161=Site of Cyril 24
//          0x162=Guardian's Domain
//          0x163=Site of Cyril 25
//          0x165=Nomad's Tent
//          0x166=Nomad's Tent
//          0x167=Prison Escape Route
//          0x168=Desert Town
//          0x169=Desert Witch's Palace
//          0x16a=Prison
//          0x17c=Kalcazoth Cave 1
//          0x17d=Kalcazoth Cave 2
//          0x17e=Kalcazoth Cave 11
//          0x17f=Kalcazoth Cave 10
//          0x180=Kalcazoth Cave 3
//          0x181=Kalcazoth Cave 4
//          0x185=Kalcazoth Cave 5
//          0x186=Kalcazoth Cave 6
//          0x187=Kalcazoth Cave 7
//          0x188=Kalcazoth Cave 8
//          0x189=Kalcazoth Cave 9
//          0x18a=Kalcazoth Cave 12
//          0x18b=Kalcazoth Cave 13
//          0x18c=Kalcazoth Cave 14
//          0x18e=Shark's Jaw 1
//          0x18f=Shark's Jaw 2
//          0x190=Shark's Jaw 3
//          0x192=New World
//          0x194=Weld River 1
//          0x195=Weld River 2
//          0x196=Weld River 3
//          0x199=Ravine of Vulgazzo 1
//          0x19a=Ravine of Vulgazzo 2
//          0x19b=Ravine of Vulgazzo 3
//          0x19e=Western Desert 1
//          0x19f=Western Desert 2
//          0x1a0=Western Desert 3
//          0x1a1=Western Desert 4
//          0x1a2=Western Desert 5
//          0x1a3=Western Desert 6
//          0x1a4=Western Desert 7
//          0x1a5=Western Desert 8
//          0x1a6=Western Desert 9
//          0x1a7=Western Desert 10
//          0x1a8=Western Desert 11
//          0x1a9=Western Desert 12
//          0x1aa=Western Desert 13
//          0x1ab=Western Desert 14
//          0x1ac=Western Desert 15
//          0x1ad=Western Desert 16
//          0x1ae=Western Desert 17
//          0x1af=Western Desert 18
//          0x1b0=Western Desert 19
//          0x1b1=Western Desert 20
//          0x1b2=Western Desert 21
//          0x1be=Mt. Elious 1
//          0x1bf=Mt. Elious 2
//          0x1c0=Mt. Elious 3
//          0x1c1=Mt. Elious 4
//          0x1c2=Mt. Elious 5
//          0x1c3=Mt. Elious 6
//          0x1c4=Mt. Elious 7
//          0x1c5=Mt. Elious 8
//          0x1c6=Mt. Elious 9
//          0x1c7=Melting Pot
//          0x1c8=Mt. Elious 10
//          0x1c9=Mt. Elious 11
//          0x1ca=Mt. Elious 12
//          0x1cb=Mt. Elious 13
//          0x1cc=Mt. Elious 14
//          0x1cd=Mt. Elious 15
//          0x1ce=Mt. Elious 16
//          0x1cf=Mt. Elious 17
//          0x1d0=Mt. Elious 18
//          0x1d1=Mt. Elious 19
//          0x1d2=Mt. Elious 20
//          0x1d9=Escape Route 1
//          0x1da=Escape Route 2
//          0x1db=Escape Route 3
//          0x1dc=Escape Route 4
//          0x1dd=Escape Route 5
//          0x1de=Escape Route 6
//          0x321=Cutscene 1
//          0x325=Cutscene 2
//          0x329=Cutscene 3
//          0x32d=Cutscene 4
//          0x331=Cutscene 5
//          0x335=Cutscene 6
//          0x339=Cutscene 7
//          0x33c=Cutscene 8
//          0x33d=Cutscene 8
//          0x341=Cutscene 8
//          0x359=Cutscene 8
//          0x35d=Cutscene 9
//          0x361=Cutscene 10
//          0x365=Cutscene 11
//          0x366=Cutscene 11
//          0x369=Cutscene 12
//          0x36d=Cutscene 13
//          0x371=Cutscene 14
function map_id() => word(0x156754)

// $158988: [32bit] Book XP
function book_xp() => dword(0x158988)

// $15A168: [8bit] 0=Boy
//          1=Girl
function boy() => byte(0x15A168)

// $15A16C: [8bit] Mystic Jewels
function mystic_jewels() => byte(0x15A16C)

// $15A172: [8bit] Max Health
function max_health() => byte(0x15A172)

// $15A173: [8bit] Health
function health() => byte(0x15A173)

// $15A178: [16bit] Max MP
function max_mp() => word(0x15A178)

// $15A17A: [16bit] MP
function mp() => word(0x15A17A)

// $15A19C: [32bit] Weapon Levels
function weapon_levels() => dword(0x15A19C)

// $15A1A0: [16bit] Sword Experience
//          0x87f=Max
function sword_experience() => word(0x15A1A0)

// $15A1A2: [16bit] Hammer Experience
//          0x519=Max
function hammer_experience() => word(0x15A1A2)

// $15A1A4: [16bit] Projectile Experience
//          0x87f=Max
function projectile_experience() => word(0x15A1A4)

// $15A1A6: [16bit] Bomb Experience
//          0x1b3=Max
function bomb_experience() => word(0x15A1A6)

// $15A1A8: [16bit] Fist Experience
//          0x87f=Max
function fist_experience() => word(0x15A1A8)

// $15A4C4: [8bit] Fana Coded
function fana_coded() => byte(0x15A4C4)

// $15A4F8: [8bit] Fana Pictures
function fana_pictures() => byte(0x15A4F8)

// $15A4FA: [8bit] Sylphy Coded
function sylphy_coded() => byte(0x15A4FA)

// $15A530: [8bit] Nanai Coded
function nanai_coded() => byte(0x15A530)

// $15A566: [8bit] Dorothea Coded
function dorothea_coded() => byte(0x15A566)

// $15A59A: [8bit] Dorothea Pictures
function dorothea_pictures() => byte(0x15A59A)

// $15A59C: [8bit] Lauca Meia Coded
function lauca_meia_coded() => byte(0x15A59C)

// $15A5D2: [8bit] Duran Coded
function duran_coded() => byte(0x15A5D2)

// $15A608: [8bit] Rex Coded
function rex_coded() => byte(0x15A608)

// $15A63C: [8bit] Rex Pictures
function rex_pictures() => byte(0x15A63C)

// $15A63E: [8bit] Valdo Coded
function valdo_coded() => byte(0x15A63E)

// $15A674: [8bit] Heath Coded
function heath_coded() => byte(0x15A674)

// $15A6AA: [8bit] Anwar Coded
function anwar_coded() => byte(0x15A6AA)

// $15A6E0: [8bit] Gustav Coded
function gustav_coded() => byte(0x15A6E0)

// $15A714: [8bit] Gustav Pictures
function gustav_pictures() => byte(0x15A714)

// $15A716: [8bit] Meenya Coded
function meenya_coded() => byte(0x15A716)

// $15A74A: [8bit] Meenya Pictures
function meenya_pictures() => byte(0x15A74A)

// $15A74C: [8bit] Helen Coded
function helen_coded() => byte(0x15A74C)

// $15A780: [8bit] Helen Pictures
function helen_pictures() => byte(0x15A780)

// $15A782: [8bit] Kamui Coded
function kamui_coded() => byte(0x15A782)

// $15A7B6: [8bit] Kamui Pictures
function kamui_pictures() => byte(0x15A7B6)

// $15A7B8: [8bit] Romaioni Coded
function romaioni_coded() => byte(0x15A7B8)

// $15A7EE: [8bit] Francesca Coded
function francesca_coded() => byte(0x15A7EE)

// $15A822: [8bit] Francesca Pictures
function francesca_pictures() => byte(0x15A822)

// $15A824: [8bit] Haochy Coded
function haochy_coded() => byte(0x15A824)

// $15A85A: [8bit] Georg Coded
function georg_coded() => byte(0x15A85A)

// $15A890: [8bit] Vis Coded
function vis_coded() => byte(0x15A890)

// $15A8C4: [8bit] Vis Pictures
function vis_pictures() => byte(0x15A8C4)

// $15A8C6: [8bit] Xenonbart Coded
function xenonbart_coded() => byte(0x15A8C6)

// $15A8FC: [8bit] Fro Coded
function fro_coded() => byte(0x15A8FC)

// $15A930: [8bit] Fro Pictures
function fro_pictures() => byte(0x15A930)

// $15A932: [8bit] Guri Guri Coded
function guri_guri_coded() => byte(0x15A932)

// $15A966: [8bit] Guri Guri Pictures
function guri_guri_pictures() => byte(0x15A966)

// $15A968: [8bit] Rudrud Coded
function rudrud_coded() => byte(0x15A968)

// $15A99E: [8bit] Gim Coded
function gim_coded() => byte(0x15A99E)

// $15A9D4: [8bit] Olly Coded
function olly_coded() => byte(0x15A9D4)

// $15AA0A: [8bit] Ellie Coded
function ellie_coded() => byte(0x15AA0A)

// $15AA40: [8bit] Werman Coded
function werman_coded() => byte(0x15AA40)

// $15AA76: [8bit] Maid Coded
function maid_coded() => byte(0x15AA76)

// $15AAAA: [8bit] Maid Pictures
function maid_pictures() => byte(0x15AAAA)

// $15AAAC: [8bit] Royal Soldier Coded
function royal_soldier_coded() => byte(0x15AAAC)

// $15AAE0: [8bit] Royal Soldier Pictures
function royal_soldier_pictures() => byte(0x15AAE0)

// $15AAE2: [8bit] Imperial Soldier Coded
function imperial_soldier_coded() => byte(0x15AAE2)

// $15AB18: [8bit] Imperial Knight Coded
function imperial_knight_coded() => byte(0x15AB18)

// $15AB4E: [8bit] Desert Dweller Coded
function desert_dweller_coded() => byte(0x15AB4E)

// $15AB84: [8bit] Rempo Coded
function rempo_coded() => byte(0x15AB84)

// $15AB8A: [16bit] Times Used Rempo Special
function times_used_rempo_special() => word(0x15AB8A)

// $15AB8C: [8bit] Neaki Coded
function neaki_coded() => byte(0x15AB8C)

// $15AB92: [16bit] Times Used Neaki Special
function times_used_neaki_special() => word(0x15AB92)

// $15AB94: [8bit] Mieli Coded
function mieli_coded() => byte(0x15AB94)

// $15AB9A: [16bit] Times Used Mieli Special
function times_used_mieli_special() => word(0x15AB9A)

// $15AB9C: [8bit] Ur Coded
function ur_coded() => byte(0x15AB9C)

// $15ABA2: [16bit] Times Used Ur Special
function times_used_ur_special() => word(0x15ABA2)

// $15ABA4: [8bit] Goblin Coded
function goblin_coded() => byte(0x15ABA4)

// $15ABA6: [128bits] Goblin Memory
function goblin_memory() => byte(0x15ABA6)

// $15ABB6: [8bit] Goblin Inserted Memory
//          0x06=Stone
//          0x08=Copper
//          0x11=Ill
//          0x30=Nothing
function goblin_inserted_memory() => byte(0x15ABB6)

// $15ABB8: [8bit] Stone
function stone() => byte(0x15ABB8)

// $15ABD9: [24bits] Goblin Hits
function goblin_hits() => tbyte(0x15ABD9)

// $15ABDC: [8bit] Goblin Kills
function goblin_kills() => byte(0x15ABDC)

// $15ABE0: [16bit] Judgement Link Height
function judgement_link_height() => word(0x15ABE0)

// $15ABE4: [8bit] Goblin - Upper4 Picture/Lower4 Faces
function goblin_upper4_picture_lower4_faces() => byte(0x15ABE4)

// $15ABE8: [8bit] Hobgoblin Coded
function hobgoblin_coded() => byte(0x15ABE8)

// $15AC28: [8bit] Hobgoblin Pictures
function hobgoblin_pictures() => byte(0x15AC28)

// $15AC2C: [8bit] King Goblin Coded
function king_goblin_coded() => byte(0x15AC2C)

// $15AC70: [8bit] Harpy Coded
function harpy_coded() => byte(0x15AC70)

// $15ACB4: [8bit] Siren Coded
function siren_coded() => byte(0x15ACB4)

// $15ACF8: [8bit] Minotaurus Coded
function minotaurus_coded() => byte(0x15ACF8)

// $15AD3C: [8bit] Hell Guard Coded
function hell_guard_coded() => byte(0x15AD3C)

// $15AD80: [8bit] Knight Mare Coded
function knight_mare_coded() => byte(0x15AD80)

// $15ADC4: [8bit] Hell Knight Coded
function hell_knight_coded() => byte(0x15ADC4)

// $15AE08: [8bit] Lizard Man Coded
function lizard_man_coded() => byte(0x15AE08)

// $15AE4C: [8bit] Lizard Lord Coded
function lizard_lord_coded() => byte(0x15AE4C)

// $15AE90: [8bit] Lion Knight Coded
function lion_knight_coded() => byte(0x15AE90)

// $15AED4: [8bit] Balbazun Coded
function balbazun_coded() => byte(0x15AED4)

// $15AF18: [8bit] Pog Coded
function pog_coded() => byte(0x15AF18)

// $15AF58: [8bit] Pog - Upper4 Picture/Lower4 Faces
function pog_upper4_picture_lower4_faces() => byte(0x15AF58)

// $15AF5C: [8bit] Raptor Coded
function raptor_coded() => byte(0x15AF5C)

// $15AF9C: [8bit] Raptor - Upper4 Picture/Lower4 Faces
function raptor_upper4_picture_lower4_faces() => byte(0x15AF9C)

// $15AFA0: [8bit] Blade Beak Coded
function blade_beak_coded() => byte(0x15AFA0)

// $15AFE4: [8bit] Dragon Pup Coded
function dragon_pup_coded() => byte(0x15AFE4)

// $15B028: [8bit] Shell Head Coded
function shell_head_coded() => byte(0x15B028)

// $15B06C: [8bit] Dire Bat Coded
function dire_bat_coded() => byte(0x15B06C)

// $15B0AC: [8bit] Dire Bat Pictures
function dire_bat_pictures() => byte(0x15B0AC)

// $15B0B0: [8bit] Eye Wing Coded
function eye_wing_coded() => byte(0x15B0B0)

// $15B0F4: [8bit] Frog Man Coded
function frog_man_coded() => byte(0x15B0F4)

// $15B134: [8bit] Frog Man Pictures
function frog_man_pictures() => byte(0x15B134)

// $15B138: [8bit] Grapper Coded
function grapper_coded() => byte(0x15B138)

// $15B17C: [8bit] Siege Drake Coded
function siege_drake_coded() => byte(0x15B17C)

// $15B1C0: [8bit] Mortar Drake Coded
function mortar_drake_coded() => byte(0x15B1C0)

// $15B204: [8bit] Man-Eater Coded
function man_eater_coded() => byte(0x15B204)

// $15B248: [8bit] Blood Sucker Coded
function blood_sucker_coded() => byte(0x15B248)

// $15B28C: [8bit] Blob Coded
function blob_coded() => byte(0x15B28C)

// $15B2D0: [8bit] Pink Jelly Coded
function pink_jelly_coded() => byte(0x15B2D0)

// $15B314: [8bit] Dusk Spider Coded
function dusk_spider_coded() => byte(0x15B314)

// $15B358: [8bit] Black Widow Coded
function black_widow_coded() => byte(0x15B358)

// $15B39C: [8bit] Land Squid Coded
function land_squid_coded() => byte(0x15B39C)

// $15B3E0: [8bit] Mad Squid Coded
function mad_squid_coded() => byte(0x15B3E0)

// $15B424: [8bit] Hell Hornet Coded
function hell_hornet_coded() => byte(0x15B424)

// $15B468: [8bit] Robber Fly Coded
function robber_fly_coded() => byte(0x15B468)

// $15B4AC: [8bit] Dark Hopper Coded
function dark_hopper_coded() => byte(0x15B4AC)

// $15B4F0: [8bit] Giant Bug Coded
function giant_bug_coded() => byte(0x15B4F0)

// $15B534: [8bit] Lord Locust Coded
function lord_locust_coded() => byte(0x15B534)

// $15B578: [8bit] Abaddon Cry Coded
function abaddon_cry_coded() => byte(0x15B578)

// $15B5BC: [8bit] Wood Bone Coded
function wood_bone_coded() => byte(0x15B5BC)

// $15B5FC: [8bit] Wood Bone Pictures
function wood_bone_pictures() => byte(0x15B5FC)

// $15B600: [8bit] Living Spike coded
function living_spike_coded() => byte(0x15B600)

// $15B640: [8bit] Living Spike Pictures
function living_spike_pictures() => byte(0x15B640)

// $15B644: [8bit] Automation Coded
function automation_coded() => byte(0x15B644)

// $15B688: [8bit] Golem Coded
function golem_coded() => byte(0x15B688)

// $15B6CC: [8bit] Battle Titan Coded
function battle_titan_coded() => byte(0x15B6CC)

// $15B710: [8bit] Mul Coded
function mul_coded() => byte(0x15B710)

// $15B750: [8bit] Mul Pictures
function mul_pictures() => byte(0x15B750)

// $15B754: [8bit] Ghost Eye Coded
function ghost_eye_coded() => byte(0x15B754)

// $15B798: [8bit] Assault Eye Coded
function assault_eye_coded() => byte(0x15B798)

// $15B7DC: [8bit] Mummy Coded
function mummy_coded() => byte(0x15B7DC)

// $15B820: [8bit] Mummy Lord Coded
function mummy_lord_coded() => byte(0x15B820)

// $15B864: [8bit] Zombie Coded
function zombie_coded() => byte(0x15B864)

// $15B8A4: [8bit] Zombie Pictures
function zombie_pictures() => byte(0x15B8A4)

// $15B8A8: [8bit] Hell Prisoner Coded
function hell_prisoner_coded() => byte(0x15B8A8)

// $15B8EC: [8bit] Vampire Lady  Coded
function vampire_lady_coded() => byte(0x15B8EC)

// $15B930: [8bit] Strigoi Coded
function strigoi_coded() => byte(0x15B930)

// $15B974: [8bit] Skeleton Coded
function skeleton_coded() => byte(0x15B974)

// $15B9B8: [8bit] Bone Lord Coded
function bone_lord_coded() => byte(0x15B9B8)

// $15B9FC: [8bit] Element Skull Coded
function element_skull_coded() => byte(0x15B9FC)

// $15BA3C: [8bit] Element Skull Pictures
function element_skull_pictures() => byte(0x15BA3C)

// $15BA40: [8bit] Evil Spirit Coded
function evil_spirit_coded() => byte(0x15BA40)

// $15BA84: [8bit] Demon Head Coded
function demon_head_coded() => byte(0x15BA84)

// $15BAC8: [8bit] Ular Coded
function ular_coded() => byte(0x15BAC8)

// $15BB0C: [8bit] Shadow Claw Coded
function shadow_claw_coded() => byte(0x15BB0C)

// $15BB50: [8bit] Kaleila Rebel Coded
function kaleila_rebel_coded() => byte(0x15BB50)

// $15BB94: [8bit] Evil Eye Coded
function evil_eye_coded() => byte(0x15BB94)

// $15BBD8: [8bit] Plasma Gazer Coded
function plasma_gazer_coded() => byte(0x15BBD8)

// $15BC1C: [8bit] Arch Demon Coded
function arch_demon_coded() => byte(0x15BC1C)

// $15BC60: [8bit] Sargatanas Coded
function sargatanas_coded() => byte(0x15BC60)

// $15BCA4: [8bit] Moloch Coded
function moloch_coded() => byte(0x15BCA4)

// $15BCE8: [8bit] Orobas Coded
function orobas_coded() => byte(0x15BCE8)

// $15BD28: [8bit] Orobas Pictures
function orobas_pictures() => byte(0x15BD28)

// $15BD2C: [8bit] Nussie Coded
function nussie_coded() => byte(0x15BD2C)

// $15BDB4: [8bit] Chimera Coded
function chimera_coded() => byte(0x15BDB4)

// $15BDF8: [8bit] Amorphes Coded
function amorphes_coded() => byte(0x15BDF8)

// $15BE3C: [8bit] Torsol Coded
function torsol_coded() => byte(0x15BE3C)

// $15BE80: [8bit] Tuoni Coded
function tuoni_coded() => byte(0x15BE80)

// $15BEC4: [8bit] Perkele Coded
function perkele_coded() => byte(0x15BEC4)

// $15BF08: [8bit] Malcahatu Coded
function malcahatu_coded() => byte(0x15BF08)

// $15BF4C: [8bit] Antelobibnen Coded
function antelobibnen_coded() => byte(0x15BF4C)

// $15BF90: [8bit] Untamo Coded
function untamo_coded() => byte(0x15BF90)

// $15BFD4: [8bit] Kullervo Coded
function kullervo_coded() => byte(0x15BFD4)

// $15C898: [8bit] Sunny Hill Coded
function sunny_hill_coded() => byte(0x15C898)

// $15C89A: [8bit] 0xf=Sunny Hill Clear
function sunny_hill_clear() => byte(0x15C89A)

// $15C89B: [8bit] Grana Plains 1 Coded
function grana_plains_1_coded() => byte(0x15C89B)

// $15C89D: [8bit] 0x1f=Grana Plains 1 Clear
function grana_plains_1_clear() => byte(0x15C89D)

// $15C89E: [8bit] Grana Plains 2 Coded
function grana_plains_2_coded() => byte(0x15C89E)

// $15C8A0: [8bit] 0x7=Grana Plains 2 Clear
function grana_plains_2_clear() => byte(0x15C8A0)

// $15C8A1: [8bit] Grana Plains 3 Coded
function grana_plains_3_coded() => byte(0x15C8A1)

// $15C8A3: [8bit] 0x7=Grana Plains 3 Clear
function grana_plains_3_clear() => byte(0x15C8A3)

// $15C8A4: [8bit] Grana Plains 4 Coded
function grana_plains_4_coded() => byte(0x15C8A4)

// $15C8A6: [8bit] 0x1f=Grana Plains 4 Clear
function grana_plains_4_clear() => byte(0x15C8A6)

// $15C8A7: [8bit] Grana Plains 5 Coded
function grana_plains_5_coded() => byte(0x15C8A7)

// $15C8A9: [8bit] 0xf=Grana Plains 5 Clear
function grana_plains_5_clear() => byte(0x15C8A9)

// $15C8AA: [8bit] Grana Plains 6 Coded
function grana_plains_6_coded() => byte(0x15C8AA)

// $15C8AC: [8bit] 0x7=Grana Plains 6 Clear
function grana_plains_6_clear() => byte(0x15C8AC)

// $15C8AD: [8bit] Grana Plains 7 Coded
function grana_plains_7_coded() => byte(0x15C8AD)

// $15C8AF: [8bit] 0x7=Grana Plains 7 Clear
function grana_plains_7_clear() => byte(0x15C8AF)

// $15C8B0: [8bit] Grana Plains 8 Coded
function grana_plains_8_coded() => byte(0x15C8B0)

// $15C8B2: [8bit] 0x7=Grana Plains 8 Clear
function grana_plains_8_clear() => byte(0x15C8B2)

// $15C8B3: [8bit] Grana Plains 9 Coded
function grana_plains_9_coded() => byte(0x15C8B3)

// $15C8B5: [8bit] 0x7=Grana Plains 9 Clear
function grana_plains_9_clear() => byte(0x15C8B5)

// $15C8B6: [8bit] Three-Way Road Ruins Coded
function three_way_road_ruins_coded() => byte(0x15C8B6)

// $15C8B8: [8bit] 0x7=Three-Way Road Ruins Clear
function three_way_road_ruins_clear() => byte(0x15C8B8)

// $15C8B9: [8bit] Grana Plains 10 Coded
function grana_plains_10_coded() => byte(0x15C8B9)

// $15C8BB: [8bit] 0x7=Grana Plains 10 Clear
function grana_plains_10_clear() => byte(0x15C8BB)

// $15C8BC: [8bit] Grana Plains 11 Coded
function grana_plains_11_coded() => byte(0x15C8BC)

// $15C8BE: [8bit] 0x7=Grana Plains 11 Clear
function grana_plains_11_clear() => byte(0x15C8BE)

// $15C8BF: [8bit] Grana Plains 12 Coded
function grana_plains_12_coded() => byte(0x15C8BF)

// $15C8C1: [8bit] 0x7=Grana Plains 12 Clear
function grana_plains_12_clear() => byte(0x15C8C1)

// $15C8C2: [8bit] Grana Plains 13 Coded
function grana_plains_13_coded() => byte(0x15C8C2)

// $15C8C4: [8bit] 0x1f=Grana Plains 13 Clear
function grana_plains_13_clear() => byte(0x15C8C4)

// $15C8C5: [8bit] Grana Plains 14 Coded
function grana_plains_14_coded() => byte(0x15C8C5)

// $15C8C7: [8bit] 0x7=Grana Plains 14 Clear
function grana_plains_14_clear() => byte(0x15C8C7)

// $15C8C8: [8bit] Crossroads of the World Coded
function crossroads_of_the_world_coded() => byte(0x15C8C8)

// $15C8CA: [8bit] 0x7=Crossroads of the World Clear
function crossroads_of_the_world_clear() => byte(0x15C8CA)

// $15C8CB: [8bit] Town Entrance Coded
function town_entrance_coded() => byte(0x15C8CB)

// $15C8CD: [8bit] 0x7=Town Entrance Clear
function town_entrance_clear() => byte(0x15C8CD)

// $15C8CE: [8bit] Center of Town Coded
function center_of_town_coded() => byte(0x15C8CE)

// $15C8D0: [8bit] 0x7=Center of Town Clear
function center_of_town_clear() => byte(0x15C8D0)

// $15C8D1: [8bit] Central Park Coded
function central_park_coded() => byte(0x15C8D1)

// $15C8D3: [8bit] 0x7=Central Park Clear
function central_park_clear() => byte(0x15C8D3)

// $15C8D4: [8bit] Road to Castle Coded
function road_to_castle_coded() => byte(0x15C8D4)

// $15C8D6: [8bit] 0x7=Road to Castle Clear
function road_to_castle_clear() => byte(0x15C8D6)

// $15C8D7: [8bit] Fortune-Teller Alley Coded
function fortune_teller_alley_coded() => byte(0x15C8D7)

// $15C8D9: [8bit] 0x7=Fortune-Teller Alley Clear
function fortune_teller_alley_clear() => byte(0x15C8D9)

// $15C8DA: [8bit] Training Hall Road Coded
function training_hall_road_coded() => byte(0x15C8DA)

// $15C8DC: [8bit] 0x7=Training Hall Road Clear
function training_hall_road_clear() => byte(0x15C8DC)

// $15C8DD: [8bit] Arena Coded
function arena_coded() => byte(0x15C8DD)

// $15C8DF: [8bit] 0x7=Arena Clear
function arena_clear() => byte(0x15C8DF)

// $15C8E0: [8bit] Cemetery Coded
function cemetery_coded() => byte(0x15C8E0)

// $15C8E2: [8bit] 0x7=Cemetery Clear
function cemetery_clear() => byte(0x15C8E2)

// $15C8E3: [8bit] Back Alleys Coded
function back_alleys_coded() => byte(0x15C8E3)

// $15C8E5: [8bit] 0x7=Back Alleys Clear
function back_alleys_clear() => byte(0x15C8E5)

// $15C8E6: [8bit] Outside Abandoned House Coded
function outside_abandoned_house_coded() => byte(0x15C8E6)

// $15C8E8: [8bit] 0x7=Outside Abandoned House Clear
function outside_abandoned_house_clear() => byte(0x15C8E8)

// $15C8E9: [8bit] Mayor's House Coded
function mayor_s_house_coded() => byte(0x15C8E9)

// $15C8EB: [8bit] 0x7=Mayor's House Clear
function mayor_s_house_clear() => byte(0x15C8EB)

// $15C8EC: [8bit] Vis' House Coded (Outside)
function vis_house_coded_outside() => byte(0x15C8EC)

// $15C8EE: [8bit] 0x7=Vis' House (Outside) Clear
function vis_house_outside_clear() => byte(0x15C8EE)

// $15C8EF: [8bit] Home Coded
function home_coded() => byte(0x15C8EF)

// $15C8F1: [8bit] 0xf=Home Clear
function home_clear() => byte(0x15C8F1)

// $15C8F2: [8bit] Rex's House Coded
function rex_s_house_coded() => byte(0x15C8F2)

// $15C8F4: [8bit] 0x7=Rex's House Clear
function rex_s_house_clear() => byte(0x15C8F4)

// $15C8F5: [8bit] Nanai's House 1F Coded
function nanai_s_house_1f_coded() => byte(0x15C8F5)

// $15C8F7: [8bit] 0x7=Nanai's House 1F Clear
function nanai_s_house_1f_clear() => byte(0x15C8F7)

// $15C8F8: [8bit] Nanai's House 2F Coded
function nanai_s_house_2f_coded() => byte(0x15C8F8)

// $15C8FA: [8bit] 0x7=Nanai's House 2F Clear
function nanai_s_house_2f_clear() => byte(0x15C8FA)

// $15C8FB: [8bit] Duran's House 1F Coded
function duran_s_house_1f_coded() => byte(0x15C8FB)

// $15C8FD: [8bit] 0x7=Duran's House 1F Clear
function duran_s_house_1f_clear() => byte(0x15C8FD)

// $15C8FE: [8bit] Duran's House 2F Coded
function duran_s_house_2f_coded() => byte(0x15C8FE)

// $15C900: [8bit] 0x7=Duran's House 2F Clear
function duran_s_house_2f_clear() => byte(0x15C900)

// $15C901: [8bit] Haochy's House Coded
function haochy_s_house_coded() => byte(0x15C901)

// $15C903: [8bit] 0x7=Haochy's House Clear
function haochy_s_house_clear() => byte(0x15C903)

// $15C904: [8bit] Abandoned House Coded
function abandoned_house_coded() => byte(0x15C904)

// $15C906: [8bit] 0x7=Abandoned House Clear
function abandoned_house_clear() => byte(0x15C906)

// $15C907: [8bit] Fana's House 1F Coded
function fana_s_house_1f_coded() => byte(0x15C907)

// $15C909: [8bit] 0x7=Fana's House 1F Clear
function fana_s_house_1f_clear() => byte(0x15C909)

// $15C90A: [8bit] Fana's House 2F Coded
function fana_s_house_2f_coded() => byte(0x15C90A)

// $15C90C: [8bit] 0x7=Fana's House 2F Clear
function fana_s_house_2f_clear() => byte(0x15C90C)

// $15C90D: [8bit] Kamui's House Coded
function kamui_s_house_coded() => byte(0x15C90D)

// $15C90F: [8bit] 0xf=Kamui's House Clear
function kamui_s_house_clear() => byte(0x15C90F)

// $15C910: [8bit] Romaioni's House 1F Coded
function romaioni_s_house_1f_coded() => byte(0x15C910)

// $15C912: [8bit] 0x7=Romaioni's House 1F Clear
function romaioni_s_house_1f_clear() => byte(0x15C912)

// $15C913: [8bit] Romaioni's House 2F Coded
function romaioni_s_house_2f_coded() => byte(0x15C913)

// $15C915: [8bit] 0x7=Romaioni's House 2F Clear
function romaioni_s_house_2f_clear() => byte(0x15C915)

// $15C916: [8bit] Mayor's House 1F Coded
function mayor_s_house_1f_coded() => byte(0x15C916)

// $15C918: [8bit] 0x7=Mayor's House 1F Clear
function mayor_s_house_1f_clear() => byte(0x15C918)

// $15C919: [8bit] Mayor's House 2F Coded
function mayor_s_house_2f_coded() => byte(0x15C919)

// $15C91B: [8bit] 0x7=Mayor's House 2F Clear
function mayor_s_house_2f_clear() => byte(0x15C91B)

// $15C91C: [8bit] Vis' House Coded (Inside)
function vis_house_coded_inside() => byte(0x15C91C)

// $15C91E: [8bit] 0x7=Vis' House (Inside) Clear
function vis_house_inside_clear() => byte(0x15C91E)

// $15C91F: [8bit] Training Hall Coded
function training_hall_coded() => byte(0x15C91F)

// $15C921: [8bit] 0x7=Training Hall Clear
function training_hall_clear() => byte(0x15C921)

// $15C922: [8bit] Underground Training Space 1 Coded
function underground_training_space_1_coded() => byte(0x15C922)

// $15C925: [8bit] Underground Training Space 2 Coded
function underground_training_space_2_coded() => byte(0x15C925)

// $15C928: [8bit] Underground Training Space 3 Coded
function underground_training_space_3_coded() => byte(0x15C928)

// $15C92B: [8bit] Underground Training Space 4 Coded
function underground_training_space_4_coded() => byte(0x15C92B)

// $15C92E: [8bit] Underground Training Space 5 Coded
function underground_training_space_5_coded() => byte(0x15C92E)

// $15C931: [8bit] Underground Training Space 6 Coded
function underground_training_space_6_coded() => byte(0x15C931)

// $15C934: [8bit] Underground Training Space 7 Coded
function underground_training_space_7_coded() => byte(0x15C934)

// $15C937: [8bit] Underground Training Space 8 Coded
function underground_training_space_8_coded() => byte(0x15C937)

// $15C93A: [8bit] Underground Training Space 9 Coded
function underground_training_space_9_coded() => byte(0x15C93A)

// $15C93D: [8bit] Underground Training Space 10 Coded
function underground_training_space_10_coded() => byte(0x15C93D)

// $15C946: [8bit] Swordsman's Domain Coded
function swordsman_s_domain_coded() => byte(0x15C946)

// $15C949: [8bit] Witch's Hidden Room 1 Coded
function witch_s_hidden_room_1_coded() => byte(0x15C949)

// $15C94B: [8bit] 0x1f=Witch's Hidden Room 1 Clear
function witch_s_hidden_room_1_clear() => byte(0x15C94B)

// $15C94C: [8bit] Witch's Hidden Room 2 Coded
function witch_s_hidden_room_2_coded() => byte(0x15C94C)

// $15C94F: [8bit] Witch's Hidden Room 3 Coded
function witch_s_hidden_room_3_coded() => byte(0x15C94F)

// $15C952: [8bit] Witch's Hidden Room 4 Coded
function witch_s_hidden_room_4_coded() => byte(0x15C952)

// $15C955: [8bit] Witch's Hidden Room 5 Coded
function witch_s_hidden_room_5_coded() => byte(0x15C955)

// $15C958: [8bit] Witch's Hidden Room 6 Coded
function witch_s_hidden_room_6_coded() => byte(0x15C958)

// $15C95B: [8bit] Witch's Hidden Room 7 Coded
function witch_s_hidden_room_7_coded() => byte(0x15C95B)

// $15C95D: [8bit] 0x7=Witch's Hidden Room 7 Clear
function witch_s_hidden_room_7_clear() => byte(0x15C95D)

// $15C95E: [8bit] Castle Gates Coded
function castle_gates_coded() => byte(0x15C95E)

// $15C960: [8bit] 0x7=Castle Gates Cleared
function castle_gates_cleared() => byte(0x15C960)

// $15C961: [8bit] Inner Garden Coded
function inner_garden_coded() => byte(0x15C961)

// $15C963: [8bit] 0x1f=Inner Garden Cleared
function inner_garden_cleared() => byte(0x15C963)

// $15C964: [8bit] Entrance Coded
function entrance_coded() => byte(0x15C964)

// $15C966: [8bit] 0xf=Entrance Cleared
function entrance_cleared() => byte(0x15C966)

// $15C967: [8bit] Hall Coded
function hall_coded() => byte(0x15C967)

// $15C969: [8bit] 0xf=Hall Cleared
function hall_cleared() => byte(0x15C969)

// $15C96A: [8bit] (Left) Corridor Coded
function left_corridor_coded() => byte(0x15C96A)

// $15C96C: [8bit] 0xf=Corridor Cleared
function corridor_cleared() => byte(0x15C96C)

// $15C96D: [8bit] (North) Corridor Coded
function north_corridor_coded() => byte(0x15C96D)

// $15C96F: [8bit] 0xf=Corridor Cleared
function corridor_cleared() => byte(0x15C96F)

// $15C970: [8bit] (Right) Corridor Coded
function right_corridor_coded() => byte(0x15C970)

// $15C972: [8bit] 0x7=Corridor Cleared
function corridor_cleared() => byte(0x15C972)

// $15C973: [8bit] Great Gate Coded
function great_gate_coded() => byte(0x15C973)

// $15C975: [8bit] 0x7=Great Gate Clear
function great_gate_clear() => byte(0x15C975)

// $15C976: [8bit] Council Room Coded
function council_room_coded() => byte(0x15C976)

// $15C978: [8bit] 0x7=Council Room Cleared
function council_room_cleared() => byte(0x15C978)

// $15C979: [8bit] Dining Hall Coded
function dining_hall_coded() => byte(0x15C979)

// $15C97B: [8bit] 0x1f=Dining Hall Cleared
function dining_hall_cleared() => byte(0x15C97B)

// $15C97C: [8bit] Path to Dungeon 1 Coded
function path_to_dungeon_1_coded() => byte(0x15C97C)

// $15C97E: [8bit] 0x7=Path to Dungeon 1 Cleared
function path_to_dungeon_1_cleared() => byte(0x15C97E)

// $15C97F: [8bit] Path to Dungeon 2 Coded
function path_to_dungeon_2_coded() => byte(0x15C97F)

// $15C981: [8bit] 0x7=Path to Dungeon 2 Cleared
function path_to_dungeon_2_cleared() => byte(0x15C981)

// $15C982: [8bit] Audience Chamber Coded
function audience_chamber_coded() => byte(0x15C982)

// $15C984: [8bit] 0x1f=Audience Chamber Cleared
function audience_chamber_cleared() => byte(0x15C984)

// $15C985: [8bit] Princess' Quarters Coded
function princess_quarters_coded() => byte(0x15C985)

// $15C987: [8bit] 0xf=Princess' Quarters Cleared
function princess_quarters_cleared() => byte(0x15C987)

// $15C988: [8bit] King's Quarters Coded
function king_s_quarters_coded() => byte(0x15C988)

// $15C98A: [8bit] 0x7=King's Quarters Cleared
function king_s_quarters_cleared() => byte(0x15C98A)

// $15C98B: [8bit] Fro's Hiding Place Coded
function fro_s_hiding_place_coded() => byte(0x15C98B)

// $15C98D: [8bit] 0x1f=Fro's Hiding Place Clear
function fro_s_hiding_place_clear() => byte(0x15C98D)

// $15C98E: [8bit] Escape Route 1 Coded
function escape_route_1_coded() => byte(0x15C98E)

// $15C990: [8bit] 0x7=Escape Route 1 Clear
function escape_route_1_clear() => byte(0x15C990)

// $15C991: [8bit] Escape Route 2 Coded
function escape_route_2_coded() => byte(0x15C991)

// $15C993: [8bit] 0x7=Escape Route 2 Clear
function escape_route_2_clear() => byte(0x15C993)

// $15C994: [8bit] Escape Route 3 Coded
function escape_route_3_coded() => byte(0x15C994)

// $15C996: [8bit] 0x1f=Escape Route 3 Clear
function escape_route_3_clear() => byte(0x15C996)

// $15C997: [8bit] Escape Route 4 Coded
function escape_route_4_coded() => byte(0x15C997)

// $15C999: [8bit] 0x7=Escape Route 4 Clear
function escape_route_4_clear() => byte(0x15C999)

// $15C99A: [8bit] Escape Route 5 Coded
function escape_route_5_coded() => byte(0x15C99A)

// $15C99C: [8bit] 0x7=Escape Route 5 Clear
function escape_route_5_clear() => byte(0x15C99C)

// $15C99D: [8bit] Escape Route 6 Coded
function escape_route_6_coded() => byte(0x15C99D)

// $15C99F: [8bit] 0x7=Escape Route 6 Clear
function escape_route_6_clear() => byte(0x15C99F)

// $15C9A0: [8bit] Prison (Castle) Coded
function prison_castle_coded() => byte(0x15C9A0)

// $15C9A2: [8bit] 0x7=Prison Clear
function prison_clear() => byte(0x15C9A2)

// $15C9A3: [8bit] Prison (Cage) Coded
function prison_cage_coded() => byte(0x15C9A3)

// $15C9A5: [8bit] 0x7=Prison Clear
function prison_clear() => byte(0x15C9A5)

// $15C9A6: [8bit] Dungeon Entrance Coded
function dungeon_entrance_coded() => byte(0x15C9A6)

// $15C9A8: [8bit] 0x7=Dungeon Entrance Clear
function dungeon_entrance_clear() => byte(0x15C9A8)

// $15C9A9: [8bit] Dungeon 1 Coded
function dungeon_1_coded() => byte(0x15C9A9)

// $15C9AB: [8bit] 0x7=Dungeon 1 Clear
function dungeon_1_clear() => byte(0x15C9AB)

// $15C9AC: [8bit] Dungeon 2 Coded
function dungeon_2_coded() => byte(0x15C9AC)

// $15C9AE: [8bit] 0x7=Dungeon 2 Clear
function dungeon_2_clear() => byte(0x15C9AE)

// $15C9AF: [8bit] Dungeon 3 Coded
function dungeon_3_coded() => byte(0x15C9AF)

// $15C9B1: [8bit] 0x7=Dungeon 3 Clear
function dungeon_3_clear() => byte(0x15C9B1)

// $15C9B2: [8bit] Dungeon 4 Coded
function dungeon_4_coded() => byte(0x15C9B2)

// $15C9B5: [8bit] Dungeon 5 Coded
function dungeon_5_coded() => byte(0x15C9B5)

// $15C9B7: [8bit] 0x7=Dungeon 5 Clear
function dungeon_5_clear() => byte(0x15C9B7)

// $15C9B8: [8bit] Dungeon 6 Coded
function dungeon_6_coded() => byte(0x15C9B8)

// $15C9BA: [8bit] 0x7=Dungeon 6 Clear
function dungeon_6_clear() => byte(0x15C9BA)

// $15C9BB: [8bit] Dungeon 7 Coded
function dungeon_7_coded() => byte(0x15C9BB)

// $15C9BE: [8bit] Dungeon 8 Coded
function dungeon_8_coded() => byte(0x15C9BE)

// $15C9C0: [8bit] 0x7=Dungeon 8 Clear
function dungeon_8_clear() => byte(0x15C9C0)

// $15C9C1: [8bit] Dungeon 9 Coded
function dungeon_9_coded() => byte(0x15C9C1)

// $15C9C4: [8bit] Hidden Meia 1 Coded
function hidden_meia_1_coded() => byte(0x15C9C4)

// $15C9C7: [8bit] Hidden Meia 2 Coded
function hidden_meia_2_coded() => byte(0x15C9C7)

// $15C9C9: [8bit] 0x7=Hidden Meia 2 Clear
function hidden_meia_2_clear() => byte(0x15C9C9)

// $15C9CA: [8bit] Hidden Meia 3 Coded
function hidden_meia_3_coded() => byte(0x15C9CA)

// $15C9CD: [8bit] Hidden Meia 4 Coded
function hidden_meia_4_coded() => byte(0x15C9CD)

// $15C9CF: [8bit] 0x7=Hidden Meia 4 Clear
function hidden_meia_4_clear() => byte(0x15C9CF)

// $15C9D0: [8bit] Hidden Meia 5 Coded
function hidden_meia_5_coded() => byte(0x15C9D0)

// $15C9D3: [8bit] Hidden Meia 6 Coded
function hidden_meia_6_coded() => byte(0x15C9D3)

// $15C9D6: [8bit] Hidden Meia 7 Coded
function hidden_meia_7_coded() => byte(0x15C9D6)

// $15C9D8: [8bit] 0x7=Hidden Meia 7 Clear
function hidden_meia_7_clear() => byte(0x15C9D8)

// $15C9D9: [8bit] Hidden Meia 8 Coded
function hidden_meia_8_coded() => byte(0x15C9D9)

// $15C9DC: [8bit] Hidden Meia 9 Coded
function hidden_meia_9_coded() => byte(0x15C9DC)

// $15C9DE: [8bit] 0x7=Hidden Meia 9 Clear
function hidden_meia_9_clear() => byte(0x15C9DE)

// $15C9DF: [8bit] Hidden Meia 10 Coded
function hidden_meia_10_coded() => byte(0x15C9DF)

// $15C9E1: [8bit] 0x7=Hidden Meia 10 Clear
function hidden_meia_10_clear() => byte(0x15C9E1)

// $15C9E2: [8bit] Hidden Meia 11 Coded
function hidden_meia_11_coded() => byte(0x15C9E2)

// $15C9E5: [8bit] Hidden Meia 12 Coded
function hidden_meia_12_coded() => byte(0x15C9E5)

// $15C9E8: [8bit] Hidden Meia 13 Coded
function hidden_meia_13_coded() => byte(0x15C9E8)

// $15C9EB: [8bit] Hidden Meia 14 Coded
function hidden_meia_14_coded() => byte(0x15C9EB)

// $15C9ED: [8bit] 0x7=Hidden Meia 14 Clear
function hidden_meia_14_clear() => byte(0x15C9ED)

// $15C9EE: [8bit] Hidden Meia 15 Coded
function hidden_meia_15_coded() => byte(0x15C9EE)

// $15C9F1: [8bit] Hidden Meia 16 Coded
function hidden_meia_16_coded() => byte(0x15C9F1)

// $15C9F3: [8bit] 0x1f=Hidden Meia 16 Clear
function hidden_meia_16_clear() => byte(0x15C9F3)

// $15C9F4: [8bit] Eternal Abyss Coded
function eternal_abyss_coded() => byte(0x15C9F4)

// $15C9F7: [8bit] Great Spear of Mastema 1 Coded
function great_spear_of_mastema_1_coded() => byte(0x15C9F7)

// $15C9F9: [8bit] 0xf=Great Spear of Mastema 1 Clear
function great_spear_of_mastema_1_clear() => byte(0x15C9F9)

// $15C9FA: [8bit] Great Spear of Mastema 2 Coded
function great_spear_of_mastema_2_coded() => byte(0x15C9FA)

// $15C9FD: [8bit] Great Spear of Mastema 3 Coded
function great_spear_of_mastema_3_coded() => byte(0x15C9FD)

// $15CA00: [8bit] Great Spear of Mastema 4 Coded
function great_spear_of_mastema_4_coded() => byte(0x15CA00)

// $15CA03: [8bit] Great Spear of Mastema 5 Coded
function great_spear_of_mastema_5_coded() => byte(0x15CA03)

// $15CA06: [8bit] Great Spear of Mastema 6 Coded
function great_spear_of_mastema_6_coded() => byte(0x15CA06)

// $15CA09: [8bit] Great Spear of Mastema 7 Coded
function great_spear_of_mastema_7_coded() => byte(0x15CA09)

// $15CA0C: [8bit] Great Spear of Mastema 8 Coded
function great_spear_of_mastema_8_coded() => byte(0x15CA0C)

// $15CA0F: [8bit] Great Spear of Mastema 9 Coded
function great_spear_of_mastema_9_coded() => byte(0x15CA0F)

// $15CA11: [8bit] 0x7=Great Spear of Mastema 9 Clear
function great_spear_of_mastema_9_clear() => byte(0x15CA11)

// $15CA12: [8bit] Great Spear of Mastema 10 Coded
function great_spear_of_mastema_10_coded() => byte(0x15CA12)

// $15CA15: [8bit] Great Spear of Mastema 11 Coded
function great_spear_of_mastema_11_coded() => byte(0x15CA15)

// $15CA18: [8bit] Great Spear of Mastema 12 Coded
function great_spear_of_mastema_12_coded() => byte(0x15CA18)

// $15CA1B: [8bit] Great Spear of Mastema 13 Coded
function great_spear_of_mastema_13_coded() => byte(0x15CA1B)

// $15CA1E: [8bit] Great Spear of Mastema 14 Coded
function great_spear_of_mastema_14_coded() => byte(0x15CA1E)

// $15CA21: [8bit] Great Spear of Mastema 15 Coded
function great_spear_of_mastema_15_coded() => byte(0x15CA21)

// $15CA24: [8bit] Great Spear of Mastema 16 Coded
function great_spear_of_mastema_16_coded() => byte(0x15CA24)

// $15CA27: [8bit] Great Spear of Mastema 17 Coded
function great_spear_of_mastema_17_coded() => byte(0x15CA27)

// $15CA2A: [8bit] Great Spear of Mastema 18 Coded
function great_spear_of_mastema_18_coded() => byte(0x15CA2A)

// $15CA2D: [8bit] Great Spear of Mastema 19 Coded
function great_spear_of_mastema_19_coded() => byte(0x15CA2D)

// $15CA30: [8bit] Great Spear of Mastema 20 Coded
function great_spear_of_mastema_20_coded() => byte(0x15CA30)

// $15CA32: [8bit] 0x7=Great Spear of Mastema 20 Clear
function great_spear_of_mastema_20_clear() => byte(0x15CA32)

// $15CA33: [8bit] Great Spear of Mastema 21 Coded
function great_spear_of_mastema_21_coded() => byte(0x15CA33)

// $15CA35: [8bit] 0x7=Great Spear of Mastema 21 Clear
function great_spear_of_mastema_21_clear() => byte(0x15CA35)

// $15CA37: [8bit] Paradise at Cloud's End Coded
function paradise_at_cloud_s_end_coded() => byte(0x15CA37)

// $15CA39: [8bit] Wargliss Fortress 1 Coded
function wargliss_fortress_1_coded() => byte(0x15CA39)

// $15CA3B: [8bit] 0x7=Wargliss Fortress 1 Clear
function wargliss_fortress_1_clear() => byte(0x15CA3B)

// $15CA3C: [8bit] Wargliss Fortress 2 Coded
function wargliss_fortress_2_coded() => byte(0x15CA3C)

// $15CA3F: [8bit] Wargliss Fortress 3 Coded
function wargliss_fortress_3_coded() => byte(0x15CA3F)

// $15CA41: [8bit] 0x7=Wargliss Fortress 3 Clear
function wargliss_fortress_3_clear() => byte(0x15CA41)

// $15CA42: [8bit] Wargliss Fortress 4 Coded
function wargliss_fortress_4_coded() => byte(0x15CA42)

// $15CA44: [8bit] 0x7=Wargliss Fortress 4 Clear
function wargliss_fortress_4_clear() => byte(0x15CA44)

// $15CA45: [8bit] Wargliss Fortress 5 Coded
function wargliss_fortress_5_coded() => byte(0x15CA45)

// $15CA47: [8bit] 0x7=Wargliss Fortress 5 Clear
function wargliss_fortress_5_clear() => byte(0x15CA47)

// $15CA48: [8bit] Wargliss Fortress 6 Coded
function wargliss_fortress_6_coded() => byte(0x15CA48)

// $15CA4A: [8bit] 0x7=Wargliss Fortress 6 Clear
function wargliss_fortress_6_clear() => byte(0x15CA4A)

// $15CA4B: [8bit] Wargliss Fortress 7 Coded
function wargliss_fortress_7_coded() => byte(0x15CA4B)

// $15CA4D: [8bit] 0x7=Wargliss Fortress 7 Clear
function wargliss_fortress_7_clear() => byte(0x15CA4D)

// $15CA4E: [8bit] Northern Battlefield Coded
function northern_battlefield_coded() => byte(0x15CA4E)

// $15CA50: [8bit] 0x7=Northern Battlefield Clear
function northern_battlefield_clear() => byte(0x15CA50)

// $15CA51: [8bit] Waisen Empire Camp Coded
function waisen_empire_camp_coded() => byte(0x15CA51)

// $15CA53: [8bit] 0x7=Waisen Empire Camp Clear
function waisen_empire_camp_clear() => byte(0x15CA53)

// $15CA54: [8bit] Tornaq Ice Cavern 1 Coded
function tornaq_ice_cavern_1_coded() => byte(0x15CA54)

// $15CA57: [8bit] Tornaq Ice Cavern 2 Coded
function tornaq_ice_cavern_2_coded() => byte(0x15CA57)

// $15CA5A: [8bit] Tornaq Ice Cavern 3 Coded
function tornaq_ice_cavern_3_coded() => byte(0x15CA5A)

// $15CA5D: [8bit] Tornaq Ice Cavern 4 Coded
function tornaq_ice_cavern_4_coded() => byte(0x15CA5D)

// $15CA60: [8bit] Tornaq Ice Cavern 5 Coded
function tornaq_ice_cavern_5_coded() => byte(0x15CA60)

// $15CA63: [8bit] Tornaq Ice Cavern 6 Coded
function tornaq_ice_cavern_6_coded() => byte(0x15CA63)

// $15CA66: [8bit] Tornaq Ice Cavern 7 Coded
function tornaq_ice_cavern_7_coded() => byte(0x15CA66)

// $15CA69: [8bit] Tornaq Ice Cavern 8 Coded
function tornaq_ice_cavern_8_coded() => byte(0x15CA69)

// $15CA6C: [8bit] Tornaq Ice Cavern 9 Coded
function tornaq_ice_cavern_9_coded() => byte(0x15CA6C)

// $15CA6F: [8bit] Tornaq Ice Cavern 10 Coded
function tornaq_ice_cavern_10_coded() => byte(0x15CA6F)

// $15CA72: [8bit] Tornaq Ice Cavern 11 Coded
function tornaq_ice_cavern_11_coded() => byte(0x15CA72)

// $15CA75: [8bit] Tornaq Ice Cavern 12 Coded
function tornaq_ice_cavern_12_coded() => byte(0x15CA75)

// $15CA78: [8bit] Tornaq Ice Cavern 13 Coded
function tornaq_ice_cavern_13_coded() => byte(0x15CA78)

// $15CA7B: [8bit] Tornaq Ice Cavern 14 Coded
function tornaq_ice_cavern_14_coded() => byte(0x15CA7B)

// $15CA7E: [8bit] Tornaq Ice Cavern 15 Coded
function tornaq_ice_cavern_15_coded() => byte(0x15CA7E)

// $15CA81: [8bit] Tornaq Ice Cavern 16 Coded
function tornaq_ice_cavern_16_coded() => byte(0x15CA81)

// $15CA84: [8bit] Tornaq Ice Cavern 17 Coded
function tornaq_ice_cavern_17_coded() => byte(0x15CA84)

// $15CA87: [8bit] Tornaq Ice Cavern 18 Coded
function tornaq_ice_cavern_18_coded() => byte(0x15CA87)

// $15CA8A: [8bit] Tornaq Ice Cavern 19 Coded
function tornaq_ice_cavern_19_coded() => byte(0x15CA8A)

// $15CA8D: [8bit] Sealed Domain Coded
function sealed_domain_coded() => byte(0x15CA8D)

// $15CACC: [8bit] Mt. Elious 1 Coded
function mt_elious_1_coded() => byte(0x15CACC)

// $15CACF: [8bit] Mt. Elious 2 Coded
function mt_elious_2_coded() => byte(0x15CACF)

// $15CAD2: [8bit] Mt. Elious 3 Coded
function mt_elious_3_coded() => byte(0x15CAD2)

// $15CAD5: [8bit] Mt. Elious 4 Coded
function mt_elious_4_coded() => byte(0x15CAD5)

// $15CAD8: [8bit] Mt. Elious 5 Coded
function mt_elious_5_coded() => byte(0x15CAD8)

// $15CADB: [8bit] Mt. Elious 6 Coded
function mt_elious_6_coded() => byte(0x15CADB)

// $15CADE: [8bit] Mt. Elious 7 Coded
function mt_elious_7_coded() => byte(0x15CADE)

// $15CAE1: [8bit] Mt. Elious 8 Coded
function mt_elious_8_coded() => byte(0x15CAE1)

// $15CAE4: [8bit] Mt. Elious 9 Coded
function mt_elious_9_coded() => byte(0x15CAE4)

// $15CAE7: [8bit] Mt. Elious 10 Coded
function mt_elious_10_coded() => byte(0x15CAE7)

// $15CAEA: [8bit] Mt. Elious 11 Coded
function mt_elious_11_coded() => byte(0x15CAEA)

// $15CAED: [8bit] Mt. Elious 12 Coded
function mt_elious_12_coded() => byte(0x15CAED)

// $15CAF0: [8bit] Mt. Elious 13 Coded
function mt_elious_13_coded() => byte(0x15CAF0)

// $15CAF3: [8bit] Mt. Elious 14 Coded
function mt_elious_14_coded() => byte(0x15CAF3)

// $15CAF6: [8bit] Mt. Elious 15 Coded
function mt_elious_15_coded() => byte(0x15CAF6)

// $15CAF9: [8bit] Mt. Elious 16 Coded
function mt_elious_16_coded() => byte(0x15CAF9)

// $15CAFC: [8bit] Mt. Elious 17 Coded
function mt_elious_17_coded() => byte(0x15CAFC)

// $15CAFF: [8bit] Mt. Elious 18 Coded
function mt_elious_18_coded() => byte(0x15CAFF)

// $15CB02: [8bit] Mt. Elious 19 Coded
function mt_elious_19_coded() => byte(0x15CB02)

// $15CB05: [8bit] Mt. Elious 20 Coded
function mt_elious_20_coded() => byte(0x15CB05)

// $15CB08: [8bit] Melting Pot Coded
function melting_pot_coded() => byte(0x15CB08)

// $15CB0B: [8bit] Granatum Forest 1 Coded
function granatum_forest_1_coded() => byte(0x15CB0B)

// $15CB0D: [8bit] 0x7=Granatum Forest 1 Clear
function granatum_forest_1_clear() => byte(0x15CB0D)

// $15CB0E: [8bit] Granatum Forest 2 Coded
function granatum_forest_2_coded() => byte(0x15CB0E)

// $15CB10: [8bit] 0xf=Granatum Forest 2 Clear
function granatum_forest_2_clear() => byte(0x15CB10)

// $15CB11: [8bit] Granatum Forest 3 Coded
function granatum_forest_3_coded() => byte(0x15CB11)

// $15CB13: [8bit] 0x7=Granatum Forest 3 Clear
function granatum_forest_3_clear() => byte(0x15CB13)

// $15CB14: [8bit] Granatum Forest 4 Coded
function granatum_forest_4_coded() => byte(0x15CB14)

// $15CB16: [8bit] 0x7=Granatum Forest 4 Clear
function granatum_forest_4_clear() => byte(0x15CB16)

// $15CB17: [8bit] Granatum Forest 5 Coded
function granatum_forest_5_coded() => byte(0x15CB17)

// $15CB19: [8bit] 0x7=Granatum Forest 5 Clear
function granatum_forest_5_clear() => byte(0x15CB19)

// $15CB1A: [8bit] Granatum Forest 6 Coded
function granatum_forest_6_coded() => byte(0x15CB1A)

// $15CB1C: [8bit] 0x7=Granatum Forest 6 Clear
function granatum_forest_6_clear() => byte(0x15CB1C)

// $15CB1D: [8bit] Granatum Forest 7 Coded
function granatum_forest_7_coded() => byte(0x15CB1D)

// $15CB1F: [8bit] 0x7=Granatum Forest 7 Clear
function granatum_forest_7_clear() => byte(0x15CB1F)

// $15CB20: [8bit] Granatum Forest 8 Coded
function granatum_forest_8_coded() => byte(0x15CB20)

// $15CB22: [8bit] 0x7=Granatum Forest 8 Clear
function granatum_forest_8_clear() => byte(0x15CB22)

// $15CB23: [8bit] Granatum Forest 9 Coded
function granatum_forest_9_coded() => byte(0x15CB23)

// $15CB25: [8bit] 0xf=Granatum Forest 9 Clear
function granatum_forest_9_clear() => byte(0x15CB25)

// $15CB26: [8bit] Granatum Forest 10 Coded
function granatum_forest_10_coded() => byte(0x15CB26)

// $15CB28: [8bit] 0xf=Granatum Forest 10 Clear
function granatum_forest_10_clear() => byte(0x15CB28)

// $15CB29: [8bit] Granatum Forest 11 Coded
function granatum_forest_11_coded() => byte(0x15CB29)

// $15CB2B: [8bit] 0x7=Granatum Forest 11 Clear
function granatum_forest_11_clear() => byte(0x15CB2B)

// $15CB2C: [8bit] Granatum Forest 12 Coded
function granatum_forest_12_coded() => byte(0x15CB2C)

// $15CB2E: [8bit] 0x7=Granatum Forest 12 Clear
function granatum_forest_12_clear() => byte(0x15CB2E)

// $15CB2F: [8bit] Granatum Forest 13 Coded
function granatum_forest_13_coded() => byte(0x15CB2F)

// $15CB31: [8bit] 0xf=Granatum Forest 13 Clear
function granatum_forest_13_clear() => byte(0x15CB31)

// $15CB32: [8bit] Granatum Forest 14 Coded
function granatum_forest_14_coded() => byte(0x15CB32)

// $15CB34: [8bit] 0x7=Granatum Forest 14 Clear
function granatum_forest_14_clear() => byte(0x15CB34)

// $15CB35: [8bit] Kalcazoth Cave 1 Coded
function kalcazoth_cave_1_coded() => byte(0x15CB35)

// $15CB38: [8bit] Kalcazoth Cave 2 Coded
function kalcazoth_cave_2_coded() => byte(0x15CB38)

// $15CB3B: [8bit] Kalcazoth Cave 3 Coded
function kalcazoth_cave_3_coded() => byte(0x15CB3B)

// $15CB3E: [8bit] Kalcazoth Cave 4 Coded
function kalcazoth_cave_4_coded() => byte(0x15CB3E)

// $15CB41: [8bit] Kalcazoth Cave 5 Coded
function kalcazoth_cave_5_coded() => byte(0x15CB41)

// $15CB44: [8bit] Kalcazoth Cave 6 Coded
function kalcazoth_cave_6_coded() => byte(0x15CB44)

// $15CB47: [8bit] Kalcazoth Cave 7 Coded
function kalcazoth_cave_7_coded() => byte(0x15CB47)

// $15CB4A: [8bit] Kalcazoth Cave 8 Coded
function kalcazoth_cave_8_coded() => byte(0x15CB4A)

// $15CB4D: [8bit] Kalcazoth Cave 9 Coded
function kalcazoth_cave_9_coded() => byte(0x15CB4D)

// $15CB4F: [8bit] 0xf=Clear
function clear() => byte(0x15CB4F)

// $15CB53: [8bit] Kalcazoth Cave 11 Coded
function kalcazoth_cave_11_coded() => byte(0x15CB53)

// $15CB54: [8bit] Kalcazoth Cave 12 Coded
function kalcazoth_cave_12_coded() => byte(0x15CB54)

// $15CB56: [8bit] Kalcazoth Cave 12 Coded
function kalcazoth_cave_12_coded() => byte(0x15CB56)

// $15CB59: [8bit] Kalcazoth Cave 13 Coded
function kalcazoth_cave_13_coded() => byte(0x15CB59)

// $15CB5C: [8bit] Kalcazoth Cave 14 Coded
function kalcazoth_cave_14_coded() => byte(0x15CB5C)

// $15CB68: [8bit] Sun Shelf Coded
function sun_shelf_coded() => byte(0x15CB68)

// $15CB6B: [8bit] Elevation Coded
function elevation_coded() => byte(0x15CB6B)

// $15CB6D: [8bit] 0xf=Clear
function clear() => byte(0x15CB6D)

// $15CB6E: [8bit] Redrud's House Coded
function redrud_s_house_coded() => byte(0x15CB6E)

// $15CB70: [8bit] 0x1f=Clear
function clear() => byte(0x15CB70)

// $15CB71: [8bit] Deep Forest 1 Coded
function deep_forest_1_coded() => byte(0x15CB71)

// $15CB73: [8bit] 0x7=Deep Forest 1 Clear
function deep_forest_1_clear() => byte(0x15CB73)

// $15CB74: [8bit] Deep Forest 2 Coded
function deep_forest_2_coded() => byte(0x15CB74)

// $15CB76: [8bit] 0x7=Deep Forest 2 Clear
function deep_forest_2_clear() => byte(0x15CB76)

// $15CB77: [8bit] Deep Forest 3 Coded
function deep_forest_3_coded() => byte(0x15CB77)

// $15CB79: [8bit] 0x7=Deep Forest 3 Clear
function deep_forest_3_clear() => byte(0x15CB79)

// $15CB7A: [8bit] Deep Forest 4 Coded
function deep_forest_4_coded() => byte(0x15CB7A)

// $15CB7C: [8bit] 0x7=Deep Forest 4 Clear
function deep_forest_4_clear() => byte(0x15CB7C)

// $15CB7D: [8bit] Deep Forest 5 Coded
function deep_forest_5_coded() => byte(0x15CB7D)

// $15CB7F: [8bit] 0x7=Deep Forest 5 Clear
function deep_forest_5_clear() => byte(0x15CB7F)

// $15CB80: [8bit] Western Big Tree Coded
function western_big_tree_coded() => byte(0x15CB80)

// $15CB83: [8bit] Beast's Lair Coded
function beast_s_lair_coded() => byte(0x15CB83)

// $15CB85: [8bit] 0x7=Beast's Lair Clear
function beast_s_lair_clear() => byte(0x15CB85)

// $15CB86: [8bit] Granatum Plateau Coded
function granatum_plateau_coded() => byte(0x15CB86)

// $15CB88: [8bit] 0x7=Granatum Plateau Clear
function granatum_plateau_clear() => byte(0x15CB88)

// $15CB89: [8bit] Light Falls Coded
function light_falls_coded() => byte(0x15CB89)

// $15CB8B: [8bit] 0x7=Light Falls Clear
function light_falls_clear() => byte(0x15CB8B)

// $15CB8C: [8bit] Bridge Coded
function bridge_coded() => byte(0x15CB8C)

// $15CB92: [8bit] Underground Lake Avernus 1 Coded
function underground_lake_avernus_1_coded() => byte(0x15CB92)

// $15CB94: [8bit] 0x7=Underground Lake Avernus 1 Clear
function underground_lake_avernus_1_clear() => byte(0x15CB94)

// $15CB95: [8bit] Underground Lake Avernus 2 Coded
function underground_lake_avernus_2_coded() => byte(0x15CB95)

// $15CB97: [8bit] 0x7=Underground Lake Avernus 2 Clear
function underground_lake_avernus_2_clear() => byte(0x15CB97)

// $15CB98: [8bit] Underground Lake Avernus 3 Coded
function underground_lake_avernus_3_coded() => byte(0x15CB98)

// $15CB9B: [8bit] Underground Lake Avernus 4 Coded
function underground_lake_avernus_4_coded() => byte(0x15CB9B)

// $15CB9D: [8bit] 0x7=Underground Lake Avernus 4 Clear
function underground_lake_avernus_4_clear() => byte(0x15CB9D)

// $15CB9E: [8bit] Eastern Big Tree Coded
function eastern_big_tree_coded() => byte(0x15CB9E)

// $15CBA0: [8bit] 0xf=Eastern Big Tree Clear
function eastern_big_tree_clear() => byte(0x15CBA0)

// $15CBA1: [8bit] Lauca Meia's House Coded
function lauca_meia_s_house_coded() => byte(0x15CBA1)

// $15CBA3: [8bit] 0x1f=Lauca Meia's House Clear
function lauca_meia_s_house_clear() => byte(0x15CBA3)

// $15CBA4: [8bit] Hunter's Trail 1 Coded
function hunter_s_trail_1_coded() => byte(0x15CBA4)

// $15CBA6: [8bit] 0x7=Hunter's Trail 1 Clear
function hunter_s_trail_1_clear() => byte(0x15CBA6)

// $15CBA7: [8bit] Hunter's Trail 2 Coded
function hunter_s_trail_2_coded() => byte(0x15CBA7)

// $15CBA9: [8bit] 0x7=Hunter's Trail 2 Clear
function hunter_s_trail_2_clear() => byte(0x15CBA9)

// $15CBAA: [8bit] Hunter's Trail 3 Coded
function hunter_s_trail_3_coded() => byte(0x15CBAA)

// $15CBAC: [8bit] 0x7=Hunter's Trail 3 Clear
function hunter_s_trail_3_clear() => byte(0x15CBAC)

// $15CBAD: [8bit] Hunter's Trail 4 Coded
function hunter_s_trail_4_coded() => byte(0x15CBAD)

// $15CBAF: [8bit] 0x7=Hunter's Trail 4 Clear
function hunter_s_trail_4_clear() => byte(0x15CBAF)

// $15CBB0: [8bit] Hunter's Trail 5 Coded
function hunter_s_trail_5_coded() => byte(0x15CBB0)

// $15CBB2: [8bit] 0x7=Hunter's Trail 5 Clear
function hunter_s_trail_5_clear() => byte(0x15CBB2)

// $15CBB3: [8bit] Beast's Cemetery Coded
function beast_s_cemetery_coded() => byte(0x15CBB3)

// $15CBB6: [8bit] Hunter's Trail 6 Coded
function hunter_s_trail_6_coded() => byte(0x15CBB6)

// $15CBB8: [8bit] 0x7=Hunter's Trail 6 Clear
function hunter_s_trail_6_clear() => byte(0x15CBB8)

// $15CBB9: [8bit] Hunter's Trail 7 Coded
function hunter_s_trail_7_coded() => byte(0x15CBB9)

// $15CBBB: [8bit] 0x7=Hunter's Trail 7 Clear
function hunter_s_trail_7_clear() => byte(0x15CBBB)

// $15CBBC: [8bit] Hunter's Trail 8 Coded
function hunter_s_trail_8_coded() => byte(0x15CBBC)

// $15CBBE: [8bit] 0x7=Hunter's Trail 8 Clear
function hunter_s_trail_8_clear() => byte(0x15CBBE)

// $15CBBF: [8bit] Hunter's Trail 9 Coded
function hunter_s_trail_9_coded() => byte(0x15CBBF)

// $15CBC1: [8bit] 0x7=Hunter's Trail 9 Clear
function hunter_s_trail_9_clear() => byte(0x15CBC1)

// $15CBC2: [8bit] Hunter's Trail 10 Coded
function hunter_s_trail_10_coded() => byte(0x15CBC2)

// $15CBC4: [8bit] 0x7=Hunter's Trail 10 Clear
function hunter_s_trail_10_clear() => byte(0x15CBC4)

// $15CBC5: [8bit] Relneia Marsh 1 Coded
function relneia_marsh_1_coded() => byte(0x15CBC5)

// $15CBC7: [8bit] 0xf=Relneia Marsh 1 Clear
function relneia_marsh_1_clear() => byte(0x15CBC7)

// $15CBC8: [8bit] Relneia Marsh 2 Coded
function relneia_marsh_2_coded() => byte(0x15CBC8)

// $15CBCA: [8bit] 0x7=Relneia Marsh 2 Clear
function relneia_marsh_2_clear() => byte(0x15CBCA)

// $15CBCB: [8bit] Relneia Marsh 3 Coded
function relneia_marsh_3_coded() => byte(0x15CBCB)

// $15CBCD: [8bit] 0x7=Relneia Marsh 3 Clear
function relneia_marsh_3_clear() => byte(0x15CBCD)

// $15CBCE: [8bit] Relneia Marsh 4 Coded
function relneia_marsh_4_coded() => byte(0x15CBCE)

// $15CBD0: [8bit] 0x1f=Relneia Marsh 4 Clear
function relneia_marsh_4_clear() => byte(0x15CBD0)

// $15CBD1: [8bit] Relneia Marsh 5 Coded
function relneia_marsh_5_coded() => byte(0x15CBD1)

// $15CBD3: [8bit] 0x7=Relneia Marsh 5 Clear
function relneia_marsh_5_clear() => byte(0x15CBD3)

// $15CBD4: [8bit] Relneia Marsh 6 Coded
function relneia_marsh_6_coded() => byte(0x15CBD4)

// $15CBD6: [8bit] 0x1f=Relneia Marsh 6 Clear
function relneia_marsh_6_clear() => byte(0x15CBD6)

// $15CBD7: [8bit] Relneia Marsh 7 Coded
function relneia_marsh_7_coded() => byte(0x15CBD7)

// $15CBD9: [8bit] 0x7=Relneia Marsh 7 Clear
function relneia_marsh_7_clear() => byte(0x15CBD9)

// $15CBDA: [8bit] Relneia Marsh 8 Coded
function relneia_marsh_8_coded() => byte(0x15CBDA)

// $15CBDC: [8bit] 0x7=Relneia Marsh 8 Clear
function relneia_marsh_8_clear() => byte(0x15CBDC)

// $15CBDD: [8bit] Relneia Marsh 9 Coded
function relneia_marsh_9_coded() => byte(0x15CBDD)

// $15CBDF: [8bit] 0x7=Relneia Marsh 9 Clear
function relneia_marsh_9_clear() => byte(0x15CBDF)

// $15CBE0: [8bit] Relneia Marsh 10 Coded
function relneia_marsh_10_coded() => byte(0x15CBE0)

// $15CBE2: [8bit] 0x7=Relneia Marsh 10 Clear
function relneia_marsh_10_clear() => byte(0x15CBE2)

// $15CBE3: [8bit] Relneia Marsh 11 Coded
function relneia_marsh_11_coded() => byte(0x15CBE3)

// $15CBE5: [8bit] 0x7=Relneia Marsh 11 Clear
function relneia_marsh_11_clear() => byte(0x15CBE5)

// $15CBE6: [8bit] Relneia Marsh 12 Coded
function relneia_marsh_12_coded() => byte(0x15CBE6)

// $15CBE8: [8bit] 0x7=Relneia Marsh 12 Clear
function relneia_marsh_12_clear() => byte(0x15CBE8)

// $15CBE9: [8bit] Relneia Marsh 13 Coded
function relneia_marsh_13_coded() => byte(0x15CBE9)

// $15CBEB: [8bit] 0x7=Relneia Marsh 13 Clear
function relneia_marsh_13_clear() => byte(0x15CBEB)

// $15CBEC: [8bit] Eddy of Decay Coded
function eddy_of_decay_coded() => byte(0x15CBEC)

// $15CBEF: [8bit] Desert Town Coded
function desert_town_coded() => byte(0x15CBEF)

// $15CBF1: [8bit] 0xf=Desert Town Clear
function desert_town_clear() => byte(0x15CBF1)

// $15CBF2: [8bit] Desert Witch's Palace Coded
function desert_witch_s_palace_coded() => byte(0x15CBF2)

// $15CBF5: [8bit] Prison Coded
function prison_coded() => byte(0x15CBF5)

// $15CBF7: [8bit] 0xf=Prison Clear
function prison_clear() => byte(0x15CBF7)

// $15CBF8: [8bit] Nomad's Tent Coded
function nomad_s_tent_coded() => byte(0x15CBF8)

// $15CBFA: [8bit] 0x7=Nomad's Tent Clear
function nomad_s_tent_clear() => byte(0x15CBFA)

// $15CBFB: [8bit] Nomad's Tent Coded
function nomad_s_tent_coded() => byte(0x15CBFB)

// $15CBFD: [8bit] 0xf=Nomad's Tent Clear
function nomad_s_tent_clear() => byte(0x15CBFD)

// $15CBFE: [8bit] Prison Escape Route Coded
function prison_escape_route_coded() => byte(0x15CBFE)

// $15CC00: [8bit] 0x7=Prison Escape Route Clear
function prison_escape_route_clear() => byte(0x15CC00)

// $15CC01: [8bit] Central Desert 1 Coded
function central_desert_1_coded() => byte(0x15CC01)

// $15CC03: [8bit] 0x7=Central Desert 1 Clear
function central_desert_1_clear() => byte(0x15CC03)

// $15CC04: [8bit] Central Desert 2 Coded
function central_desert_2_coded() => byte(0x15CC04)

// $15CC06: [8bit] 0x7=Central Desert 2 Clear
function central_desert_2_clear() => byte(0x15CC06)

// $15CC07: [8bit] Central Desert 3 Coded
function central_desert_3_coded() => byte(0x15CC07)

// $15CC09: [8bit] 0x7=Central Desert 3 Clear
function central_desert_3_clear() => byte(0x15CC09)

// $15CC0A: [8bit] Central Desert 4 Coded
function central_desert_4_coded() => byte(0x15CC0A)

// $15CC0C: [8bit] 0x7=Central Desert 4 Clear
function central_desert_4_clear() => byte(0x15CC0C)

// $15CC0D: [8bit] Central Desert 5 Coded
function central_desert_5_coded() => byte(0x15CC0D)

// $15CC0F: [8bit] 0x7=Central Desert 5 Clear
function central_desert_5_clear() => byte(0x15CC0F)

// $15CC10: [8bit] Central Desert 6 Coded
function central_desert_6_coded() => byte(0x15CC10)

// $15CC12: [8bit] 0x7=Central Desert 7 Clear
function central_desert_7_clear() => byte(0x15CC12)

// $15CC13: [8bit] Central Desert 7 Coded
function central_desert_7_coded() => byte(0x15CC13)

// $15CC15: [8bit] 0x7=Central Desert 7 Clear
function central_desert_7_clear() => byte(0x15CC15)

// $15CC16: [8bit] Central Desert 8 Coded
function central_desert_8_coded() => byte(0x15CC16)

// $15CC18: [8bit] 0x7=Central Desert 8 Clear
function central_desert_8_clear() => byte(0x15CC18)

// $15CC19: [8bit] Central Desert 9 Coded
function central_desert_9_coded() => byte(0x15CC19)

// $15CC1B: [8bit] 0x7=Central Desert 9 Clear
function central_desert_9_clear() => byte(0x15CC1B)

// $15CC1C: [8bit] Central Desert 10 Coded
function central_desert_10_coded() => byte(0x15CC1C)

// $15CC1E: [8bit] 0x7=Central Desert 10 Clear
function central_desert_10_clear() => byte(0x15CC1E)

// $15CC1F: [8bit] Central Desert 11 Coded
function central_desert_11_coded() => byte(0x15CC1F)

// $15CC21: [8bit] 0x7=Central Desert 11 Clear
function central_desert_11_clear() => byte(0x15CC21)

// $15CC22: [8bit] Central Desert 12 Coded
function central_desert_12_coded() => byte(0x15CC22)

// $15CC24: [8bit] 0x7=Central Desert 12 Clear
function central_desert_12_clear() => byte(0x15CC24)

// $15CC25: [8bit] Central Desert 13 Coded
function central_desert_13_coded() => byte(0x15CC25)

// $15CC27: [8bit] 0x7=Central Desert 13 Clear
function central_desert_13_clear() => byte(0x15CC27)

// $15CC28: [8bit] Central Desert 14 Coded
function central_desert_14_coded() => byte(0x15CC28)

// $15CC2A: [8bit] 0x7=Central Desert 14 Clear
function central_desert_14_clear() => byte(0x15CC2A)

// $15CC2B: [8bit] Central Desert 15 Coded
function central_desert_15_coded() => byte(0x15CC2B)

// $15CC2D: [8bit] 0x7=Central Desert 15 Clear
function central_desert_15_clear() => byte(0x15CC2D)

// $15CC2E: [8bit] Site of Cyril 1 Coded
function site_of_cyril_1_coded() => byte(0x15CC2E)

// $15CC31: [8bit] Site of Cyril 2 Coded
function site_of_cyril_2_coded() => byte(0x15CC31)

// $15CC34: [8bit] Site of Cyril 3 Coded
function site_of_cyril_3_coded() => byte(0x15CC34)

// $15CC37: [8bit] Site of Cyril 4 Coded
function site_of_cyril_4_coded() => byte(0x15CC37)

// $15CC3A: [8bit] Site of Cyril 5 Coded
function site_of_cyril_5_coded() => byte(0x15CC3A)

// $15CC3D: [8bit] Site of Cyril 6 Coded
function site_of_cyril_6_coded() => byte(0x15CC3D)

// $15CC40: [8bit] Site of Cyril 7 Coded
function site_of_cyril_7_coded() => byte(0x15CC40)

// $15CC43: [8bit] Site of Cyril 8 Coded
function site_of_cyril_8_coded() => byte(0x15CC43)

// $15CC46: [8bit] Site of Cyril 9 Coded
function site_of_cyril_9_coded() => byte(0x15CC46)

// $15CC49: [8bit] Site of Cyril 10 Coded
function site_of_cyril_10_coded() => byte(0x15CC49)

// $15CC4C: [8bit] Site of Cyril 11 Coded
function site_of_cyril_11_coded() => byte(0x15CC4C)

// $15CC4F: [8bit] Site of Cyril 12 Coded
function site_of_cyril_12_coded() => byte(0x15CC4F)

// $15CC52: [8bit] Site of Cyril 13 Coded
function site_of_cyril_13_coded() => byte(0x15CC52)

// $15CC55: [8bit] Site of Cyril 14 Coded
function site_of_cyril_14_coded() => byte(0x15CC55)

// $15CC58: [8bit] Site of Cyril 15 Coded
function site_of_cyril_15_coded() => byte(0x15CC58)

// $15CC5B: [8bit] Site of Cyril 16 Coded
function site_of_cyril_16_coded() => byte(0x15CC5B)

// $15CC5E: [8bit] Site of Cyril 17 Coded
function site_of_cyril_17_coded() => byte(0x15CC5E)

// $15CC61: [8bit] Site of Cyril 18 Coded
function site_of_cyril_18_coded() => byte(0x15CC61)

// $15CC64: [8bit] Site of Cyril 19 Coded
function site_of_cyril_19_coded() => byte(0x15CC64)

// $15CC67: [8bit] Site of Cyril 20 Coded
function site_of_cyril_20_coded() => byte(0x15CC67)

// $15CC6A: [8bit] Site of Cyril 21 Coded
function site_of_cyril_21_coded() => byte(0x15CC6A)

// $15CC6D: [8bit] Site of Cyril 22 Coded
function site_of_cyril_22_coded() => byte(0x15CC6D)

// $15CC70: [8bit] Site of Cyril 23 Coded
function site_of_cyril_23_coded() => byte(0x15CC70)

// $15CC73: [8bit] Site of Cyril 24 Coded
function site_of_cyril_24_coded() => byte(0x15CC73)

// $15CC76: [8bit] Site of Cyril 25 Coded
function site_of_cyril_25_coded() => byte(0x15CC76)

// $15CC79: [8bit] Guardian's Domain Coded
function guardian_s_domain_coded() => byte(0x15CC79)

// $15CC7C: [8bit] Western Desert 1 Coded
function western_desert_1_coded() => byte(0x15CC7C)

// $15CC7E: [8bit] 0x7=Western Desert 1 Clear
function western_desert_1_clear() => byte(0x15CC7E)

// $15CC7F: [8bit] Western Desert 2 Coded
function western_desert_2_coded() => byte(0x15CC7F)

// $15CC81: [8bit] 0x7=Western Desert 2 Clear
function western_desert_2_clear() => byte(0x15CC81)

// $15CC82: [8bit] Western Desert 3 Coded
function western_desert_3_coded() => byte(0x15CC82)

// $15CC84: [8bit] 0x7=Western Desert 3 Clear
function western_desert_3_clear() => byte(0x15CC84)

// $15CC85: [8bit] Western Desert 4 Coded
function western_desert_4_coded() => byte(0x15CC85)

// $15CC87: [8bit] 0x7=Western Desert 4 Clear
function western_desert_4_clear() => byte(0x15CC87)

// $15CC88: [8bit] Western Desert 5 Coded
function western_desert_5_coded() => byte(0x15CC88)

// $15CC8A: [8bit] 0x7=Western Desert 5 Clear
function western_desert_5_clear() => byte(0x15CC8A)

// $15CC8B: [8bit] Western Desert 6 Coded
function western_desert_6_coded() => byte(0x15CC8B)

// $15CC8D: [8bit] 0x7=Western Desert 6 Clear
function western_desert_6_clear() => byte(0x15CC8D)

// $15CC8E: [8bit] Western Desert 7 Coded
function western_desert_7_coded() => byte(0x15CC8E)

// $15CC90: [8bit] 0x7=Western Desert 7 Clear
function western_desert_7_clear() => byte(0x15CC90)

// $15CC91: [8bit] Western Desert 8 Coded
function western_desert_8_coded() => byte(0x15CC91)

// $15CC93: [8bit] 0x1f=Western Desert 1 Clear
function western_desert_1_clear() => byte(0x15CC93)

// $15CC94: [8bit] Western Desert 9 Coded
function western_desert_9_coded() => byte(0x15CC94)

// $15CC96: [8bit] 0x7=Western Desert 9 Clear
function western_desert_9_clear() => byte(0x15CC96)

// $15CC97: [8bit] Western Desert 10 Coded
function western_desert_10_coded() => byte(0x15CC97)

// $15CC99: [8bit] 0x1f=Western Desert 10 Clear
function western_desert_10_clear() => byte(0x15CC99)

// $15CC9A: [8bit] Western Desert 11 Coded
function western_desert_11_coded() => byte(0x15CC9A)

// $15CC9C: [8bit] 0x7=Western Desert 11 Clear
function western_desert_11_clear() => byte(0x15CC9C)

// $15CC9D: [8bit] Western Desert 12 Coded
function western_desert_12_coded() => byte(0x15CC9D)

// $15CC9F: [8bit] 0x7=Western Desert 12 Clear
function western_desert_12_clear() => byte(0x15CC9F)

// $15CCA0: [8bit] Western Desert 13 Coded
function western_desert_13_coded() => byte(0x15CCA0)

// $15CCA2: [8bit] 0x1f=Western Desert 13 Clear
function western_desert_13_clear() => byte(0x15CCA2)

// $15CCA3: [8bit] Western Desert 14 Coded
function western_desert_14_coded() => byte(0x15CCA3)

// $15CCA5: [8bit] 0x7=Western Desert 14 Clear
function western_desert_14_clear() => byte(0x15CCA5)

// $15CCA6: [8bit] Western Desert 15 Coded
function western_desert_15_coded() => byte(0x15CCA6)

// $15CCA8: [8bit] 0x7=Western Desert 15 Clear
function western_desert_15_clear() => byte(0x15CCA8)

// $15CCA9: [8bit] Western Desert 16 Coded
function western_desert_16_coded() => byte(0x15CCA9)

// $15CCAB: [8bit] 0xf=Western Desert 16 Clear
function western_desert_16_clear() => byte(0x15CCAB)

// $15CCAC: [8bit] Western Desert 17 Coded
function western_desert_17_coded() => byte(0x15CCAC)

// $15CCAE: [8bit] 0x7=Western Desert 17 Clear
function western_desert_17_clear() => byte(0x15CCAE)

// $15CCAF: [8bit] Western Desert 18 Coded
function western_desert_18_coded() => byte(0x15CCAF)

// $15CCB1: [8bit] 0x7=Western Desert 18 Clear
function western_desert_18_clear() => byte(0x15CCB1)

// $15CCB2: [8bit] Western Desert 19 Coded
function western_desert_19_coded() => byte(0x15CCB2)

// $15CCB4: [8bit] 0x1f=Western Desert 19 Clear
function western_desert_19_clear() => byte(0x15CCB4)

// $15CCB5: [8bit] Western Desert 20 Coded
function western_desert_20_coded() => byte(0x15CCB5)

// $15CCB7: [8bit] 0x7=Western Desert 20 Clear
function western_desert_20_clear() => byte(0x15CCB7)

// $15CCB8: [8bit] Western Desert 21 Coded
function western_desert_21_coded() => byte(0x15CCB8)

// $15CCBA: [8bit] 0x7=Western Desert 21 Clear
function western_desert_21_clear() => byte(0x15CCBA)

// $15CCBB: [8bit] Eastern Desert 1 Coded
function eastern_desert_1_coded() => byte(0x15CCBB)

// $15CCBD: [8bit] 0x7=Eastern Desert 1 Clear
function eastern_desert_1_clear() => byte(0x15CCBD)

// $15CCBE: [8bit] Eastern Desert 2 Coded
function eastern_desert_2_coded() => byte(0x15CCBE)

// $15CCC0: [8bit] 0x7=Eastern Desert 2 Clear
function eastern_desert_2_clear() => byte(0x15CCC0)

// $15CCC1: [8bit] Eastern Desert 3 Coded
function eastern_desert_3_coded() => byte(0x15CCC1)

// $15CCC3: [8bit] 0x7=Eastern Desert 3 Clear
function eastern_desert_3_clear() => byte(0x15CCC3)

// $15CCC4: [8bit] Eastern Desert 4 Coded
function eastern_desert_4_coded() => byte(0x15CCC4)

// $15CCC6: [8bit] 0x7=Eastern Desert 4 Clear
function eastern_desert_4_clear() => byte(0x15CCC6)

// $15CCC7: [8bit] Eastern Desert 5 Coded
function eastern_desert_5_coded() => byte(0x15CCC7)

// $15CCC9: [8bit] 0x7=Eastern Desert 5 Clear
function eastern_desert_5_clear() => byte(0x15CCC9)

// $15CCCA: [8bit] Eastern Desert 6 Coded
function eastern_desert_6_coded() => byte(0x15CCCA)

// $15CCCC: [8bit] 0x1f=Eastern Desert 6 Clear
function eastern_desert_6_clear() => byte(0x15CCCC)

// $15CCCD: [8bit] Eastern Desert 7 Coded
function eastern_desert_7_coded() => byte(0x15CCCD)

// $15CCCF: [8bit] 0x7=Eastern Desert 7 Clear
function eastern_desert_7_clear() => byte(0x15CCCF)

// $15CCD0: [8bit] Eastern Desert 8 Coded
function eastern_desert_8_coded() => byte(0x15CCD0)

// $15CCD2: [8bit] 0x7=Eastern Desert 8 Clear
function eastern_desert_8_clear() => byte(0x15CCD2)

// $15CCD3: [8bit] Eastern Desert 9 Coded
function eastern_desert_9_coded() => byte(0x15CCD3)

// $15CCD5: [8bit] 0x7=Eastern Desert 9 Clear
function eastern_desert_9_clear() => byte(0x15CCD5)

// $15CCD6: [8bit] Eastern Desert 10 Coded
function eastern_desert_10_coded() => byte(0x15CCD6)

// $15CCD8: [8bit] 0x7=Eastern Desert 10 Clear
function eastern_desert_10_clear() => byte(0x15CCD8)

// $15CCD9: [8bit] Eastern Desert 11 Coded
function eastern_desert_11_coded() => byte(0x15CCD9)

// $15CCDB: [8bit] 0x7=Eastern Desert 11 Clear
function eastern_desert_11_clear() => byte(0x15CCDB)

// $15CCDC: [8bit] Eastern Desert 12 Coded
function eastern_desert_12_coded() => byte(0x15CCDC)

// $15CCDE: [8bit] 0x7=Eastern Desert 12 Clear
function eastern_desert_12_clear() => byte(0x15CCDE)

// $15CCDF: [8bit] Eastern Desert 13 Coded
function eastern_desert_13_coded() => byte(0x15CCDF)

// $15CCE1: [8bit] 0x1f=Eastern Desert 13 Clear
function eastern_desert_13_clear() => byte(0x15CCE1)

// $15CCE2: [8bit] Eastern Desert 14 Coded
function eastern_desert_14_coded() => byte(0x15CCE2)

// $15CCE4: [8bit] 0xf=Eastern Desert 14 Clear
function eastern_desert_14_clear() => byte(0x15CCE4)

// $15CCE5: [8bit] Eastern Desert 15 Coded
function eastern_desert_15_coded() => byte(0x15CCE5)

// $15CCE7: [8bit] 0x7=Eastern Desert 15 Clear
function eastern_desert_15_clear() => byte(0x15CCE7)

// $15CCE8: [8bit] Eastern Desert 16 Coded
function eastern_desert_16_coded() => byte(0x15CCE8)

// $15CCEA: [8bit] 0x7=Eastern Desert 16 Clear
function eastern_desert_16_clear() => byte(0x15CCEA)

// $15CCEB: [8bit] Eastern Desert 17 Coded
function eastern_desert_17_coded() => byte(0x15CCEB)

// $15CCED: [8bit] 0xf=Eastern Desert 17 Clear
function eastern_desert_17_clear() => byte(0x15CCED)

// $15CCEE: [8bit] Eastern Desert 18 Coded
function eastern_desert_18_coded() => byte(0x15CCEE)

// $15CCF0: [8bit] 0x1f=Eastern Desert 18 Clear
function eastern_desert_18_clear() => byte(0x15CCF0)

// $15CCF1: [8bit] Weld River 1 Coded
function weld_river_1_coded() => byte(0x15CCF1)

// $15CCF3: [8bit] 0xf=Weld River 1 Clear
function weld_river_1_clear() => byte(0x15CCF3)

// $15CCF4: [8bit] Weld River 2 Coded
function weld_river_2_coded() => byte(0x15CCF4)

// $15CCF6: [8bit] 0x7=Weld River 2 Clear
function weld_river_2_clear() => byte(0x15CCF6)

// $15CCF7: [8bit] Weld River 3 Coded
function weld_river_3_coded() => byte(0x15CCF7)

// $15CCF9: [8bit] 0x7=Weld River 3 Clear
function weld_river_3_clear() => byte(0x15CCF9)

// $15CCFA: [8bit] Ravine of Vulgazzo 1 Coded
function ravine_of_vulgazzo_1_coded() => byte(0x15CCFA)

// $15CCFC: [8bit] 0x7=Ravine of Vulgazzo 1 Clear
function ravine_of_vulgazzo_1_clear() => byte(0x15CCFC)

// $15CCFD: [8bit] Ravine of Vulgazzo 2 Coded
function ravine_of_vulgazzo_2_coded() => byte(0x15CCFD)

// $15CCFF: [8bit] 0x7=Ravine of Vulgazzo 2 Clear
function ravine_of_vulgazzo_2_clear() => byte(0x15CCFF)

// $15CD00: [8bit] Ravine of Vulgazzo 3 Coded
function ravine_of_vulgazzo_3_coded() => byte(0x15CD00)

// $15CD02: [8bit] 0x7=Ravine of Vulgazzo 3 Clear
function ravine_of_vulgazzo_3_clear() => byte(0x15CD02)

// $15CD03: [8bit] Shark's Jaw 1 Coded
function shark_s_jaw_1_coded() => byte(0x15CD03)

// $15CD05: [8bit] 0x7=Shark's Jaw 1 Clear
function shark_s_jaw_1_clear() => byte(0x15CD05)

// $15CD06: [8bit] Shark's Jaw 2 Coded
function shark_s_jaw_2_coded() => byte(0x15CD06)

// $15CD08: [8bit] 0x7=Shark's Jaw 2 Clear
function shark_s_jaw_2_clear() => byte(0x15CD08)

// $15CD09: [8bit] Shark's Jaw 3 Coded
function shark_s_jaw_3_coded() => byte(0x15CD09)

// $15CD0B: [8bit] 0xf=Shark's Jaw 3 Clear
function shark_s_jaw_3_clear() => byte(0x15CD0B)

// $15CD8E: [8bit] Underground Training Space 1 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function underground_training_space_1_medal() => byte(0x15CD8E)

// $15CDBE: [8bit] Underground Training Space 2 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function underground_training_space_2_medal() => byte(0x15CDBE)

// $15CDEE: [8bit] Underground Training Space 3 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function underground_training_space_3_medal() => byte(0x15CDEE)

// $15CE1E: [8bit] Underground Training Space 4 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function underground_training_space_4_medal() => byte(0x15CE1E)

// $15CE4E: [8bit] Underground Training Space 7 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function underground_training_space_7_medal() => byte(0x15CE4E)

// $15CE7E: [8bit] Underground Training Space 10 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function underground_training_space_10_medal() => byte(0x15CE7E)

// $15CEAE: [8bit] Swordsman's Domain (Gustav) Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function swordsman_s_domain_gustav_medal() => byte(0x15CEAE)

// $15CF6E: [8bit] Witch's Hidden Room 2 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function witch_s_hidden_room_2_medal() => byte(0x15CF6E)

// $15CF9E: [8bit] Witch's Hidden Room 3 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function witch_s_hidden_room_3_medal() => byte(0x15CF9E)

// $15CFCE: [8bit] Witch's Hidden Room 4 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function witch_s_hidden_room_4_medal() => byte(0x15CFCE)

// $15CFFE: [8bit] Witch's Hidden Room 5 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function witch_s_hidden_room_5_medal() => byte(0x15CFFE)

// $15D02E: [8bit] Witch's Hidden Room 6 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function witch_s_hidden_room_6_medal() => byte(0x15D02E)

// $15D05E: [8bit] Kalcazoth Cave 15 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function kalcazoth_cave_15_medal() => byte(0x15D05E)

// $15D08E: [8bit] Kalcazoth Cave 16 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function kalcazoth_cave_16_medal() => byte(0x15D08E)

// $15D0BE: [8bit] Kalcazoth Cave 17 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function kalcazoth_cave_17_medal() => byte(0x15D0BE)

// $15D0EE: [8bit] Underground Training Space 6 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function underground_training_space_6_medal() => byte(0x15D0EE)

// $15D11E: [8bit] Underground Training Space 8 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function underground_training_space_8_medal() => byte(0x15D11E)

// $15D14E: [8bit] Underground Training Space 9 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function underground_training_space_9_medal() => byte(0x15D14E)

// $15D1DE: [8bit] Eternal Abyss (Kullervo) Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function eternal_abyss_kullervo_medal() => byte(0x15D1DE)

// $15D20E: [8bit] Dungeon 7 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function dungeon_7_medal() => byte(0x15D20E)

// $15D23E: [8bit] Hidden Meia 3 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function hidden_meia_3_medal() => byte(0x15D23E)

// $15D26E: [8bit] Hidden Meia 15 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function hidden_meia_15_medal() => byte(0x15D26E)

// $15D29E: [8bit] Dungeon 4 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function dungeon_4_medal() => byte(0x15D29E)

// $15D2CE: [8bit] Dungeon 9 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function dungeon_9_medal() => byte(0x15D2CE)

// $15D2FE: [8bit] Hidden Meia 1 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function hidden_meia_1_medal() => byte(0x15D2FE)

// $15D32E: [8bit] Hidden Meia 5 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function hidden_meia_5_medal() => byte(0x15D32E)

// $15D35E: [8bit] Hidden Meia 11 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function hidden_meia_11_medal() => byte(0x15D35E)

// $15D38E: [8bit] Hidden Meia 6 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function hidden_meia_6_medal() => byte(0x15D38E)

// $15D3BE: [8bit] Hidden Meia 8 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function hidden_meia_8_medal() => byte(0x15D3BE)

// $15D3EE: [8bit] Hidden Meia 12 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function hidden_meia_12_medal() => byte(0x15D3EE)

// $15D41E: [8bit] Hidden Meia 13 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function hidden_meia_13_medal() => byte(0x15D41E)

// $15D44E: [8bit] Great Spear of Mastema 2 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function great_spear_of_mastema_2_medal() => byte(0x15D44E)

// $15D47E: [8bit] Great Spear of Mastema 3 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function great_spear_of_mastema_3_medal() => byte(0x15D47E)

// $15D4AE: [8bit] Great Spear of Mastema 4 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function great_spear_of_mastema_4_medal() => byte(0x15D4AE)

// $15D4DE: [8bit] Great Spear of Mastema 5 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function great_spear_of_mastema_5_medal() => byte(0x15D4DE)

// $15D50E: [8bit] Great Spear of Mastema 6 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function great_spear_of_mastema_6_medal() => byte(0x15D50E)

// $15D53E: [8bit] Great Spear of Mastema 7 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function great_spear_of_mastema_7_medal() => byte(0x15D53E)

// $15D56E: [8bit] Great Spear of Mastema 8 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function great_spear_of_mastema_8_medal() => byte(0x15D56E)

// $15D59E: [8bit] Paradise at Cloud's End (Perkele) Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function paradise_at_cloud_s_end_perkele_medal() => byte(0x15D59E)

// $15D5CE: [8bit] Great Spear of Mastema 10 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function great_spear_of_mastema_10_medal() => byte(0x15D5CE)

// $15D5FE: [8bit] Great Spear of Mastema 11 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function great_spear_of_mastema_11_medal() => byte(0x15D5FE)

// $15D62E: [8bit] Great Spear of Mastema 12 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function great_spear_of_mastema_12_medal() => byte(0x15D62E)

// $15D65E: [8bit] Great Spear of Mastema 13 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function great_spear_of_mastema_13_medal() => byte(0x15D65E)

// $15D68E: [8bit] Great Spear of Mastema 14 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function great_spear_of_mastema_14_medal() => byte(0x15D68E)

// $15D6BE: [8bit] Great Spear of Mastema 15 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function great_spear_of_mastema_15_medal() => byte(0x15D6BE)

// $15D6EE: [8bit] Great Spear of Mastema 16 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function great_spear_of_mastema_16_medal() => byte(0x15D6EE)

// $15D71E: [8bit] Great Spear of Mastema 17 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function great_spear_of_mastema_17_medal() => byte(0x15D71E)

// $15D74E: [8bit] Great Spear of Mastema 19 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function great_spear_of_mastema_19_medal() => byte(0x15D74E)

// $15D77E: [8bit] Tornaq Ice Cavern 1 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function tornaq_ice_cavern_1_medal() => byte(0x15D77E)

// $15D7AE: [8bit] Tornaq Ice Cavern 2 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function tornaq_ice_cavern_2_medal() => byte(0x15D7AE)

// $15D7DE: [8bit] Tornaq Ice Cavern 16 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function tornaq_ice_cavern_16_medal() => byte(0x15D7DE)

// $15D80E: [8bit] Tornaq Ice Cavern 4 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function tornaq_ice_cavern_4_medal() => byte(0x15D80E)

// $15D83E: [8bit] Tornaq Ice Cavern 12 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function tornaq_ice_cavern_12_medal() => byte(0x15D83E)

// $15D86E: [8bit] Tornaq Ice Cavern 8 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function tornaq_ice_cavern_8_medal() => byte(0x15D86E)

// $15D89E: [8bit] Sealed Domain (Amorphes) Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function sealed_domain_amorphes_medal() => byte(0x15D89E)

// $15D8CE: [8bit] Tornaq Ice Cavern 3 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function tornaq_ice_cavern_3_medal() => byte(0x15D8CE)

// $15D8FE: [8bit] Tornaq Ice Cavern 5 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function tornaq_ice_cavern_5_medal() => byte(0x15D8FE)

// $15D92E: [8bit] Tornaq Ice Cavern 6 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function tornaq_ice_cavern_6_medal() => byte(0x15D92E)

// $15D95E: [8bit] Tornaq Ice Cavern 7 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function tornaq_ice_cavern_7_medal() => byte(0x15D95E)

// $15D98E: [8bit] Tornaq Ice Cavern 9 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function tornaq_ice_cavern_9_medal() => byte(0x15D98E)

// $15D9BE: [8bit] Tornaq Ice Cavern 10 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function tornaq_ice_cavern_10_medal() => byte(0x15D9BE)

// $15D9EE: [8bit] Tornaq Ice Cavern 11 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function tornaq_ice_cavern_11_medal() => byte(0x15D9EE)

// $15DA1E: [8bit] Tornaq Ice Cavern 13 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function tornaq_ice_cavern_13_medal() => byte(0x15DA1E)

// $15DA4E: [8bit] Tornaq Ice Cavern 14 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function tornaq_ice_cavern_14_medal() => byte(0x15DA4E)

// $15DA7E: [8bit] Tornaq Ice Cavern 15 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function tornaq_ice_cavern_15_medal() => byte(0x15DA7E)

// $15DAAE: [8bit] Tornaq Ice Cavern 17 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function tornaq_ice_cavern_17_medal() => byte(0x15DAAE)

// $15DADE: [8bit] Tornaq Ice Cavern 18 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function tornaq_ice_cavern_18_medal() => byte(0x15DADE)

// $15DB0E: [8bit] Tornaq Ice Cavern 19 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function tornaq_ice_cavern_19_medal() => byte(0x15DB0E)

// $15DB3E: [8bit] Depths of Ice Cavern 1 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function depths_of_ice_cavern_1_medal() => byte(0x15DB3E)

// $15DB6E: [8bit] Depths of Ice Cavern 2 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function depths_of_ice_cavern_2_medal() => byte(0x15DB6E)

// $15DB9E: [8bit] Depths of Ice Cavern 3 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function depths_of_ice_cavern_3_medal() => byte(0x15DB9E)

// $15DBCE: [8bit] Depths of Ice Cavern 4 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function depths_of_ice_cavern_4_medal() => byte(0x15DBCE)

// $15DBFE: [8bit] Depths of Ice Cavern 5 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function depths_of_ice_cavern_5_medal() => byte(0x15DBFE)

// $15DC2E: [8bit] Depths of Ice Cavern 6 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function depths_of_ice_cavern_6_medal() => byte(0x15DC2E)

// $15DC5E: [8bit] Depths of Ice Cavern 7 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function depths_of_ice_cavern_7_medal() => byte(0x15DC5E)

// $15DC8E: [8bit] Depths of Ice Cavern 8 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function depths_of_ice_cavern_8_medal() => byte(0x15DC8E)

// $15DCBE: [8bit] Depths of Ice Cavern 9 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function depths_of_ice_cavern_9_medal() => byte(0x15DCBE)

// $15DCEE: [8bit] Absolute Zero (Malcahatu) Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function absolute_zero_malcahatu_medal() => byte(0x15DCEE)

// $15DD1E: [8bit] Depths of Ice Cavern 10 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function depths_of_ice_cavern_10_medal() => byte(0x15DD1E)

// $15DD4E: [8bit] Depths of Ice Cavern 11 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function depths_of_ice_cavern_11_medal() => byte(0x15DD4E)

// $15DD7E: [8bit] Depths of Ice Cavern 12 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function depths_of_ice_cavern_12_medal() => byte(0x15DD7E)

// $15DDAE: [8bit] Depths of Ice Cavern 13 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function depths_of_ice_cavern_13_medal() => byte(0x15DDAE)

// $15DDDE: [8bit] Depths of Ice Cavern 14 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function depths_of_ice_cavern_14_medal() => byte(0x15DDDE)

// $15DE0E: [8bit] Depths of Ice Cavern 15 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function depths_of_ice_cavern_15_medal() => byte(0x15DE0E)

// $15DE3E: [8bit] Depths of Ice Cavern 16 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function depths_of_ice_cavern_16_medal() => byte(0x15DE3E)

// $15DE6E: [8bit] Depths of Ice Cavern 17 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function depths_of_ice_cavern_17_medal() => byte(0x15DE6E)

// $15DE9E: [8bit] Depths of Ice Cavern 18 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function depths_of_ice_cavern_18_medal() => byte(0x15DE9E)

// $15DECE: [8bit] Depths of Ice Cavern 19 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function depths_of_ice_cavern_19_medal() => byte(0x15DECE)

// $15DEFE: [8bit] Mt. Elious 1 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function mt_elious_1_medal() => byte(0x15DEFE)

// $15DF2E: [8bit] Mt. Elious 2 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function mt_elious_2_medal() => byte(0x15DF2E)

// $15DF5E: [8bit] Mt. Elious 3 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function mt_elious_3_medal() => byte(0x15DF5E)

// $15DF8E: [8bit] Mt. Elious 4 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function mt_elious_4_medal() => byte(0x15DF8E)

// $15DFBE: [8bit] Mt. Elious 5 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function mt_elious_5_medal() => byte(0x15DFBE)

// $15DFEE: [8bit] Mt. Elious 6 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function mt_elious_6_medal() => byte(0x15DFEE)

// $15E01E: [8bit] Mt. Elious 7 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function mt_elious_7_medal() => byte(0x15E01E)

// $15E04E: [8bit] Mt. Elious 8 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function mt_elious_8_medal() => byte(0x15E04E)

// $15E07E: [8bit] Mt. Elious 9 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function mt_elious_9_medal() => byte(0x15E07E)

// $15E0AE: [8bit] Melting Pot (Untamo) Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function melting_pot_untamo_medal() => byte(0x15E0AE)

// $15E0DE: [8bit] Mt. Elious 10 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function mt_elious_10_medal() => byte(0x15E0DE)

// $15E10E: [8bit] Mt. Elious 11 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function mt_elious_11_medal() => byte(0x15E10E)

// $15E13E: [8bit] Mt. Elious 12 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function mt_elious_12_medal() => byte(0x15E13E)

// $15E16E: [8bit] Mt. Elious 13 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function mt_elious_13_medal() => byte(0x15E16E)

// $15E19E: [8bit] Mt. Elious 14 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function mt_elious_14_medal() => byte(0x15E19E)

// $15E1CE: [8bit] Mt. Elious 15 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function mt_elious_15_medal() => byte(0x15E1CE)

// $15E1FE: [8bit] Mt. Elious 16 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function mt_elious_16_medal() => byte(0x15E1FE)

// $15E22E: [8bit] Mt. Elious 17 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function mt_elious_17_medal() => byte(0x15E22E)

// $15E25E: [8bit] Mt. Elious 18 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function mt_elious_18_medal() => byte(0x15E25E)

// $15E28E: [8bit] Mt. Elious 19 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function mt_elious_19_medal() => byte(0x15E28E)

// $15E2BE: [8bit] Mt. Elious 20 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function mt_elious_20_medal() => byte(0x15E2BE)

// $15E2EE: [8bit] Kalcazoth Cave 1 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function kalcazoth_cave_1_medal() => byte(0x15E2EE)

// $15E31E: [8bit] Kalcazoth Cave 2 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function kalcazoth_cave_2_medal() => byte(0x15E31E)

// $15E34E: [8bit] Kalcazoth Cave 11 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function kalcazoth_cave_11_medal() => byte(0x15E34E)

// $15E37E: [8bit] Kalcazoth Cave 10 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function kalcazoth_cave_10_medal() => byte(0x15E37E)

// $15E3AE: [8bit] Kalcazoth Cave 3 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function kalcazoth_cave_3_medal() => byte(0x15E3AE)

// $15E3DE: [8bit] Kalcazoth Cave 4 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function kalcazoth_cave_4_medal() => byte(0x15E3DE)

// $15E40E: [8bit] Sun Shelf (Rudrud) Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function sun_shelf_rudrud_medal() => byte(0x15E40E)

// $15E43E: [8bit] Kalcazoth Cave 5 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function kalcazoth_cave_5_medal() => byte(0x15E43E)

// $15E46E: [8bit] Kalcazoth Cave 6 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function kalcazoth_cave_6_medal() => byte(0x15E46E)

// $15E49E: [8bit] Kalcazoth Cave 7 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function kalcazoth_cave_7_medal() => byte(0x15E49E)

// $15E4CE: [8bit] Kalcazoth Cave 8 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function kalcazoth_cave_8_medal() => byte(0x15E4CE)

// $15E4FE: [8bit] Kalcazoth Cave 12 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function kalcazoth_cave_12_medal() => byte(0x15E4FE)

// $15E52E: [8bit] Kalcazoth Cave 13 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function kalcazoth_cave_13_medal() => byte(0x15E52E)

// $15E55E: [8bit] Kalcazoth Cave 14 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function kalcazoth_cave_14_medal() => byte(0x15E55E)

// $15E58E: [8bit] Western Big Tree (Chimera) Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function western_big_tree_chimera_medal() => byte(0x15E58E)

// $15E5BE: [8bit] Beast Cemetery (Tuoni) Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function beast_cemetery_tuoni_medal() => byte(0x15E5BE)

// $15E5EE: [8bit] Eddy of Decay (Antelobibnen) Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function eddy_of_decay_antelobibnen_medal() => byte(0x15E5EE)

// $15E64E: [8bit] Desert Witch's Palace (Ohriemed Aof) Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function desert_witch_s_palace_ohriemed_aof_medal() => byte(0x15E64E)

// $15E67E: [8bit] Site of Cyril 1 (Ohriemed Aof) Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function site_of_cyril_1_ohriemed_aof_medal() => byte(0x15E67E)

// $15E6AE: [8bit] Site of Cyril 2 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function site_of_cyril_2_medal() => byte(0x15E6AE)

// $15E6DE: [8bit] Site of Cyril 3 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function site_of_cyril_3_medal() => byte(0x15E6DE)

// $15E70E: [8bit] Site of Cyril 4 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function site_of_cyril_4_medal() => byte(0x15E70E)

// $15E73E: [8bit] Site of Cyril 5 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function site_of_cyril_5_medal() => byte(0x15E73E)

// $15E76E: [8bit] Site of Cyril 6 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function site_of_cyril_6_medal() => byte(0x15E76E)

// $15E79E: [8bit] Site of Cyril 7 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function site_of_cyril_7_medal() => byte(0x15E79E)

// $15E7CE: [8bit] Site of Cyril 8 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function site_of_cyril_8_medal() => byte(0x15E7CE)

// $15E7FE: [8bit] Site of Cyril 9 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function site_of_cyril_9_medal() => byte(0x15E7FE)

// $15E82E: [8bit] Site of Cyril 10 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function site_of_cyril_10_medal() => byte(0x15E82E)

// $15E85E: [8bit] Site of Cyril 11 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function site_of_cyril_11_medal() => byte(0x15E85E)

// $15E88E: [8bit] Site of Cyril 12 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function site_of_cyril_12_medal() => byte(0x15E88E)

// $15E8BE: [8bit] Site of Cyril 13 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function site_of_cyril_13_medal() => byte(0x15E8BE)

// $15E8EE: [8bit] Site of Cyril 14 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function site_of_cyril_14_medal() => byte(0x15E8EE)

// $15E91E: [8bit] Site of Cyril 15 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function site_of_cyril_15_medal() => byte(0x15E91E)

// $15E94E: [8bit] Site of Cyril 16 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function site_of_cyril_16_medal() => byte(0x15E94E)

// $15E97E: [8bit] Site of Cyril 17 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function site_of_cyril_17_medal() => byte(0x15E97E)

// $15E9AE: [8bit] Site of Cyril 18 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function site_of_cyril_18_medal() => byte(0x15E9AE)

// $15E9DE: [8bit] Site of Cyril 19 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function site_of_cyril_19_medal() => byte(0x15E9DE)

// $15EA0E: [8bit] Site of Cyril 20 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function site_of_cyril_20_medal() => byte(0x15EA0E)

// $15EA3E: [8bit] Site of Cyril 21 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function site_of_cyril_21_medal() => byte(0x15EA3E)

// $15EA6E: [8bit] Site of Cyril 22 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function site_of_cyril_22_medal() => byte(0x15EA6E)

// $15EA9E: [8bit] Site of Cyril 23 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function site_of_cyril_23_medal() => byte(0x15EA9E)

// $15EACE: [8bit] Site of Cyril 24 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function site_of_cyril_24_medal() => byte(0x15EACE)

// $15EAFE: [8bit] Guardian's Domain (Torsol) Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function guardian_s_domain_torsol_medal() => byte(0x15EAFE)

// $15EB2E: [8bit] Site of Cyril 25 Medal
//          0=None
//          1=Bronze
//          2=Silver
//          3=Gold
function site_of_cyril_25_medal() => byte(0x15EB2E)

// $15EB60: [8bit] Sword Coded
function sword_coded() => byte(0x15EB60)

// $15EB62: [128bits] Sword Memory
function sword_memory() => byte(0x15EB62)

// $15EB72: [8bit] Sword Inserted Memory
//          0x06=Stone
//          0x08=Copper
//          0x11=Ill
//          0x30=Nothing
function sword_inserted_memory() => byte(0x15EB72)

// $15EB93: [8bit] Katana Coded
function katana_coded() => byte(0x15EB93)

// $15EBC6: [8bit] Rapier Coded
function rapier_coded() => byte(0x15EBC6)

// $15EBF9: [8bit] Broadsword Coded
function broadsword_coded() => byte(0x15EBF9)

// $15EC2C: [8bit] Hammer Coded
function hammer_coded() => byte(0x15EC2C)

// $15EC5F: [8bit] Axe Coded
function axe_coded() => byte(0x15EC5F)

// $15EC92: [8bit] Mace Coded
function mace_coded() => byte(0x15EC92)

// $15ECC5: [8bit] Bomb Coded
function bomb_coded() => byte(0x15ECC5)

// $15ECF8: [8bit] Barrel Bomb Coded
function barrel_bomb_coded() => byte(0x15ECF8)

// $15ED2B: [8bit] Flying Dagger Coded
function flying_dagger_coded() => byte(0x15ED2B)

// $15ED5E: [8bit] Bowgun Coded
function bowgun_coded() => byte(0x15ED5E)

// $15ED91: [8bit] Gun Coded
function gun_coded() => byte(0x15ED91)

// $15EDC4: [8bit] Shield Coded
function shield_coded() => byte(0x15EDC4)

// $15EDF7: [8bit] Hat Coded
function hat_coded() => byte(0x15EDF7)

// $15EE2A: [8bit] Helmet Coded
function helmet_coded() => byte(0x15EE2A)

// $15EE5D: [8bit] Hair Decoration Coded
function hair_decoration_coded() => byte(0x15EE5D)

// $15EE90: [8bit] Headband Coded
function headband_coded() => byte(0x15EE90)

// $15EEC3: [8bit] Glasses Coded
function glasses_coded() => byte(0x15EEC3)

// $15EEF6: [8bit] Breastplate Coded
function breastplate_coded() => byte(0x15EEF6)

// $15EF29: [8bit] Belt Coded
function belt_coded() => byte(0x15EF29)

// $15EF5C: [8bit] Wings Coded
function wings_coded() => byte(0x15EF5C)

// $15EF8F: [8bit] Bread Coded
function bread_coded() => byte(0x15EF8F)

// $15EFC2: [8bit] Cookie Coded
function cookie_coded() => byte(0x15EFC2)

// $15EFF5: [8bit] Cake Coded
function cake_coded() => byte(0x15EFF5)

// $15F028: [8bit] Bottle Coded
function bottle_coded() => byte(0x15F028)

// $15F05B: [8bit] Raw Meat Coded
function raw_meat_coded() => byte(0x15F05B)

// $15F08E: [8bit] Doll Coded
function doll_coded() => byte(0x15F08E)

// $15F0C1: [8bit] Grass Coded
function grass_coded() => byte(0x15F0C1)

// $15F0F4: [8bit] Small Key Coded
function small_key_coded() => byte(0x15F0F4)

// $15F127: [8bit] Big Key Coded
function big_key_coded() => byte(0x15F127)

// $15F15A: [8bit] Jewel Coded
function jewel_coded() => byte(0x15F15A)

// $15F18D: [8bit] Blazera Coded
function blazera_coded() => byte(0x15F18D)

// $15F18E: [8bit] 0x6=Blazera Identified
function blazera_identified() => byte(0x15F18E)

// $15F1C0: [8bit] Forest Drop Coded
function forest_drop_coded() => byte(0x15F1C0)

// $15F1C1: [8bit] 0x6=Forest Drop Identified
function forest_drop_identified() => byte(0x15F1C1)

// $15F1F3: [8bit] Ice Lily Coded
function ice_lily_coded() => byte(0x15F1F3)

// $15F226: [8bit] Stormlit Coded
function stormlit_coded() => byte(0x15F226)

// $15F259: [8bit] Twinkler Coded
function twinkler_coded() => byte(0x15F259)

// $15F28C: [8bit] Shadowsol Coded
function shadowsol_coded() => byte(0x15F28C)

// $15F2BF: [8bit] Pagoda Coded
function pagoda_coded() => byte(0x15F2BF)

// $15F2F2: [8bit] Fury Plant Coded
function fury_plant_coded() => byte(0x15F2F2)

// $15F325: [8bit] Bronze Iris Coded
function bronze_iris_coded() => byte(0x15F325)

// $15F358: [8bit] Silver Azel Coded
function silver_azel_coded() => byte(0x15F358)

// $15F38B: [8bit] Diaorchid Coded
function diaorchid_coded() => byte(0x15F38B)

// $15F3BE: [8bit] Stone-Cutter Coded
function stone_cutter_coded() => byte(0x15F3BE)

// $15F3F1: [8bit] Iron Orchid Coded
function iron_orchid_coded() => byte(0x15F3F1)

// $15F424: [8bit] Burstbulb Coded
function burstbulb_coded() => byte(0x15F424)

// $15F457: [8bit] Silver Crow Coded
function silver_crow_coded() => byte(0x15F457)

// $15F48A: [8bit] Golden Plant Coded
function golden_plant_coded() => byte(0x15F48A)

// $15F4BD: [8bit] Hero Bloom Coded
function hero_bloom_coded() => byte(0x15F4BD)

// $15F4F0: [8bit] Dream Grass Coded
function dream_grass_coded() => byte(0x15F4F0)

// $15F523: [8bit] Karma Flower Coded
function karma_flower_coded() => byte(0x15F523)

// $15F556: [8bit] Stretchus Coded
function stretchus_coded() => byte(0x15F556)

// $15F589: [8bit] Flash Gras Coded
function flash_gras_coded() => byte(0x15F589)

// $15F5BC: [8bit] Hope Pod Coded
function hope_pod_coded() => byte(0x15F5BC)

// $15F5EF: [8bit] Lingerlom Coded
function lingerlom_coded() => byte(0x15F5EF)

// $15F622: [8bit] Purse Plant Coded
function purse_plant_coded() => byte(0x15F622)

// $15F623: [8bit] 0x6=Purse Plant Identified
function purse_plant_identified() => byte(0x15F623)

// $15F655: [8bit] Angel Wings Coded
function angel_wings_coded() => byte(0x15F655)

// $15F688: [8bit] Howl Grass Coded
function howl_grass_coded() => byte(0x15F688)

// $15F689: [8bit] 0x6=Howl Grass Identified
function howl_grass_identified() => byte(0x15F689)

// $15F6BB: [8bit] Cat Flower Coded
function cat_flower_coded() => byte(0x15F6BB)

// $15F6EE: [8bit] Scaled Grass Coded
function scaled_grass_coded() => byte(0x15F6EE)

// $15F6EF: [8bit] 0x6=Scaled Grass Identified
function scaled_grass_identified() => byte(0x15F6EF)

// $15F721: [8bit] Jaja Flower Coded
function jaja_flower_coded() => byte(0x15F721)

// $15F754: [8bit] Bug Tree Coded
function bug_tree_coded() => byte(0x15F754)

// $15F787: [8bit] Battle Sword Coded
function battle_sword_coded() => byte(0x15F787)

// $15F788: [8bit] 0x7=Battle Sword Identified
function battle_sword_identified() => byte(0x15F788)

// $15F78A: [8bit] Gladius Coded
function gladius_coded() => byte(0x15F78A)

// $15F78D: [8bit] Kaleila Sword Coded
function kaleila_sword_coded() => byte(0x15F78D)

// $15F790: [8bit] Black Saber Coded
function black_saber_coded() => byte(0x15F790)

// $15F793: [8bit] General Sword Coded
function general_sword_coded() => byte(0x15F793)

// $15F796: [8bit] Rune Blade Coded
function rune_blade_coded() => byte(0x15F796)

// $15F799: [8bit] Xenocross Coded
function xenocross_coded() => byte(0x15F799)

// $15F79C: [8bit] Waiselgand Coded
function waiselgand_coded() => byte(0x15F79C)

// $15F79F: [8bit] Excalibur Coded
function excalibur_coded() => byte(0x15F79F)

// $15F7A2: [8bit] Kusanagi Coded
function kusanagi_coded() => byte(0x15F7A2)

// $15F7A5: [8bit] Dark Star Coded
function dark_star_coded() => byte(0x15F7A5)

// $15F7A8: [8bit] Genesis Coded
function genesis_coded() => byte(0x15F7A8)

// $15F7AB: [8bit] Scimitar Coded
function scimitar_coded() => byte(0x15F7AB)

// $15F7AE: [8bit] Shotel Coded
function shotel_coded() => byte(0x15F7AE)

// $15F7B1: [8bit] Bizen Osafune Coded
function bizen_osafune_coded() => byte(0x15F7B1)

// $15F7B4: [8bit] Mantis Blade Coded
function mantis_blade_coded() => byte(0x15F7B4)

// $15F7B7: [8bit] Onikiri Coded
function onikiri_coded() => byte(0x15F7B7)

// $15F7BA: [8bit] Muramasa Coded
function muramasa_coded() => byte(0x15F7BA)

// $15F7BD: [8bit] Black Feather Coded
function black_feather_coded() => byte(0x15F7BD)

// $15F7C0: [8bit] Stone Tusk Coded
function stone_tusk_coded() => byte(0x15F7C0)

// $15F7C3: [8bit] Flamberge Coded
function flamberge_coded() => byte(0x15F7C3)

// $15F7C6: [8bit] Assassin Dagger Coded
function assassin_dagger_coded() => byte(0x15F7C6)

// $15F7C9: [8bit] Lightning Coded
function lightning_coded() => byte(0x15F7C9)

// $15F7CC: [8bit] Hauteclaire Coded
function hauteclaire_coded() => byte(0x15F7CC)

// $15F7CF: [8bit] Durandal Coded
function durandal_coded() => byte(0x15F7CF)

// $15F7D2: [8bit] Dainslef Coded
function dainslef_coded() => byte(0x15F7D2)

// $15F7D5: [8bit] Anwar Coded
function anwar_coded() => byte(0x15F7D5)

// $15F7D8: [8bit] Laeveteinn Coded
function laeveteinn_coded() => byte(0x15F7D8)

// $15F7DB: [8bit] Grand Hammer Coded
function grand_hammer_coded() => byte(0x15F7DB)

// $15F7DE: [8bit] Forest Hammer Coded
function forest_hammer_coded() => byte(0x15F7DE)

// $15F7E1: [8bit] Mjollnir Coded
function mjollnir_coded() => byte(0x15F7E1)

// $15F7E4: [8bit] Iron Beak Coded
function iron_beak_coded() => byte(0x15F7E4)

// $15F7E7: [8bit] Cyclops Coded
function cyclops_coded() => byte(0x15F7E7)

// $15F7EA: [8bit] Spiked Mace Coded
function spiked_mace_coded() => byte(0x15F7EA)

// $15F7ED: [8bit] Hecatonchires Coded
function hecatonchires_coded() => byte(0x15F7ED)

// $15F7F0: [8bit] Napalm Bomb Coded
function napalm_bomb_coded() => byte(0x15F7F0)

// $15F7F3: [8bit] Kaleila Bomb Coded
function kaleila_bomb_coded() => byte(0x15F7F3)

// $15F7F6: [8bit] Dynamite Coded
function dynamite_coded() => byte(0x15F7F6)

// $15F7F9: [8bit] Remote Barrel Coded
function remote_barrel_coded() => byte(0x15F7F9)

// $15F7FC: [8bit] Haochy Soul Coded
function haochy_soul_coded() => byte(0x15F7FC)

// $15F7FF: [8bit] Spirit Bomb Coded
function spirit_bomb_coded() => byte(0x15F7FF)

// $15F802: [8bit] Throwing Star Coded
function throwing_star_coded() => byte(0x15F802)

// $15F805: [8bit] Tomahawk Coded
function tomahawk_coded() => byte(0x15F805)

// $15F808: [8bit] Shadow Fang Coded
function shadow_fang_coded() => byte(0x15F808)

// $15F80B: [8bit] Arbalest Coded
function arbalest_coded() => byte(0x15F80B)

// $15F80E: [8bit] Ice Bolt Coded
function ice_bolt_coded() => byte(0x15F80E)

// $15F811: [8bit] Blunderbuss Coded
function blunderbuss_coded() => byte(0x15F811)

// $15F814: [8bit] Dragoon Coded
function dragoon_coded() => byte(0x15F814)

// $15F817: [8bit] Knight Shield Coded
function knight_shield_coded() => byte(0x15F817)

// $15F81A: [8bit] Spartan Guard Coded
function spartan_guard_coded() => byte(0x15F81A)

// $15F81D: [8bit] Guardian Coded
function guardian_coded() => byte(0x15F81D)

// $15F820: [8bit] Aegis Coded
function aegis_coded() => byte(0x15F820)

// $15F823: [8bit] Fatal Battle Sword Coded
function fatal_battle_sword_coded() => byte(0x15F823)

// $15F826: [8bit] Champion Sword Gladius Coded
function champion_sword_gladius_coded() => byte(0x15F826)

// $15F829: [8bit] Common Kaleila Sword Coded
function common_kaleila_sword_coded() => byte(0x15F829)

// $15F82C: [8bit] Demonic Sword Black Saber Coded
function demonic_sword_black_saber_coded() => byte(0x15F82C)

// $15F82F: [8bit] Brute Sword General Sword Coded
function brute_sword_general_sword_coded() => byte(0x15F82F)

// $15F832: [8bit] Magic Sword Rune Blade Coded
function magic_sword_rune_blade_coded() => byte(0x15F832)

// $15F835: [8bit] Holy King Sword Xenocross Coded
function holy_king_sword_xenocross_coded() => byte(0x15F835)

// $15F838: [8bit] Wicked Sword Waiselgand Coded
function wicked_sword_waiselgand_coded() => byte(0x15F838)

// $15F83B: [8bit] Holy Sword Excalibur Coded
function holy_sword_excalibur_coded() => byte(0x15F83B)

// $15F83E: [8bit] Treasured Sword Kusanagi Coded
function treasured_sword_kusanagi_coded() => byte(0x15F83E)

// $15F841: [8bit] Secret Sword Dark Star Coded
function secret_sword_dark_star_coded() => byte(0x15F841)

// $15F844: [8bit] Creation Sword Genesis Coded
function creation_sword_genesis_coded() => byte(0x15F844)

// $15F847: [8bit] Crescent Katana Scimitar Coded
function crescent_katana_scimitar_coded() => byte(0x15F847)

// $15F84A: [8bit] Curved Katana Shotel Coded
function curved_katana_shotel_coded() => byte(0x15F84A)

// $15F84D: [8bit] Superior Katana Bizen Osafune Coded
function superior_katana_bizen_osafune_coded() => byte(0x15F84D)

// $15F850: [8bit] Toxic Katana Mantis Blade Coded
function toxic_katana_mantis_blade_coded() => byte(0x15F850)

// $15F853: [8bit] Judgement Katana Onikiri Coded
function judgement_katana_onikiri_coded() => byte(0x15F853)

// $15F856: [8bit] Bewitching Katana Muramasa Coded
function bewitching_katana_muramasa_coded() => byte(0x15F856)

// $15F859: [8bit] Friend's Rapier Black Feather Coded
function friend_s_rapier_black_feather_coded() => byte(0x15F859)

// $15F85C: [8bit] Hunter's Rapier Stone Tusk Coded
function hunter_s_rapier_stone_tusk_coded() => byte(0x15F85C)

// $15F85F: [8bit] Fire Pillar Rapier Flamberge Coded
function fire_pillar_rapier_flamberge_coded() => byte(0x15F85F)

// $15F862: [8bit] Darkness Rapier Assassin Dagger Coded
function darkness_rapier_assassin_dagger_coded() => byte(0x15F862)

// $15F865: [8bit] Lightning Fast Rapier Lightning Coded
function lightning_fast_rapier_lightning_coded() => byte(0x15F865)

// $15F868: [8bit] Pure Rapier Hauteclaire Coded
function pure_rapier_hauteclaire_coded() => byte(0x15F868)

// $15F86B: [8bit] Flaring Rapier Durandal Coded
function flaring_rapier_durandal_coded() => byte(0x15F86B)

// $15F86E: [8bit] Thick Broadsword Dainslef Coded
function thick_broadsword_dainslef_coded() => byte(0x15F86E)

// $15F871: [8bit] Sandy Broadsword Anwar Coded
function sandy_broadsword_anwar_coded() => byte(0x15F871)

// $15F874: [8bit] Demise Broadsword Laevateinn Coded
function demise_broadsword_laevateinn_coded() => byte(0x15F874)

// $15F877: [8bit] Giant's Grand Hammer Coded
function giant_s_grand_hammer_coded() => byte(0x15F877)

// $15F87A: [8bit] Vast Forest Hammer Coded
function vast_forest_hammer_coded() => byte(0x15F87A)

// $15F87D: [8bit] Thor's Hammer Mjollnir Coded
function thor_s_hammer_mjollnir_coded() => byte(0x15F87D)

// $15F880: [8bit] Split Axe Iron Beak Coded
function split_axe_iron_beak_coded() => byte(0x15F880)

// $15F883: [8bit] Artisan's Axe Cyclops Coded
function artisan_s_axe_cyclops_coded() => byte(0x15F883)

// $15F886: [8bit] Pulverizing Mace Spiked Mace Coded
function pulverizing_mace_spiked_mace_coded() => byte(0x15F886)

// $15F889: [8bit] 100 King Mace Hecatonchires Coded
function king_mace_hecatonchires_coded() => byte(0x15F889)

// $15F88C: [8bit] Booming Bomb Napalm Bomb Coded
function booming_bomb_napalm_bomb_coded() => byte(0x15F88C)

// $15F88F: [8bit] Swollen Bomb Kaleila Bomb Coded
function swollen_bomb_kaleila_bomb_coded() => byte(0x15F88F)

// $15F892: [8bit] Bursting Bomb Dynamite Coded
function bursting_bomb_dynamite_coded() => byte(0x15F892)

// $15F895: [8bit] Searing Barrel Remote Barrel Coded
function searing_barrel_remote_barrel_coded() => byte(0x15F895)

// $15F898: [8bit] Blasting Barel Haochy Soul Coded
function blasting_barel_haochy_soul_coded() => byte(0x15F898)

// $15F89B: [8bit] Exploding Barrel Spirit Bomb Coded
function exploding_barrel_spirit_bomb_coded() => byte(0x15F89B)

// $15F89E: [8bit] Hidden Flying Dagger Throwing Star Coded
function hidden_flying_dagger_throwing_star_coded() => byte(0x15F89E)

// $15F8A1: [8bit] Wind Cutter Flying Dagger Tomahawk Coded
function wind_cutter_flying_dagger_tomahawk_coded() => byte(0x15F8A1)

// $15F8A4: [8bit] Invisible Flying Dagger Shadow Fang Coded
function invisible_flying_dagger_shadow_fang_coded() => byte(0x15F8A4)

// $15F8A7: [8bit] Fortified Bowgun Arbalest Coded
function fortified_bowgun_arbalest_coded() => byte(0x15F8A7)

// $15F8AA: [8bit] Frozen Bowgun Ice Bolt Coded
function frozen_bowgun_ice_bolt_coded() => byte(0x15F8AA)

// $15F8AD: [8bit] Chaotic Gun Blunderbuss Coded
function chaotic_gun_blunderbuss_coded() => byte(0x15F8AD)

// $15F8B0: [8bit] Soul-Piercing Gun Dragoon Coded
function soul_piercing_gun_dragoon_coded() => byte(0x15F8B0)

// $15F8B3: [8bit] Sincere Shield Knight Shield Coded
function sincere_shield_knight_shield_coded() => byte(0x15F8B3)

// $15F8B6: [8bit] Sturdy Shield Spartan Guard Coded
function sturdy_shield_spartan_guard_coded() => byte(0x15F8B6)

// $15F8B9: [8bit] Wide Shield Guardian Coded
function wide_shield_guardian_coded() => byte(0x15F8B9)

// $15F8BC: [8bit] Lightweight Shield Aegis Coded
function lightweight_shield_aegis_coded() => byte(0x15F8BC)

// $15F8BF: [8bit] Pointed Hat Coded
function pointed_hat_coded() => byte(0x15F8BF)

// $15F8C2: [8bit] Hero's Hat Coded
function hero_s_hat_coded() => byte(0x15F8C2)

// $15F8C5: [8bit] Ant Feelers Coded
function ant_feelers_coded() => byte(0x15F8C5)

// $15F8C8: [8bit] King's Crown Coded
function king_s_crown_coded() => byte(0x15F8C8)

// $15F8CB: [8bit] Soldier Helmet Coded
function soldier_helmet_coded() => byte(0x15F8CB)

// $15F8CE: [8bit] Fire Horns Coded
function fire_horns_coded() => byte(0x15F8CE)

// $15F8D1: [8bit] Legendary Helmet Coded
function legendary_helmet_coded() => byte(0x15F8D1)

// $15F8D4: [8bit] Ribbon Coded
function ribbon_coded() => byte(0x15F8D4)

// $15F8D7: [8bit] Forest Flower Decoration Coded
function forest_flower_decoration_coded() => byte(0x15F8D7)

// $15F8D8: [8bit[ 4>7 Puzzle Solved
function bit_4_7_puzzle_solved() => byte(0x15F8D8)

// $15F8D9: [8bit[ 0>1 Puzzle Solved
function bit_0_1_puzzle_solved() => byte(0x15F8D9)

// $15F8DA: [8bit] Cat Ears Coded
function cat_ears_coded() => byte(0x15F8DA)

// $15F8DD: [8bit] Power Headdress Coded
function power_headdress_coded() => byte(0x15F8DD)

// $15F8E0: [8bit] Spirit Seal Coded
function spirit_seal_coded() => byte(0x15F8E0)

// $15F8E3: [8bit] Magic Glasses Coded
function magic_glasses_coded() => byte(0x15F8E3)

// $15F8E6: [8bit] Soldier Breastplate Coded
function soldier_breastplate_coded() => byte(0x15F8E6)

// $15F8E9: [8bit] Onyx Armor Coded
function onyx_armor_coded() => byte(0x15F8E9)

// $15F8EC: [8bit] Legendary Armor Coded
function legendary_armor_coded() => byte(0x15F8EC)

// $15F8EF: [8bit] Master's Sash Coded
function master_s_sash_coded() => byte(0x15F8EF)

// $15F8F2: [8bit] Archer's Belt Coded
function archer_s_belt_coded() => byte(0x15F8F2)

// $15F8F5: [8bit] King's Belt Coded
function king_s_belt_coded() => byte(0x15F8F5)

// $15F8F8: [8bit] Dog Tail Coded
function dog_tail_coded() => byte(0x15F8F8)

// $15F8FB: [8bit] Snake Tail Coded
function snake_tail_coded() => byte(0x15F8FB)

// $15F8FE: [8bit] Fish Fin Coded
function fish_fin_coded() => byte(0x15F8FE)

// $15F901: [8bit] Custom Booster Coded
function custom_booster_coded() => byte(0x15F901)

// $15F904: [8bit] Ice Wings Coded
function ice_wings_coded() => byte(0x15F904)

// $15F907: [8bit] Demon Wings Coded
function demon_wings_coded() => byte(0x15F907)

// $15F90A: [8bit] White Wings Coded
function white_wings_coded() => byte(0x15F90A)

// $15F90D: [8bit] Cure Bread Coded
function cure_bread_coded() => byte(0x15F90D)

// $15F910: [8bit] Pancake Coded
function pancake_coded() => byte(0x15F910)

// $15F913: [8bit] Wild Cookie Coded
function wild_cookie_coded() => byte(0x15F913)

// $15F916: [8bit] Gold Cookie Coded
function gold_cookie_coded() => byte(0x15F916)

// $15F919: [8bit] Cream Cake Coded
function cream_cake_coded() => byte(0x15F919)

// $15F91C: [8bit] Dorothean Coded
function dorothean_coded() => byte(0x15F91C)

// $15F91F: [8bit] Potion Coded
function potion_coded() => byte(0x15F91F)

// $15F922: [8bit] Elixir Coded
function elixir_coded() => byte(0x15F922)

// $15F925: [8bit] Fruit Juice Coded
function fruit_juice_coded() => byte(0x15F925)

// $15F928: [8bit] Elf Tears Coded
function elf_tears_coded() => byte(0x15F928)

// $15F92B: [8bit] Perfume Coded
function perfume_coded() => byte(0x15F92B)

// $15F92E: [8bit] BBQ Meat Coded
function bbq_meat_coded() => byte(0x15F92E)

// $15F931: [8bit] Grade-A Steak Coded
function grade_a_steak_coded() => byte(0x15F931)

// $15F934: [8bit] Stuffed Animal Coded
function stuffed_animal_coded() => byte(0x15F934)

// $15F937: [8bit] Wooden Voodoo Doll Coded
function wooden_voodoo_doll_coded() => byte(0x15F937)

// $15F93A: [8bit] Antique Doll Coded
function antique_doll_coded() => byte(0x15F93A)

// $15F93D: [8bit] Foxtail Coded
function foxtail_coded() => byte(0x15F93D)

// $15F940: [8bit] Herb Coded
function herb_coded() => byte(0x15F940)

// $15F943: [8bit] Medicine Plant Coded
function medicine_plant_coded() => byte(0x15F943)

// $15F946: [8bit] Desert Flower Coded
function desert_flower_coded() => byte(0x15F946)

// $160584: [8bit] Event Flags?
//          b0=Soldier coded tutorial
function event_flags() => byte(0x160584)

// $1605A5: [8bit] Event Flags
//          b2=Told About Coding Tablets
//          b3=Coded soldier tutorial
//          b4=House inside introduction
//          b5=House introduction
//          b6=Enter Name
//          b7=Intro Done
function event_flags() => byte(0x1605A5)

// $1605A6: [8bit] Event Flags
//          b0=Imperial Solder ran away from on Sunny Hill
//          b1=Rempo Introduction
//          b2=Flower Coded Tutorial Done
//          b3=Fana Met
//          b4=Helen Met
//          b5=Offered Bread
//          b6=Told we can save fana
//          b7=Rex Met
function event_flags() => byte(0x1605A6)

// $1605A7: [8bit] Event Flags
//          b1=Gustav Met
//          b7=Gustav Defeated
function event_flags_gustav_defeated() => bit7(0x1605A7)
function event_flags() => byte(0x1605A7)

// $1605A8: [8bit] Event Flags
//          b2=Meenya Met
//          b3=Georg Met
//          b4=Vis Met
//          b5=Kamui Met
//          b6=Guri Guri Cured
function event_flags() => byte(0x1605A8)

// $1605A9: [8bit] Event Flags
//          b0=Orobas Defeated
//          b6=Rudrud Defeated
function event_flags_orobas_defeated() => bit0(0x1605A9)
function event_flags_rudrud_defeated() => bit6(0x1605A9)
function event_flags() => byte(0x1605A9)

// $1605AA: [8bit] Event Flags
//          b3=Mutated Chimera Defeated
function event_flags_mutated_chimera_defeated() => bit3(0x1605AA)
function event_flags() => byte(0x1605AA)

// $1605AE: [8bit] Event Flags
//          b6=Ohriemed Aof Defeated
function event_flags_ohriemed_aof_defeated() => bit6(0x1605AE)
function event_flags() => byte(0x1605AE)

// $1605AF: [8bit] Event Flags
//          b3=Torsol Defeated
//          b4=Torsol Defeated
//          b7=Anwar Defeated
function event_flags_torsol_defeated() => bit4(0x1605AF)
function event_flags_anwar_defeated() => bit7(0x1605AF)
function event_flags() => byte(0x1605AF)

// $1605B1: [8bit] Event Flags
//          b4=Ohriemed Aof Defeated Again
function event_flags_ohriemed_aof_defeated_again() => bit4(0x1605B1)
function event_flags() => byte(0x1605B1)

// $1605B2: [8bit] Event Flags
//          b0=Tournament Won
function event_flags_tournament_won() => bit0(0x1605B2)
function event_flags() => byte(0x1605B2)

// $1605B3: [8bit] Event Flags
//          b1=Heath Defeated
//          b4=Tuoni Defeated
function event_flags_heath_defeated() => bit1(0x1605B3)
function event_flags_tuoni_defeated() => bit4(0x1605B3)
function event_flags() => byte(0x1605B3)

// $1605B4: [8bit] Event Flags
//          b0=Perkele Defeated
//          b3=Malcahatu Defeated
//          b7=Antelobibnen Defeated
function event_flags_perkele_defeated() => bit0(0x1605B4)
function event_flags_malcahatu_defeated() => bit3(0x1605B4)
function event_flags_antelobibnen_defeated() => bit7(0x1605B4)
function event_flags() => byte(0x1605B4)

// $1605B5: [8bit] Event Flags
//          b2=Untamo Defeated
//          b5=Person Released from monolith
function event_flags_untamo_defeated() => bit2(0x1605B5)
function event_flags_person_released_from_monolith() => bit5(0x1605B5)
function event_flags() => byte(0x1605B5)

// $1605B7: [8bit] Event Flags
//          b2=Kullervo Defeated
function event_flags_kullervo_defeated() => bit2(0x1605B7)
function event_flags() => byte(0x1605B7)

// $1605B8: [8bit] Event Flags
//          b0=Game Started
//          b1=Sword Touch Tutorial
//          b2=Minotaur Defeated
//          b5=Amorphes Defeated
function event_flags_minotaur_defeated() => bit2(0x1605B8)
function event_flags_amorphes_defeated() => bit5(0x1605B8)
function event_flags() => byte(0x1605B8)

// $1605B9: [8bit] Event Flags
//          b2=School Chosen
//          b3=Gustav School Chosen
//          b4=Rudrud School Chosen
//          b5=Haochy School Chosen
//          b6=Nanai School Chosen
function event_flags() => byte(0x1605B9)

// $1605BC: [8bit] Event Flags
//          b5=Rudrud Defeated in the Tournament
//          b6=Xenonbart Defeated in the Tournament
//          b7=Haochy Defeated in the Tournament
function event_flags() => byte(0x1605BC)

// $1605C3: [8bit] Event Flags
//          b3=Deep Forest HP/MP Increase Coded
function event_flags() => byte(0x1605C3)

// $1605C5: [8bit] Event Flags
//          b5=Rhoan Town entered
function event_flags() => byte(0x1605C5)

// $1605C7: [8bit] Event Flags
//          b7=Told about coding characters
function event_flags() => byte(0x1605C7)

// $1605D0: [8bit] Event Flags
//          b4=Told about coding enemies
//          b5=Coded goblin tutorial
function event_flags() => byte(0x1605D0)

// $1605F3: [8bit] Event Flags
//          b0=1st Judgement Link Tournament Won
function event_flags() => byte(0x1605F3)

// $1605F4: [8bit] Event Flags
//          b0=2nd Judgement Link Tournament Won
//          b6=Nussie Defeated
function event_flags_nussie_defeated() => bit6(0x1605F4)
function event_flags() => byte(0x1605F4)

// $16060B: [8bit] Event Flags
//          b6=Rempo Unshackled
//          b7=Mieli Unshackled
function event_flags_rempo_unshackled() => bit6(0x16060B)
function event_flags_mieli_unshackled() => bit7(0x16060B)
function event_flags() => byte(0x16060B)

// $16060C: [8bit] Event Flags
//          b0=Neaki Unshackled
//          b1=Ur Unshackled
function event_flags_neaki_unshackled() => bit0(0x16060C)
function event_flags_ur_unshackled() => bit1(0x16060C)
function event_flags() => byte(0x16060C)

// $16069D: [8bit] Event Flags
//          b2=Forest Door Opened
function event_flags() => byte(0x16069D)

// $2578DC: [8bit] Spin Timer
function spin_timer() => byte(0x2578DC)

// $2A7FA8: [8bit] Judgment Link Tournament Points
function judgment_link_tournament_points() => byte(0x2A7FA8)

// $2A8D90: [8bit] Code Points
function code_points() => byte(0x2A8D90)

// $3DAF28: [8bit] Name First Letter
function name_first_letter() => byte(0x3DAF28)

// $3DAF36: [8bit] Name Last Letter
function name_last_letter() => byte(0x3DAF36)

// $3DD524: [16bits] Code Points
function code_points() => word(0x3DD524)

// $3DD710: [8bit] Monster 1 Judgement Link Combo
function monster_1_judgement_link_combo() => byte(0x3DD710)

// $3DD7A8: [8bit] Monster 2 Judgement Link Combo
function monster_2_judgement_link_combo() => byte(0x3DD7A8)

// $3DDC22: [8bit] Last Written Judgement Link Combo
function last_written_judgement_link_combo() => byte(0x3DDC22)

function value_checks_trigger(addrs_targetvals) {
    return
        sum_of(addrs_targetvals,
            addr => prev(addr[0]) / addr[1]
        ) == length(addrs_targetvals) - 1 &&
        measured(sum_of(addrs_targetvals,
            addr => addr[0] / addr[1]
        ) == length(addrs_targetvals), when = map_id() != 0)
}

function gold_medal_trigger(medal_addrs) {
    return value_checks_trigger(
        array_map(medal_addrs, addr => [addr, 3])
    )
}

achievement(
    title = "Given Mighty Power", points = 2, type="progression",
    description = "Defeat the imperial knight.",
    id = 478279, badge = "542217", published = "11/13/2024 6:48:23 AM", modified = "11/13/2024 6:48:23 AM",
    trigger = map_id() == 8 && prev(event_flags_minotaur_defeated()) == 0 && event_flags_minotaur_defeated() == 1
)

achievement(
    title = "Sword Arts Spinner", points = 5, type="progression",
    description = "Defeat Twin Blades Gustav.",
    id = 478286, badge = "542224", published = "11/13/2024 6:48:25 AM", modified = "11/13/2024 6:48:25 AM",
    trigger = map_id() == 49 && prev(event_flags_gustav_defeated()) == 0 && event_flags_gustav_defeated() == 1
)

achievement(
    title = "That Was For the Cat", points = 5, type="progression",
    description = "Defeat Orobas.",
    id = 478287, badge = "542225", published = "11/13/2024 6:48:25 AM", modified = "3/16/2025 3:47:43 AM",
    trigger = map_id() == 32 && prev(event_flags_orobas_defeated()) == 0 && event_flags_orobas_defeated() == 1
)

achievement(
    title = "Mountain Man", points = 5, type="progression",
    description = "Defeat Iron Hammer Rudrud.",
    id = 478290, badge = "542228", published = "11/13/2024 6:48:26 AM", modified = "11/13/2024 6:48:26 AM",
    trigger = map_id() == 386 && prev(event_flags_rudrud_defeated()) == 0 && event_flags_rudrud_defeated() == 1
)

achievement(
    title = "Three Headed Problem", points = 5, type="progression",
    description = "Defeat Mutated Chimera.",
    id = 478291, badge = "542229", published = "11/13/2024 6:48:27 AM", modified = "11/13/2024 6:48:27 AM",
    trigger = map_id() == 243 && prev(event_flags_mutated_chimera_defeated()) == 0 &&
              event_flags_mutated_chimera_defeated() == 1
)

achievement(
    title = "Icy Slice", points = 5, type="progression",
    description = "Defeat Sword Demon Amorphes.",
    id = 478293, badge = "542231", published = "11/13/2024 6:48:27 AM", modified = "11/13/2024 6:48:27 AM",
    trigger = map_id() == 181 && prev(event_flags_amorphes_defeated()) == 0 && event_flags_amorphes_defeated() == 1
)

achievement(
    title = "Keeper of the Mystic Dagger", points = 5, type="progression",
    description = "Defeat Desert Witch Ohriemed Aof.",
    id = 478294, badge = "542232", published = "11/13/2024 6:48:27 AM", modified = "11/13/2024 6:48:27 AM",
    trigger = map_id() == 361 && prev(event_flags_ohriemed_aof_defeated()) == 0 &&
              event_flags_ohriemed_aof_defeated() == 1
)

achievement(
    title = "Red Alert", points = 5, type="progression",
    description = "Defeat Guardian Torsol.",
    id = 478295, badge = "542233", published = "11/13/2024 6:48:28 AM", modified = "11/13/2024 6:48:28 AM",
    trigger = map_id() == 354 && prev(event_flags_torsol_defeated()) == 0 && event_flags_torsol_defeated() == 1
)

achievement(
    title = "Bandit of the Dunes", points = 5, type="progression",
    description = "Defeat Desert Wind Anwar.",
    id = 478296, badge = "542234", published = "11/13/2024 6:48:28 AM", modified = "11/13/2024 6:48:28 AM",
    trigger = map_id() == 359 && prev(event_flags_anwar_defeated()) == 0 && event_flags_anwar_defeated() == 1
)

achievement(
    title = "Hero Clash", points = 10, type="progression",
    description = "Win the tournament.",
    id = 478297, badge = "542235", published = "11/13/2024 6:48:28 AM", modified = "11/13/2024 6:48:28 AM",
    trigger = map_id() == 35 && prev(event_flags_tournament_won()) == 0 && event_flags_tournament_won() == 1
)

achievement(
    title = "Punch a Man When He's Down", points = 5, type="progression",
    description = "Defeat Martial Arts Master Heath.",
    id = 478298, badge = "542236", published = "11/13/2024 6:48:28 AM", modified = "3/16/2025 3:54:01 AM",
    trigger = map_id() == 253 && prev(event_flags_heath_defeated()) == 0 && event_flags_heath_defeated() == 1
)

achievement(
    title = "Chimera With Extra Steps", points = 5, type="progression",
    description = "Defeat Spirit-User Tuoni.",
    id = 478299, badge = "542237", published = "11/13/2024 6:48:29 AM", modified = "11/13/2024 6:48:29 AM",
    trigger = map_id() == 259 && prev(event_flags_tuoni_defeated()) == 0 && event_flags_tuoni_defeated() == 1
)

achievement(
    title = "Coveted Power", points = 5, type="progression",
    description = "Defeat Witch of Desire Ohriemed Aof once again.",
    id = 478300, badge = "542238", published = "11/13/2024 6:48:29 AM", modified = "11/13/2024 6:48:29 AM",
    trigger = map_id() == 330 && prev(event_flags_ohriemed_aof_defeated_again()) == 0 &&
              event_flags_ohriemed_aof_defeated_again() == 1
)

achievement(
    title = "Lizard Lightning Rod", points = 5, type="progression",
    description = "Defeat Lightning Dragon Perkele.",
    id = 478301, badge = "542239", published = "11/13/2024 6:48:29 AM", modified = "11/13/2024 6:48:29 AM",
    trigger = map_id() == 149 && prev(event_flags_perkele_defeated()) == 0 && event_flags_perkele_defeated() == 1
)

achievement(
    title = "In The Depths of Ice", points = 5, type="progression",
    description = "Defeat Ice Dragon Malcahatu.",
    id = 478302, badge = "542240", published = "11/13/2024 6:48:29 AM", modified = "11/13/2024 6:48:29 AM",
    trigger = map_id() == 208 && prev(event_flags_malcahatu_defeated()) == 0 && event_flags_malcahatu_defeated() == 1
)

achievement(
    title = "The Land Is Sick", points = 5, type="progression",
    description = "Defeat Forest Dragon Antelobibnen.",
    id = 478303, badge = "542241", published = "11/13/2024 6:48:30 AM", modified = "11/13/2024 6:48:30 AM",
    trigger = map_id() == 271 && prev(event_flags_antelobibnen_defeated()) == 0 &&
              event_flags_antelobibnen_defeated() == 1
)

achievement(
    title = "Untamed Aggression", points = 5, type="progression",
    description = "Defeat Fire Dragon Untamo.",
    id = 478304, badge = "542242", published = "11/13/2024 6:48:30 AM", modified = "11/13/2024 6:48:30 AM",
    trigger = map_id() == 455 && prev(event_flags_untamo_defeated()) == 0 && event_flags_untamo_defeated() == 1
)

achievement(
    title = "The Chosens Duel", points = 25, type="win_condition",
    description = "Defeat Demon Lord Kullervo.",
    id = 478305, badge = "542243", published = "11/13/2024 6:48:31 AM", modified = "11/13/2024 6:48:31 AM",
    trigger = map_id() == 112 && prev(event_flags_kullervo_defeated()) == 0 && event_flags_kullervo_defeated() == 1
)

achievement(
    title = "I Can Rest Now", points = 1,
    description = "Release your friend from monolith and complete your journey.",
    id = 478324, badge = "542262", published = "11/13/2024 6:48:37 AM", modified = "11/13/2024 6:48:37 AM",
    trigger = map_id() == 8 && prev(event_flags_person_released_from_monolith()) == 0 &&
              event_flags_person_released_from_monolith() == 1
)

achievement(
    title = "Protecting the Mate", points = 5,
    description = "Defeat Lake Ruler Nussie.",
    id = 478323, badge = "542261", published = "11/13/2024 6:48:37 AM", modified = "11/13/2024 6:48:37 AM",
    trigger = map_id() == 302 && prev(event_flags_nussie_defeated()) == 0 && event_flags_nussie_defeated() == 1
)

achievement(
    title = "Master of the Blade", points = 5,
    description = "Max your sword level.",
    id = 478325, badge = "542263", published = "11/13/2024 6:48:38 AM", modified = "11/13/2024 6:48:38 AM",
    trigger = map_id() != 0 && prev(sword_experience()) == 2174 && sword_experience() == 2175
)

achievement(
    title = "Master of the Sledge", points = 5,
    description = "Max your hammer level.",
    id = 478327, badge = "542265", published = "11/13/2024 6:48:38 AM", modified = "11/14/2024 3:37:42 AM",
    trigger = map_id() != 0 && prev(hammer_experience()) == 1304 && hammer_experience() == 1305
)

achievement(
    title = "Master of the Thrown and Shot", points = 5,
    description = "Max your projectile level.",
    id = 478328, badge = "542266", published = "11/13/2024 6:48:38 AM", modified = "11/14/2024 3:37:53 AM",
    trigger = map_id() != 0 && prev(projectile_experience()) == 2174 && projectile_experience() == 2175
)

achievement(
    title = "Master of the Explosive", points = 5,
    description = "Max your bomb level.",
    id = 478326, badge = "542264", published = "11/13/2024 6:48:38 AM", modified = "11/14/2024 3:37:27 AM",
    trigger = map_id() != 0 && prev(bomb_experience()) == 434 && bomb_experience() == 435
)

achievement(
    title = "Unshackled Spirits", points = 10,
    description = "Release your spirit friends from their binds.",
    id = 478322, badge = "542260", published = "11/13/2024 6:48:37 AM", modified = "11/13/2024 6:48:37 AM",
    trigger = value_checks_trigger([[event_flags_rempo_unshackled(), 1], [event_flags_mieli_unshackled(), 1],
                  [event_flags_neaki_unshackled(), 1], [event_flags_ur_unshackled(), 1]])
)

achievement(
    title = "Bestiary", points = 25, type="missable",
    description = "All enemies coded.",
    id = 478284, badge = "542222", published = "11/13/2024 6:48:25 AM", modified = "11/13/2024 6:48:25 AM",
    trigger = value_checks_trigger([ [goblin_coded(), 1], [hobgoblin_coded(), 1],
                  [king_goblin_coded(), 1], [harpy_coded(), 1], [siren_coded(), 1],
                  [minotaurus_coded(), 1], [hell_guard_coded(), 1],
                  [knight_mare_coded(), 1], [hell_knight_coded(), 1],
                  [lizard_man_coded(), 1], [lizard_lord_coded(), 1],
                  [lion_knight_coded(), 1], [balbazun_coded(), 1], [pog_coded(), 1],
                  [raptor_coded(), 1], [blade_beak_coded(), 1], [dragon_pup_coded(), 1],
                  [shell_head_coded(), 1], [dire_bat_coded(), 1], [eye_wing_coded(), 1],
                  [frog_man_coded(), 1], [grapper_coded(), 1], [siege_drake_coded(), 1],
                  [mortar_drake_coded(), 1], [man_eater_coded(), 1],
                  [blood_sucker_coded(), 1], [blob_coded(), 1], [pink_jelly_coded(), 1],
                  [dusk_spider_coded(), 1], [black_widow_coded(), 1],
                  [land_squid_coded(), 1], [mad_squid_coded(), 1],
                  [hell_hornet_coded(), 1], [robber_fly_coded(), 1],
                  [dark_hopper_coded(), 1], [giant_bug_coded(), 1],
                  [lord_locust_coded(), 1], [abaddon_cry_coded(), 1],
                  [wood_bone_coded(), 1], [living_spike_coded(), 1],
                  [automation_coded(), 1], [golem_coded(), 1],
                  [battle_titan_coded(), 1], [mul_coded(), 1], [ghost_eye_coded(), 1],
                  [assault_eye_coded(), 1], [mummy_coded(), 1], [mummy_lord_coded(), 1],
                  [zombie_coded(), 1], [hell_prisoner_coded(), 1],
                  [vampire_lady_coded(), 1], [strigoi_coded(), 1],
                  [skeleton_coded(), 1], [bone_lord_coded(), 1],
                  [element_skull_coded(), 1], [evil_spirit_coded(), 1],
                  [demon_head_coded(), 1], [ular_coded(), 1], [shadow_claw_coded(), 1],
                  [kaleila_rebel_coded(), 1], [evil_eye_coded(), 1],
                  [plasma_gazer_coded(), 1], [arch_demon_coded(), 1],
                  [sargatanas_coded(), 1], [moloch_coded(), 1], [orobas_coded(), 1],
                  [nussie_coded(), 1], [chimera_coded(), 1], [amorphes_coded(), 1],
                  [torsol_coded(), 1], [tuoni_coded(), 1], [perkele_coded(), 1],
                  [malcahatu_coded(), 1], [antelobibnen_coded(), 1],
                  [untamo_coded(), 1], [kullervo_coded(), 1]])
)

achievement(
    title = "With Friends Like These", points = 10, type="missable",
    description = "All characters coded.",
    id = 478285, badge = "542223", published = "11/13/2024 6:48:25 AM", modified = "11/13/2024 6:48:25 AM",
    trigger = value_checks_trigger([ [fana_coded(), 1], [sylphy_coded(), 1], [nanai_coded(), 1],
                  [dorothea_coded(), 1], [lauca_meia_coded(), 1], [duran_coded(), 1],
                  [rex_coded(), 1], [valdo_coded(), 1], [heath_coded(), 1],
                  [anwar_coded(), 1], [gustav_coded(), 1], [meenya_coded(), 1],
                  [helen_coded(), 1], [kamui_coded(), 1], [romaioni_coded(), 1],
                  [francesca_coded(), 1], [haochy_coded(), 1], [georg_coded(), 1],
                  [vis_coded(), 1], [xenonbart_coded(), 1], [fro_coded(), 1],
                  [guri_guri_coded(), 1], [rudrud_coded(), 1], [gim_coded(), 1],
                  [olly_coded(), 1], [ellie_coded(), 1], [werman_coded(), 1],
                  [maid_coded(), 1], [royal_soldier_coded(), 1],
                  [imperial_soldier_coded(), 1], [imperial_knight_coded(), 1],
                  [desert_dweller_coded(), 1]])
)

achievement(
    title = "Botanist", points = 10, type="missable",
    description = "All flowers coded and identified.",
    id = 478281, badge = "542219", published = "11/13/2024 6:48:24 AM", modified = "3/16/2025 3:58:50 AM",
    trigger = map_id() == 28 &&
              tally(29, once(prev(blazera_identified()) >= 6), once(prev(forest_drop_identified()) >= 6),
                  once(prev(byte(0x15F1F4)) >= 6), once(prev(byte(0x15F227)) >= 6), once(prev(byte(0x15F25A)) >= 6),
                  once(prev(byte(0x15F28D)) >= 6), once(prev(byte(0x15F2C0)) >= 6), once(prev(byte(0x15F2F3)) >= 6),
                  once(prev(byte(0x15F326)) >= 6), once(prev(byte(0x15F359)) >= 6), once(prev(byte(0x15F38C)) >= 6),
                  once(prev(byte(0x15F3BF)) >= 6), once(prev(byte(0x15F3F2)) >= 6), once(prev(byte(0x15F425)) >= 6),
                  once(prev(byte(0x15F458)) >= 6), once(prev(byte(0x15F48B)) >= 6), once(prev(byte(0x15F4BE)) >= 6),
                  once(prev(byte(0x15F4F1)) >= 6), once(prev(byte(0x15F524)) >= 6), once(prev(byte(0x15F557)) >= 6),
                  once(prev(byte(0x15F58A)) >= 6), once(prev(byte(0x15F5BD)) >= 6), once(prev(byte(0x15F5F0)) >= 6),
                  once(prev(purse_plant_identified()) >= 6), once(prev(byte(0x15F656)) >= 6),
                  once(prev(howl_grass_identified()) >= 6), once(prev(byte(0x15F6BC)) >= 6),
                  once(prev(scaled_grass_identified()) >= 6), once(prev(byte(0x15F722)) >= 6),
                  once(prev(byte(0x15F755)) >= 6)
              ) &&
              measured(tally(30, once(blazera_identified() >= 6), once(forest_drop_identified() >= 6),
                  once(byte(0x15F1F4) >= 6), once(byte(0x15F227) >= 6), once(byte(0x15F25A) >= 6),
                  once(byte(0x15F28D) >= 6), once(byte(0x15F2C0) >= 6), once(byte(0x15F2F3) >= 6),
                  once(byte(0x15F326) >= 6), once(byte(0x15F359) >= 6), once(byte(0x15F38C) >= 6),
                  once(byte(0x15F3BF) >= 6), once(byte(0x15F3F2) >= 6), once(byte(0x15F425) >= 6),
                  once(byte(0x15F458) >= 6), once(byte(0x15F48B) >= 6), once(byte(0x15F4BE) >= 6),
                  once(byte(0x15F4F1) >= 6), once(byte(0x15F524) >= 6), once(byte(0x15F557) >= 6),
                  once(byte(0x15F58A) >= 6), once(byte(0x15F5BD) >= 6), once(byte(0x15F5F0) >= 6),
                  once(purse_plant_identified() >= 6), once(byte(0x15F656) >= 6), once(howl_grass_identified() >= 6),
                  once(byte(0x15F6BC) >= 6), once(scaled_grass_identified() >= 6), once(byte(0x15F722) >= 6),
                  once(byte(0x15F755) >= 6))
              )
)

achievement(
    title = "Archeologist", points = 50, type="missable",
    description = "All items coded and solved.",
    id = 478282, badge = "542220", published = "11/13/2024 6:48:24 AM", modified = "11/13/2024 6:48:24 AM",
    trigger = map_id() != 0 &&
              tally(149, once(prev(battle_sword_identified()) == 7), once(prev(byte(0x15F78B)) == 7),
                  once(prev(byte(0x15F78E)) == 7), once(prev(byte(0x15F791)) == 7), once(prev(byte(0x15F794)) == 7),
                  once(prev(byte(0x15F797)) == 7), once(prev(byte(0x15F79A)) == 7), once(prev(byte(0x15F79D)) == 7),
                  once(prev(byte(0x15F7A0)) == 7), once(prev(byte(0x15F7A3)) == 7), once(prev(byte(0x15F7A6)) == 7),
                  once(prev(byte(0x15F7A9)) == 7), once(prev(byte(0x15F7AC)) == 7), once(prev(byte(0x15F7AF)) == 7),
                  once(prev(byte(0x15F7B2)) == 7), once(prev(byte(0x15F7B5)) == 7), once(prev(byte(0x15F7B8)) == 7),
                  once(prev(byte(0x15F7BB)) == 7), once(prev(byte(0x15F7BE)) == 7), once(prev(byte(0x15F7C1)) == 7),
                  once(prev(byte(0x15F7C4)) == 7), once(prev(byte(0x15F7C7)) == 7), once(prev(byte(0x15F7CA)) == 7),
                  once(prev(byte(0x15F7CD)) == 7), once(prev(byte(0x15F7D0)) == 7), once(prev(byte(0x15F7D3)) == 7),
                  once(prev(byte(0x15F7D6)) == 7), once(prev(byte(0x15F7D9)) == 7), once(prev(byte(0x15F7DC)) == 7),
                  once(prev(byte(0x15F7DF)) == 7), once(prev(byte(0x15F7E2)) == 7), once(prev(byte(0x15F7E5)) == 7),
                  once(prev(byte(0x15F7E8)) == 7), once(prev(byte(0x15F7EB)) == 7), once(prev(byte(0x15F7EE)) == 7),
                  once(prev(byte(0x15F7F1)) == 7), once(prev(byte(0x15F7F4)) == 7), once(prev(byte(0x15F7F7)) == 7),
                  once(prev(byte(0x15F7FA)) == 7), once(prev(byte(0x15F7FD)) == 7), once(prev(byte(0x15F800)) == 7),
                  once(prev(byte(0x15F803)) == 7), once(prev(byte(0x15F806)) == 7), once(prev(byte(0x15F809)) == 7),
                  once(prev(byte(0x15F80C)) == 7), once(prev(byte(0x15F80F)) == 7), once(prev(byte(0x15F812)) == 7),
                  once(prev(byte(0x15F815)) == 7), once(prev(byte(0x15F818)) == 7), once(prev(byte(0x15F81B)) == 7),
                  once(prev(byte(0x15F81E)) == 7), once(prev(byte(0x15F821)) == 7), once(prev(byte(0x15F824)) == 7),
                  once(prev(byte(0x15F827)) == 7), once(prev(byte(0x15F82A)) == 7), once(prev(byte(0x15F82D)) == 7),
                  once(prev(byte(0x15F830)) == 7), once(prev(byte(0x15F833)) == 7), once(prev(byte(0x15F836)) == 7),
                  once(prev(byte(0x15F839)) == 7), once(prev(byte(0x15F83C)) == 7), once(prev(byte(0x15F83F)) == 7),
                  once(prev(byte(0x15F842)) == 7), once(prev(byte(0x15F845)) == 7), once(prev(byte(0x15F848)) == 7),
                  once(prev(byte(0x15F84B)) == 7), once(prev(byte(0x15F84E)) == 7), once(prev(byte(0x15F851)) == 7),
                  once(prev(byte(0x15F854)) == 7), once(prev(byte(0x15F857)) == 7), once(prev(byte(0x15F85A)) == 7),
                  once(prev(byte(0x15F85D)) == 7), once(prev(byte(0x15F860)) == 7), once(prev(byte(0x15F863)) == 7),
                  once(prev(byte(0x15F866)) == 7), once(prev(byte(0x15F869)) == 7), once(prev(byte(0x15F86C)) == 7),
                  once(prev(byte(0x15F86F)) == 7), once(prev(byte(0x15F872)) == 7), once(prev(byte(0x15F875)) == 7),
                  once(prev(byte(0x15F878)) == 7), once(prev(byte(0x15F87B)) == 7), once(prev(byte(0x15F87E)) == 7),
                  once(prev(byte(0x15F881)) == 7), once(prev(byte(0x15F884)) == 7), once(prev(byte(0x15F887)) == 7),
                  once(prev(byte(0x15F88A)) == 7), once(prev(byte(0x15F88D)) == 7), once(prev(byte(0x15F890)) == 7),
                  once(prev(byte(0x15F893)) == 7), once(prev(byte(0x15F896)) == 7), once(prev(byte(0x15F899)) == 7),
                  once(prev(byte(0x15F89C)) == 7), once(prev(byte(0x15F89F)) == 7), once(prev(byte(0x15F8A2)) == 7),
                  once(prev(byte(0x15F8A5)) == 7), once(prev(byte(0x15F8A8)) == 7), once(prev(byte(0x15F8AB)) == 7),
                  once(prev(byte(0x15F8AE)) == 7), once(prev(byte(0x15F8B1)) == 7), once(prev(byte(0x15F8B4)) == 7),
                  once(prev(byte(0x15F8B7)) == 7), once(prev(byte(0x15F8BA)) == 7), once(prev(byte(0x15F8BD)) == 7),
                  once(prev(byte(0x15F8C0)) == 7), once(prev(byte(0x15F8C3)) == 7), once(prev(byte(0x15F8C6)) == 7),
                  once(prev(byte(0x15F8C9)) == 7), once(prev(byte(0x15F8CC)) == 7), once(prev(byte(0x15F8CF)) == 7),
                  once(prev(byte(0x15F8D2)) == 7), once(prev(byte(0x15F8D5)) == 7),
                  once(prev(bit_4_7_puzzle_solved()) == 7), once(prev(byte(0x15F8DB)) == 7),
                  once(prev(byte(0x15F8DE)) == 7), once(prev(byte(0x15F8E1)) == 7), once(prev(byte(0x15F8E4)) == 7),
                  once(prev(byte(0x15F8E7)) == 7), once(prev(byte(0x15F8EA)) == 7), once(prev(byte(0x15F8ED)) == 7),
                  once(prev(byte(0x15F8F0)) == 7), once(prev(byte(0x15F8F3)) == 7), once(prev(byte(0x15F8F6)) == 7),
                  once(prev(byte(0x15F8F9)) == 7), once(prev(byte(0x15F8FC)) == 7), once(prev(byte(0x15F8FF)) == 7),
                  once(prev(byte(0x15F902)) == 7), once(prev(byte(0x15F905)) == 7), once(prev(byte(0x15F908)) == 7),
                  once(prev(byte(0x15F90B)) == 7), once(prev(byte(0x15F90E)) == 7), once(prev(byte(0x15F911)) == 7),
                  once(prev(byte(0x15F914)) == 7), once(prev(byte(0x15F917)) == 7), once(prev(byte(0x15F91A)) == 7),
                  once(prev(byte(0x15F91D)) == 7), once(prev(byte(0x15F920)) == 7), once(prev(byte(0x15F923)) == 7),
                  once(prev(byte(0x15F926)) == 7), once(prev(byte(0x15F929)) == 7), once(prev(byte(0x15F92C)) == 7),
                  once(prev(byte(0x15F92F)) == 7), once(prev(byte(0x15F932)) == 7), once(prev(byte(0x15F935)) == 7),
                  once(prev(byte(0x15F938)) == 7), once(prev(byte(0x15F93B)) == 7), once(prev(byte(0x15F93E)) == 7),
                  once(prev(byte(0x15F941)) == 7), once(prev(byte(0x15F944)) == 7), once(prev(byte(0x15F947)) == 7)
              ) &&
              measured(tally(150, once(battle_sword_identified() == 7), once(byte(0x15F78B) == 7),
                  once(byte(0x15F78E) == 7), once(byte(0x15F791) == 7), once(byte(0x15F794) == 7),
                  once(byte(0x15F797) == 7), once(byte(0x15F79A) == 7), once(byte(0x15F79D) == 7),
                  once(byte(0x15F7A0) == 7), once(byte(0x15F7A3) == 7), once(byte(0x15F7A6) == 7),
                  once(byte(0x15F7A9) == 7), once(byte(0x15F7AC) == 7), once(byte(0x15F7AF) == 7),
                  once(byte(0x15F7B2) == 7), once(byte(0x15F7B5) == 7), once(byte(0x15F7B8) == 7),
                  once(byte(0x15F7BB) == 7), once(byte(0x15F7BE) == 7), once(byte(0x15F7C1) == 7),
                  once(byte(0x15F7C4) == 7), once(byte(0x15F7C7) == 7), once(byte(0x15F7CA) == 7),
                  once(byte(0x15F7CD) == 7), once(byte(0x15F7D0) == 7), once(byte(0x15F7D3) == 7),
                  once(byte(0x15F7D6) == 7), once(byte(0x15F7D9) == 7), once(byte(0x15F7DC) == 7),
                  once(byte(0x15F7DF) == 7), once(byte(0x15F7E2) == 7), once(byte(0x15F7E5) == 7),
                  once(byte(0x15F7E8) == 7), once(byte(0x15F7EB) == 7), once(byte(0x15F7EE) == 7),
                  once(byte(0x15F7F1) == 7), once(byte(0x15F7F4) == 7), once(byte(0x15F7F7) == 7),
                  once(byte(0x15F7FA) == 7), once(byte(0x15F7FD) == 7), once(byte(0x15F800) == 7),
                  once(byte(0x15F803) == 7), once(byte(0x15F806) == 7), once(byte(0x15F809) == 7),
                  once(byte(0x15F80C) == 7), once(byte(0x15F80F) == 7), once(byte(0x15F812) == 7),
                  once(byte(0x15F815) == 7), once(byte(0x15F818) == 7), once(byte(0x15F81B) == 7),
                  once(byte(0x15F81E) == 7), once(byte(0x15F821) == 7), once(byte(0x15F824) == 7),
                  once(byte(0x15F827) == 7), once(byte(0x15F82A) == 7), once(byte(0x15F82D) == 7),
                  once(byte(0x15F830) == 7), once(byte(0x15F833) == 7), once(byte(0x15F836) == 7),
                  once(byte(0x15F839) == 7), once(byte(0x15F83C) == 7), once(byte(0x15F83F) == 7),
                  once(byte(0x15F842) == 7), once(byte(0x15F845) == 7), once(byte(0x15F848) == 7),
                  once(byte(0x15F84B) == 7), once(byte(0x15F84E) == 7), once(byte(0x15F851) == 7),
                  once(byte(0x15F854) == 7), once(byte(0x15F857) == 7), once(byte(0x15F85A) == 7),
                  once(byte(0x15F85D) == 7), once(byte(0x15F860) == 7), once(byte(0x15F863) == 7),
                  once(byte(0x15F866) == 7), once(byte(0x15F869) == 7), once(byte(0x15F86C) == 7),
                  once(byte(0x15F86F) == 7), once(byte(0x15F872) == 7), once(byte(0x15F875) == 7),
                  once(byte(0x15F878) == 7), once(byte(0x15F87B) == 7), once(byte(0x15F87E) == 7),
                  once(byte(0x15F881) == 7), once(byte(0x15F884) == 7), once(byte(0x15F887) == 7),
                  once(byte(0x15F88A) == 7), once(byte(0x15F88D) == 7), once(byte(0x15F890) == 7),
                  once(byte(0x15F893) == 7), once(byte(0x15F896) == 7), once(byte(0x15F899) == 7),
                  once(byte(0x15F89C) == 7), once(byte(0x15F89F) == 7), once(byte(0x15F8A2) == 7),
                  once(byte(0x15F8A5) == 7), once(byte(0x15F8A8) == 7), once(byte(0x15F8AB) == 7),
                  once(byte(0x15F8AE) == 7), once(byte(0x15F8B1) == 7), once(byte(0x15F8B4) == 7),
                  once(byte(0x15F8B7) == 7), once(byte(0x15F8BA) == 7), once(byte(0x15F8BD) == 7),
                  once(byte(0x15F8C0) == 7), once(byte(0x15F8C3) == 7), once(byte(0x15F8C6) == 7),
                  once(byte(0x15F8C9) == 7), once(byte(0x15F8CC) == 7), once(byte(0x15F8CF) == 7),
                  once(byte(0x15F8D2) == 7), once(byte(0x15F8D5) == 7), once(bit_4_7_puzzle_solved() == 7),
                  once(byte(0x15F8DB) == 7), once(byte(0x15F8DE) == 7), once(byte(0x15F8E1) == 7),
                  once(byte(0x15F8E4) == 7), once(byte(0x15F8E7) == 7), once(byte(0x15F8EA) == 7),
                  once(byte(0x15F8ED) == 7), once(byte(0x15F8F0) == 7), once(byte(0x15F8F3) == 7),
                  once(byte(0x15F8F6) == 7), once(byte(0x15F8F9) == 7), once(byte(0x15F8FC) == 7),
                  once(byte(0x15F8FF) == 7), once(byte(0x15F902) == 7), once(byte(0x15F905) == 7),
                  once(byte(0x15F908) == 7), once(byte(0x15F90B) == 7), once(byte(0x15F90E) == 7),
                  once(byte(0x15F911) == 7), once(byte(0x15F914) == 7), once(byte(0x15F917) == 7),
                  once(byte(0x15F91A) == 7), once(byte(0x15F91D) == 7), once(byte(0x15F920) == 7),
                  once(byte(0x15F923) == 7), once(byte(0x15F926) == 7), once(byte(0x15F929) == 7),
                  once(byte(0x15F92C) == 7), once(byte(0x15F92F) == 7), once(byte(0x15F932) == 7),
                  once(byte(0x15F935) == 7), once(byte(0x15F938) == 7), once(byte(0x15F93B) == 7),
                  once(byte(0x15F93E) == 7), once(byte(0x15F941) == 7), once(byte(0x15F944) == 7),
                  once(byte(0x15F947) == 7))
              )
)

achievement(
    title = "Fields of Grass", points = 5,
    description = "Fully code all areas in the Grana Plains.",
    id = 478280, badge = "542218", published = "11/13/2024 6:48:23 AM", modified = "11/13/2024 6:48:23 AM",
    trigger = value_checks_trigger([ [sunny_hill_clear(), 15], [grana_plains_1_clear(), 31],
                  [grana_plains_2_clear(), 7], [grana_plains_3_clear(), 7],
                  [grana_plains_4_clear(), 31], [grana_plains_5_clear(), 15],
                  [grana_plains_6_clear(), 7], [grana_plains_7_clear(), 7],
                  [grana_plains_8_clear(), 7], [grana_plains_9_clear(), 7],
                  [three_way_road_ruins_clear(), 7], [grana_plains_10_clear(), 7],
                  [grana_plains_11_clear(), 7], [grana_plains_12_clear(), 7],
                  [grana_plains_13_clear(), 31], [grana_plains_14_clear(), 7]])
)

achievement(
    title = "Home Sweet Home", points = 5,
    description = "Fully code all areas in Rhoan Town.",
    id = 478283, badge = "542221", published = "11/13/2024 6:48:24 AM", modified = "11/13/2024 6:48:24 AM",
    trigger = value_checks_trigger([ [crossroads_of_the_world_clear(), 7], [town_entrance_clear(), 7],
                  [center_of_town_clear(), 7], [central_park_clear(), 7],
                  [road_to_castle_clear(), 7], [fortune_teller_alley_clear(), 7],
                  [training_hall_road_clear(), 7], [arena_clear(), 7],
                  [cemetery_clear(), 7], [back_alleys_clear(), 7],
                  [outside_abandoned_house_clear(), 7], [mayor_s_house_clear(), 7],
                  [vis_house_outside_clear(), 7], [home_clear(), 15],
                  [rex_s_house_clear(), 7], [nanai_s_house_1f_clear(), 7],
                  [nanai_s_house_2f_clear(), 7], [duran_s_house_1f_clear(), 7],
                  [duran_s_house_2f_clear(), 7], [haochy_s_house_clear(), 7],
                  [abandoned_house_clear(), 7], [fana_s_house_1f_clear(), 7],
                  [fana_s_house_2f_clear(), 7], [kamui_s_house_clear(), 15],
                  [romaioni_s_house_1f_clear(), 7], [romaioni_s_house_2f_clear(), 7],
                  [mayor_s_house_1f_clear(), 7], [mayor_s_house_2f_clear(), 7],
                  [vis_house_inside_clear(), 7], [training_hall_clear(), 7]])
)

achievement(
    title = "Training Pays Off", points = 10,
    description = "Achieve all gold medals in the Underground Training Space.",
    id = 478288, badge = "542226", published = "11/13/2024 6:48:26 AM", modified = "11/13/2024 6:48:26 AM",
    trigger = gold_medal_trigger([underground_training_space_1_medal(),
                  underground_training_space_2_medal(),
                  underground_training_space_3_medal(),
                  underground_training_space_4_medal(),
                  underground_training_space_7_medal(),
                  underground_training_space_10_medal(),
                  swordsman_s_domain_gustav_medal(), underground_training_space_6_medal(),
                  underground_training_space_8_medal(),
                  underground_training_space_9_medal()])
)

achievement(
    title = "Was This A Betrayal?", points = 10,
    description = "Achieve all gold medals and code each area in the Witch's Hidden Room.",
    id = 478289, badge = "542227", published = "11/13/2024 6:48:26 AM", modified = "11/13/2024 6:48:26 AM",
    trigger = value_checks_trigger([[witch_s_hidden_room_1_clear(), 31], [witch_s_hidden_room_2_medal(), 3],
                  [witch_s_hidden_room_3_medal(), 3], [witch_s_hidden_room_4_medal(), 3],
                  [witch_s_hidden_room_5_medal(), 3], [witch_s_hidden_room_6_medal(), 3],
                  [witch_s_hidden_room_7_clear(), 7]])
)

achievement(
    title = "Royal Chambers", points = 5,
    description = "Fully code all areas in Franelle Castle.",
    id = 478292, badge = "542230", published = "11/13/2024 6:48:27 AM", modified = "11/13/2024 6:48:27 AM",
    trigger = value_checks_trigger([[castle_gates_cleared(), 7], [inner_garden_cleared(), 31],
                  [entrance_cleared(), 15], [hall_cleared(), 15],
                  [corridor_cleared(), 15], [corridor_cleared(), 15],
                  [corridor_cleared(), 7], [great_gate_clear(), 7],
                  [council_room_cleared(), 7], [dining_hall_cleared(), 31],
                  [path_to_dungeon_1_cleared(), 7], [path_to_dungeon_2_cleared(), 7],
                  [audience_chamber_cleared(), 31], [princess_quarters_cleared(), 15],
                  [king_s_quarters_cleared(), 7]])
)

achievement(
    title = "In the Heart of the Castle", points = 10,
    description = "Achieve all gold medals and code all areas in the Castle Dungeons.",
    id = 478306, badge = "542244", published = "11/13/2024 6:48:31 AM", modified = "11/13/2024 6:48:31 AM",
    trigger = value_checks_trigger([[fro_s_hiding_place_clear(), 31], [escape_route_1_clear(), 7],
                  [escape_route_2_clear(), 7], [escape_route_3_clear(), 31],
                  [escape_route_4_clear(), 7], [escape_route_5_clear(), 7],
                  [escape_route_6_clear(), 7], [prison_clear(), 7], [prison_clear(), 7],
                  [dungeon_entrance_clear(), 7], [dungeon_1_clear(), 7],
                  [dungeon_2_clear(), 7], [dungeon_3_clear(), 7],
                  [dungeon_4_medal(), 3], [dungeon_5_clear(), 7],
                  [dungeon_6_clear(), 7], [dungeon_7_medal(), 3],
                  [dungeon_8_clear(), 7], [dungeon_9_medal(), 3],
                  [hidden_meia_1_medal(), 3], [hidden_meia_2_clear(), 7],
                  [hidden_meia_3_medal(), 3], [hidden_meia_4_clear(), 7],
                  [hidden_meia_5_medal(), 3], [hidden_meia_6_medal(), 3],
                  [hidden_meia_7_clear(), 7], [hidden_meia_8_medal(), 3],
                  [hidden_meia_9_clear(), 7], [hidden_meia_10_clear(), 7],
                  [hidden_meia_11_medal(), 3], [hidden_meia_12_medal(), 3],
                  [hidden_meia_13_medal(), 3], [hidden_meia_14_clear(), 7],
                  [hidden_meia_15_medal(), 3], [hidden_meia_16_clear(), 31],
                  [eternal_abyss_kullervo_medal(), 3]])
)

achievement(
    title = "Mystical Tower", points = 10,
    description = "Achieve all gold medals and code all areas in the Great Spear of Mastema.",
    id = 478307, badge = "542245", published = "11/13/2024 6:48:31 AM", modified = "11/13/2024 6:48:31 AM",
    trigger = value_checks_trigger([[great_spear_of_mastema_1_clear(), 15],
                  [great_spear_of_mastema_2_medal(), 3], [great_spear_of_mastema_3_medal(), 3],
                  [great_spear_of_mastema_4_medal(), 3], [great_spear_of_mastema_5_medal(), 3],
                  [great_spear_of_mastema_6_medal(), 3], [great_spear_of_mastema_7_medal(), 3],
                  [great_spear_of_mastema_8_medal(), 3], [great_spear_of_mastema_9_clear(), 7],
                  [great_spear_of_mastema_10_medal(), 3], [great_spear_of_mastema_11_medal(), 3],
                  [great_spear_of_mastema_12_medal(), 3], [great_spear_of_mastema_13_medal(), 3],
                  [great_spear_of_mastema_14_medal(), 3], [great_spear_of_mastema_15_medal(), 3],
                  [great_spear_of_mastema_16_medal(), 3], [great_spear_of_mastema_17_medal(), 3],
                  [great_spear_of_mastema_19_medal(), 3], [great_spear_of_mastema_20_clear(), 7],
                  [great_spear_of_mastema_21_clear(), 7],
                  [paradise_at_cloud_s_end_perkele_medal(), 3]])
)

achievement(
    title = "Siege of the Century", points = 5,
    description = "Fully code all areas in Wargliss Fortress.",
    id = 478308, badge = "542246", published = "11/13/2024 6:48:32 AM", modified = "11/13/2024 6:48:32 AM",
    trigger = value_checks_trigger([[wargliss_fortress_1_clear(), 7], [wargliss_fortress_2_coded(), 1],
                  [wargliss_fortress_3_clear(), 7], [wargliss_fortress_4_clear(), 7],
                  [wargliss_fortress_5_clear(), 7], [wargliss_fortress_6_clear(), 7],
                  [wargliss_fortress_7_clear(), 7], [northern_battlefield_clear(), 7],
                  [waisen_empire_camp_clear(), 7]])
)

achievement(
    title = "Ice Cold", points = 10,
    description = "Achieve all gold medals in Tornaq Ice Cavern.",
    id = 478309, badge = "542247", published = "11/13/2024 6:48:32 AM", modified = "9/2/2025 11:32:04 PM",
    trigger = gold_medal_trigger([tornaq_ice_cavern_1_medal(), tornaq_ice_cavern_2_medal(),
              tornaq_ice_cavern_3_medal(), tornaq_ice_cavern_4_medal(),
              tornaq_ice_cavern_5_medal(), tornaq_ice_cavern_6_medal(),
              tornaq_ice_cavern_7_medal(), tornaq_ice_cavern_8_medal(),
              tornaq_ice_cavern_9_medal(), tornaq_ice_cavern_10_medal(),
              tornaq_ice_cavern_11_medal(), tornaq_ice_cavern_12_medal(),
              tornaq_ice_cavern_13_medal(), tornaq_ice_cavern_14_medal(),
              tornaq_ice_cavern_15_medal(), tornaq_ice_cavern_16_medal(),
              tornaq_ice_cavern_17_medal(), tornaq_ice_cavern_18_medal(),
              tornaq_ice_cavern_19_medal(), sealed_domain_amorphes_medal()])
)

achievement(
    title = "Really Ice Cold", points = 10,
    description = "Achieve all gold medals in the Depths of the Ice Cavern.",
    id = 478310, badge = "542248", published = "11/13/2024 6:48:32 AM", modified = "11/13/2024 6:48:32 AM",
    trigger = gold_medal_trigger([depths_of_ice_cavern_1_medal(),
                  depths_of_ice_cavern_2_medal(), depths_of_ice_cavern_3_medal(),
                  depths_of_ice_cavern_4_medal(), depths_of_ice_cavern_5_medal(),
                  depths_of_ice_cavern_6_medal(), depths_of_ice_cavern_7_medal(),
                  depths_of_ice_cavern_8_medal(), depths_of_ice_cavern_9_medal(),
                  depths_of_ice_cavern_10_medal(), depths_of_ice_cavern_11_medal(),
                  depths_of_ice_cavern_12_medal(), depths_of_ice_cavern_13_medal(),
                  depths_of_ice_cavern_14_medal(), depths_of_ice_cavern_15_medal(),
                  depths_of_ice_cavern_16_medal(), depths_of_ice_cavern_17_medal(),
                  depths_of_ice_cavern_18_medal(), depths_of_ice_cavern_19_medal(),
                  absolute_zero_malcahatu_medal()])
)

achievement(
    title = "Hot As Hell", points = 10,
    description = "Achieve all gold medals in Mt. Elious.",
    id = 478311, badge = "542249", published = "11/13/2024 6:48:33 AM", modified = "11/13/2024 6:48:33 AM",
    trigger = gold_medal_trigger([mt_elious_1_medal(), mt_elious_2_medal(),
                  mt_elious_3_medal(), mt_elious_4_medal(),
                  mt_elious_5_medal(), mt_elious_6_medal(),
                  mt_elious_7_medal(), mt_elious_8_medal(),
                  mt_elious_9_medal(), mt_elious_10_medal(),
                  mt_elious_11_medal(), mt_elious_12_medal(),
                  mt_elious_13_medal(), mt_elious_14_medal(),
                  mt_elious_15_medal(), mt_elious_16_medal(),
                  mt_elious_17_medal(), mt_elious_18_medal(),
                  mt_elious_19_medal(), mt_elious_20_medal(),
                  melting_pot_untamo_medal()])
)

achievement(
    title = "A Secret Lake", points = 5,
    description = "Fully code all areas in Granatum Forest and Underground Lake Avernus.",
    id = 478312, badge = "542250", published = "11/13/2024 6:48:33 AM", modified = "11/13/2024 6:48:33 AM",
    trigger = value_checks_trigger([ [granatum_forest_1_clear(), 7], [granatum_forest_2_clear(), 15],
                  [granatum_forest_3_clear(), 7], [granatum_forest_4_clear(), 7],
                  [granatum_forest_5_clear(), 7], [granatum_forest_6_clear(), 7],
                  [granatum_forest_7_clear(), 7], [granatum_forest_8_clear(), 7],
                  [granatum_forest_9_clear(), 15], [granatum_forest_10_clear(), 15],
                  [granatum_forest_11_clear(), 7], [granatum_forest_12_clear(), 7],
                  [granatum_forest_13_clear(), 15], [granatum_forest_14_clear(), 7],
                  [underground_lake_avernus_1_clear(), 7], [underground_lake_avernus_2_clear(), 7],
                  [underground_lake_avernus_3_coded(), 1], [underground_lake_avernus_4_clear(), 7]])
)

achievement(
    title = "Cavern Completionist", points = 10,
    description = "Achieve all gold medals and code all areas in Kalcazoth Cave.",
    id = 478313, badge = "542251", published = "11/13/2024 6:48:33 AM", modified = "11/13/2024 6:48:33 AM",
    trigger = value_checks_trigger([ [kalcazoth_cave_1_medal(), 3], [kalcazoth_cave_2_medal(), 3],
                  [kalcazoth_cave_3_medal(), 3], [kalcazoth_cave_4_medal(), 3],
                  [kalcazoth_cave_5_medal(), 3], [kalcazoth_cave_6_medal(), 3],
                  [kalcazoth_cave_7_medal(), 3], [kalcazoth_cave_8_medal(), 3],
                  [clear(), 15], [kalcazoth_cave_10_medal(), 3],
                  [kalcazoth_cave_11_medal(), 3], [kalcazoth_cave_12_medal(), 3],
                  [kalcazoth_cave_13_medal(), 3], [kalcazoth_cave_14_medal(), 3],
                  [kalcazoth_cave_15_medal(), 3], [kalcazoth_cave_16_medal(), 3],
                  [kalcazoth_cave_17_medal(), 3]])
)

achievement(
    title = "In the Forest of Fear", points = 5,
    description = "Fully code all areas in Granatum Plateau and the Deep Forest.",
    id = 478314, badge = "542252", published = "11/13/2024 6:48:33 AM", modified = "11/13/2024 6:48:33 AM",
    trigger = value_checks_trigger([ [sun_shelf_coded(), 1], [clear(), 15], [clear(), 31],
                  [deep_forest_1_clear(), 7], [deep_forest_2_clear(), 7],
                  [deep_forest_3_clear(), 7], [deep_forest_4_clear(), 7],
                  [deep_forest_5_clear(), 7], [western_big_tree_coded(), 1],
                  [beast_s_lair_clear(), 7], [granatum_plateau_clear(), 7],
                  [light_falls_clear(), 7], [bridge_coded(), 1]])
)

achievement(
    title = "On the Hunt", points = 5,
    description = "Fully code all areas in the Hunter's Trail.",
    id = 478315, badge = "542253", published = "11/13/2024 6:48:34 AM", modified = "11/13/2024 6:48:34 AM",
    trigger = value_checks_trigger([ [eastern_big_tree_clear(), 15], [lauca_meia_s_house_clear(), 31],
                  [hunter_s_trail_1_clear(), 7], [hunter_s_trail_2_clear(), 7],
                  [hunter_s_trail_3_clear(), 7], [hunter_s_trail_4_clear(), 7],
                  [hunter_s_trail_5_clear(), 7], [hunter_s_trail_6_clear(), 7],
                  [hunter_s_trail_7_clear(), 7], [hunter_s_trail_8_clear(), 7],
                  [hunter_s_trail_9_clear(), 7], [hunter_s_trail_10_clear(), 7],
                  [beast_s_cemetery_coded(), 1]])
)

achievement(
    title = "It Stinks Here", points = 5,
    description = "Fully code all areas in Relneia Marsh.",
    id = 478316, badge = "542254", published = "11/13/2024 6:48:35 AM", modified = "11/13/2024 6:48:35 AM",
    trigger = map_id() != 0 &&
              tally(13, once(prev(relneia_marsh_1_clear()) == 15), once(prev(relneia_marsh_2_clear()) == 7),
                  once(prev(relneia_marsh_3_clear()) == 7), once(prev(relneia_marsh_4_clear()) == 31),
                  once(prev(relneia_marsh_5_clear()) == 7), once(prev(relneia_marsh_6_clear()) == 31),
                  once(prev(relneia_marsh_7_clear()) == 0), once(prev(relneia_marsh_8_clear()) == 7),
                  once(prev(relneia_marsh_9_clear()) == 7), once(prev(relneia_marsh_10_clear()) == 7),
                  once(prev(relneia_marsh_11_clear()) == 7), once(prev(relneia_marsh_12_clear()) == 7),
                  once(prev(relneia_marsh_13_clear()) == 7), once(prev(eddy_of_decay_coded()) == 1)
              ) &&
              measured(tally(14, once(relneia_marsh_1_clear() == 15), once(relneia_marsh_2_clear() == 7),
                  once(relneia_marsh_3_clear() == 7), once(relneia_marsh_4_clear() == 31),
                  once(relneia_marsh_5_clear() == 7), once(relneia_marsh_6_clear() == 31),
                  once(relneia_marsh_7_clear() == 0), once(relneia_marsh_8_clear() == 7),
                  once(relneia_marsh_9_clear() == 7), once(relneia_marsh_10_clear() == 7),
                  once(relneia_marsh_11_clear() == 7), once(relneia_marsh_12_clear() == 7),
                  once(relneia_marsh_13_clear() == 7), once(eddy_of_decay_coded() == 1))
              )
)

achievement(
    title = "Baked Hero", points = 5,
    description = "Fully code all areas in the Central Desert and the Desert Settlement.",
    id = 478317, badge = "542255", published = "11/13/2024 6:48:35 AM", modified = "11/13/2024 6:48:35 AM",
    trigger = value_checks_trigger([ [desert_town_clear(), 15], [desert_witch_s_palace_coded(), 1],
                  [prison_clear(), 15], [nomad_s_tent_clear(), 7],
                  [nomad_s_tent_clear(), 15], [prison_escape_route_clear(), 7],
                  [central_desert_1_clear(), 7], [central_desert_2_clear(), 7],
                  [central_desert_3_clear(), 7], [central_desert_4_clear(), 7],
                  [central_desert_5_clear(), 7], [central_desert_7_clear(), 7],
                  [central_desert_7_clear(), 7], [central_desert_8_clear(), 7],
                  [central_desert_9_clear(), 7], [central_desert_10_clear(), 7],
                  [central_desert_11_clear(), 7], [central_desert_12_clear(), 7],
                  [central_desert_13_clear(), 7], [central_desert_14_clear(), 7],
                  [central_desert_15_clear(), 7]])
)

achievement(
    title = "Age of Mystery", points = 10,
    description = "Achieve all gold medals in the Site of Cyril.",
    id = 478318, badge = "542256", published = "11/13/2024 6:48:36 AM", modified = "11/13/2024 6:48:36 AM",
    trigger = gold_medal_trigger([site_of_cyril_1_ohriemed_aof_medal(), site_of_cyril_2_medal(),
                  site_of_cyril_3_medal(), site_of_cyril_4_medal(),
                  site_of_cyril_5_medal(), site_of_cyril_6_medal(),
                  site_of_cyril_7_medal(), site_of_cyril_8_medal(),
                  site_of_cyril_9_medal(), site_of_cyril_10_medal(),
                  site_of_cyril_11_medal(), site_of_cyril_12_medal(),
                  site_of_cyril_13_medal(), site_of_cyril_14_medal(),
                  site_of_cyril_15_medal(), site_of_cyril_16_medal(),
                  site_of_cyril_17_medal(), site_of_cyril_18_medal(),
                  site_of_cyril_19_medal(), site_of_cyril_20_medal(),
                  site_of_cyril_21_medal(), site_of_cyril_22_medal(),
                  site_of_cyril_23_medal(), site_of_cyril_24_medal(),
                  site_of_cyril_25_medal(), guardian_s_domain_torsol_medal()])
)

achievement(
    title = "Get Me Some Water", points = 5,
    description = "Fully code all areas in the Western Desert.",
    id = 478319, badge = "542257", published = "11/13/2024 6:48:36 AM", modified = "11/13/2024 6:48:36 AM",
    trigger = value_checks_trigger([ [western_desert_1_clear(), 7], [western_desert_2_clear(), 7],
                  [western_desert_3_clear(), 7], [western_desert_4_clear(), 7],
                  [western_desert_5_clear(), 7], [western_desert_6_clear(), 7],
                  [western_desert_7_clear(), 7], [western_desert_1_clear(), 31],
                  [western_desert_9_clear(), 7], [western_desert_10_clear(), 31],
                  [western_desert_11_clear(), 7], [western_desert_12_clear(), 7],
                  [western_desert_13_clear(), 31], [western_desert_14_clear(), 7],
                  [western_desert_15_clear(), 7], [western_desert_16_clear(), 15],
                  [western_desert_17_clear(), 7], [western_desert_18_clear(), 7],
                  [western_desert_19_clear(), 31], [western_desert_20_clear(), 7],
                  [western_desert_21_clear(), 7]])
)

achievement(
    title = "Are Cacti Edible?", points = 5,
    description = "Fully code all areas in the Eastern Desert.",
    id = 478320, badge = "542258", published = "11/13/2024 6:48:36 AM", modified = "11/13/2024 6:48:36 AM",
    trigger = value_checks_trigger([ [eastern_desert_1_clear(), 7], [eastern_desert_2_clear(), 7],
                  [eastern_desert_3_clear(), 7], [eastern_desert_4_clear(), 7],
                  [eastern_desert_5_clear(), 7], [eastern_desert_6_clear(), 31],
                  [eastern_desert_7_clear(), 7], [eastern_desert_8_clear(), 7],
                  [eastern_desert_9_clear(), 7], [eastern_desert_10_clear(), 7],
                  [eastern_desert_11_clear(), 7], [eastern_desert_12_clear(), 7],
                  [eastern_desert_13_clear(), 31], [eastern_desert_14_clear(), 15],
                  [eastern_desert_15_clear(), 7], [eastern_desert_16_clear(), 7],
                  [eastern_desert_17_clear(), 15], [eastern_desert_18_clear(), 31]])
)

achievement(
    title = "World Traveler", points = 5,
    description = "Fully code all areas in Weld River, Ravine of Vulgazzo, and Shark's Jaw.",
    id = 478321, badge = "542259", published = "11/13/2024 6:48:36 AM", modified = "11/13/2024 6:48:36 AM",
    trigger = value_checks_trigger([[weld_river_1_clear(), 15], [weld_river_2_clear(), 7],
                  [weld_river_3_clear(), 7], [ravine_of_vulgazzo_1_clear(), 7],
                  [ravine_of_vulgazzo_2_clear(), 7], [ravine_of_vulgazzo_3_clear(), 7],
                  [shark_s_jaw_1_clear(), 7], [shark_s_jaw_2_clear(), 7],
                  [shark_s_jaw_3_clear(), 15]])
)

// R.B.I. Baseball '95
// #ID = 16803

// $CD18: [8-bit] Game Breakers scenario
//        0x00 = Silver Platter
//        0x01 = Score
//        0x02 = Winding Down
//        0x03 = Save
//        0x04 = Defense
//        0x05 = Sudden Death
//        0x06 = Two Inning Game
//        0x07 = Three Inning Game
//        0x08 = Extra Innings
//        0x09 = Comeback
//        0x0A = Base Hit
//        0x0B = Big Comeback
//        0x0C = Rally
//        0x0D = Grand Slam
//        0x0E = Trouble
//        0x0F = Double Trouble
//        0x10 = Lost Cause
function game_breakers_scenario() => byte(0x00CD18)

// $CDF1: [8-bit] Errors setting
//        0x00 = Yes
//        0x01 = No
function errors_setting() => byte(0x00CDF1)

// $CE04: [8-bit] Season standings - Orioles losses
function season_standings_orioles_losses() => byte(0x00CE04)

// $CE05: [8-bit] Season standings - Orioles wins
function season_standings_orioles_wins() => byte(0x00CE05)

// $CE06: [8-bit] Season standings - Angels losses
function season_standings_angels_losses() => byte(0x00CE06)

// $CE07: [8-bit] Season standings - Angels wins
function season_standings_angels_wins() => byte(0x00CE07)

// $CE08: [8-bit] Season standings - Cubs losses
function season_standings_cubs_losses() => byte(0x00CE08)

// $CE09: [8-bit] Season standings - Cubs wins
function season_standings_cubs_wins() => byte(0x00CE09)

// $CE0A: [8-bit] Season standings - Braves losses
function season_standings_braves_losses() => byte(0x00CE0A)

// $CE0B: [8-bit] Season standings - Braves wins
function season_standings_braves_wins() => byte(0x00CE0B)

// $CE0C: [8-bit] Season standings - Red Sox losses
function season_standings_red_sox_losses() => byte(0x00CE0C)

// $CE0D: [8-bit] Season standings - Red Sox wins
function season_standings_red_sox_wins() => byte(0x00CE0D)

// $CE0E: [8-bit] Season standings - White Sox losses
function season_standings_white_sox_losses() => byte(0x00CE0E)

// $CE0F: [8-bit] Season standings - White Sox wins
function season_standings_white_sox_wins() => byte(0x00CE0F)

// $CE10: [8-bit] Season standings - Marlins losses
function season_standings_marlins_losses() => byte(0x00CE10)

// $CE11: [8-bit] Season standings - Marlins wins
function season_standings_marlins_wins() => byte(0x00CE11)

// $CE12: [8-bit] Season standings - Reds losses
function season_standings_reds_losses() => byte(0x00CE12)

// $CE13: [8-bit] Season standings - Reds wins
function season_standings_reds_wins() => byte(0x00CE13)

// $CE14: [8-bit] Season standings - Indians losses
function season_standings_indians_losses() => byte(0x00CE14)

// $CE15: [8-bit] Season standings - Indians wins
function season_standings_indians_wins() => byte(0x00CE15)

// $CE16: [8-bit] Season standings - Royals losses
function season_standings_royals_losses() => byte(0x00CE16)

// $CE17: [8-bit] Season standings - Royals wins
function season_standings_royals_wins() => byte(0x00CE17)

// $CE18: [8-bit] Season standings - Expos losses
function season_standings_expos_losses() => byte(0x00CE18)

// $CE19: [8-bit] Season standings - Expos wins
function season_standings_expos_wins() => byte(0x00CE19)

// $CE1A: [8-bit] Season standings - Rockies losses
function season_standings_rockies_losses() => byte(0x00CE1A)

// $CE1B: [8-bit] Season standings - Rockies wins
function season_standings_rockies_wins() => byte(0x00CE1B)

// $CE1C: [8-bit] Season standings - Tigers losses
function season_standings_tigers_losses() => byte(0x00CE1C)

// $CE1D: [8-bit] Season standings - Tigers wins
function season_standings_tigers_wins() => byte(0x00CE1D)

// $CE1E: [8-bit] Season standings - Twins losses
function season_standings_twins_losses() => byte(0x00CE1E)

// $CE1F: [8-bit] Season standings - Twins wins
function season_standings_twins_wins() => byte(0x00CE1F)

// $CE20: [8-bit] Season standings - Mets losses
function season_standings_mets_losses() => byte(0x00CE20)

// $CE21: [8-bit] Season standings - Mets wins
function season_standings_mets_wins() => byte(0x00CE21)

// $CE22: [8-bit] Season standings - Astros losses
function season_standings_astros_losses() => byte(0x00CE22)

// $CE23: [8-bit] Season standings - Astros wins
function season_standings_astros_wins() => byte(0x00CE23)

// $CE24: [8-bit] Season standings - Brewers losses
function season_standings_brewers_losses() => byte(0x00CE24)

// $CE25: [8-bit] Season standings - Brewers wins
function season_standings_brewers_wins() => byte(0x00CE25)

// $CE26: [8-bit] Season standings - Athletics losses
function season_standings_athletics_losses() => byte(0x00CE26)

// $CE27: [8-bit] Season standings - Athletics wins
function season_standings_athletics_wins() => byte(0x00CE27)

// $CE28: [8-bit] Season standings - Phillies losses
function season_standings_phillies_losses() => byte(0x00CE28)

// $CE29: [8-bit] Season standings - Phillies wins
function season_standings_phillies_wins() => byte(0x00CE29)

// $CE2A: [8-bit] Season standings - Dodgers losses
function season_standings_dodgers_losses() => byte(0x00CE2A)

// $CE2B: [8-bit] Season standings - Dodgers wins
function season_standings_dodgers_wins() => byte(0x00CE2B)

// $CE2C: [8-bit] Season standings - Yankees losses
function season_standings_yankees_losses() => byte(0x00CE2C)

// $CE2D: [8-bit] Season standings - Yankees wins
function season_standings_yankees_wins() => byte(0x00CE2D)

// $CE2E: [8-bit] Season standings - Mariners losses
function season_standings_mariners_losses() => byte(0x00CE2E)

// $CE2F: [8-bit] Season standings - Mariners wins
function season_standings_mariners_wins() => byte(0x00CE2F)

// $CE30: [8-bit] Season standings - Pirates losses
function season_standings_pirates_losses() => byte(0x00CE30)

// $CE31: [8-bit] Season standings - Pirates wins
function season_standings_pirates_wins() => byte(0x00CE31)

// $CE32: [8-bit] Season standings - Padres losses
function season_standings_padres_losses() => byte(0x00CE32)

// $CE33: [8-bit] Season standings - Padres wins
function season_standings_padres_wins() => byte(0x00CE33)

// $CE34: [8-bit] Season standings - Blue Jays losses
function season_standings_blue_jays_losses() => byte(0x00CE34)

// $CE35: [8-bit] Season standings - Blue Jays wins
function season_standings_blue_jays_wins() => byte(0x00CE35)

// $CE36: [8-bit] Season standings - Rangers losses
function season_standings_rangers_losses() => byte(0x00CE36)

// $CE37: [8-bit] Season standings - Rangers wins
function season_standings_rangers_wins() => byte(0x00CE37)

// $CE38: [8-bit] Season standings - Cardinals losses
function season_standings_cardinals_losses() => byte(0x00CE38)

// $CE39: [8-bit] Season standings - Cardinals wins
function season_standings_cardinals_wins() => byte(0x00CE39)

// $CE3A: [8-bit] Season standings - Giants losses
function season_standings_giants_losses() => byte(0x00CE3A)

// $CE3B: [8-bit] Season standings - Giants wins
function season_standings_giants_wins() => byte(0x00CE3B)

// $CEB8: [8-bit] Home Run Derby pitches remaining
function home_run_derby_pitches_remaining() => byte(0x00CEB8)

// $CEBA: [8-bit] Home Run Derby finished
//        0x00 = No
//        0x01 = Yes
function home_run_derby_finished() => byte(0x00CEBA)

// $CF21: [8-bit] Defense mode
//        0x00 = Comp assisted
//        0x01 = Manual
//        0x02 = Automatic
function defense_mode() => byte(0x00CF21)

// $CF22: [8-bit] Series type
//        0x00 = Single Game
//        0x01 = Best of Seven
//        0x02 = Play Division
//        0x03 = Play All Teams
//        0x04 = 80 Game Season
//        0x05 = 162 Game Season
function series_type() => byte(0x00CF22)

function stance() => byte(0xcf67)

// $CF23: [8-bit] Game mode
//        0x00 = Playball
//        0x01 = Home Run Derby
//        0x02 = Game Breakers
//        0x03 = Create Teams
//        0x04 = Sound Test
//        0x05 = Stadium Tour
//        0x06 = View Teams
//        0x07 = Defense Practice
function game_mode() => byte(0x00CF23)

function game() => __ornext((game_mode() == 0x00) || game_mode() == 0x02 || game_mode() == 0x03) && human_team() != computer_team()

// $CF24: [8-bit] Difficulty
//        0x00 = Hard
//        0x01 = Medium
//        0x02 = Easy
function difficulty() => byte(0x00CF24)

// $CF25: [8-bit] Players setting
//        0x00 = Human vs. Comp, Comp vs. Human
//        0x01 = Human vs. Human
//        0x02 = Comp vs. Comp
function players_setting() => byte(0x00CF25)
function sp() => players_setting() == 0x00

// $CF29: [8-bit] Movies setting
//        0x00 = Off
//        0x01 = On
function movies_setting() => byte(0x00CF29)

// $CF2C: [8-bit] Continued from password
//        0x00 = No
//        0x01 = Yes
function continued_from_password() => byte(0x00CF2C)

// $CF40: something to do with AI
function something_to_do_with_ai() => byte(0x00CF40)

// $CF41: [8-bit] For 1-player, which team is human controlling
//        0x00 = Away
//        0x01 = Home
function for_1_player_which_team_is_human_controlling() => byte(0x00CF41)
function paway() => for_1_player_which_team_is_human_controlling() == 0x00
function phome() => for_1_player_which_team_is_human_controlling() == 0x01

// $CF87: [8-bit] Current inning
function current_inning() => byte(0x00CF87)

function top() => byte(0xd039) == 0x01
function bottom() => byte(0xd039) == 0x00

function human_batting() => byte(0x00cf41) != byte(0xd039) && byte(0x00cf41) <= 0x01 && byte(0xd039) <= 0x01
function human_pitching() => byte(0x00cf41) == byte(0xd039) && byte(0x00cf41) <= 0x01 && byte(0xd039) <= 0x01

// $D047: replay?
function replay() => byte(0x00D047)

// $D048: [8-bit] Human player team (for 1-player)
//        Away team (for 0- or 2-player)
//        0x00 = Orioles
//        0x01 = Angels
//        0x02 = Cubs
//        0x03 = Braves
//        0x04 = Red Sox
//        0x05 = White Sox
//        0x06 = Marlins
//        0x07 = Reds
//        0x08 = Indians
//        0x09 = Royals
//        0x0A = Expos
//        0x0B = Rockies
//        0x0C = Tigers
//        0x0D = Twins
//        0x0E = Mets
//        0x0F = Astros
//        0x10 = Brewers
//        0x11 = Athletics
//        0x12 = Phillies
//        0x13 = Dodgers
//        0x14 = Yankees
//        0x15 = Mariners
//        0x16 = Pirates
//        0x17 = Padres
//        0x18 = Blue Jays
//        0x19 = Rangers
//        0x1A = Cardinals
//        0x1B = Giants
//        0x1C = AL All-Stars
//        0x1D = NL All-Stars
function human_team() => byte(0x00D048)

// $D049: [8-bit] Game finished?
//        0x00 = No
//        0x01 = Yes
function game_finished() => byte(0x00D049)
function gfd() => game_finished() == 0x01 && prev(game_finished()) == 0x00

// $D04B: [8-bit] Computer player team (for 1-player)
//        Home team (for 0- or 2-player)
//        0x00 = Orioles
//        0x01 = Angels
//        0x02 = Cubs
//        0x03 = Braves
//        0x04 = Red Sox
//        0x05 = White Sox
//        0x06 = Marlins
//        0x07 = Reds
//        0x08 = Indians
//        0x09 = Royals
//        0x0A = Expos
//        0x0B = Rockies
//        0x0C = Tigers
//        0x0D = Twins
//        0x0E = Mets
//        0x0F = Astros
//        0x10 = Brewers
//        0x11 = Athletics
//        0x12 = Phillies
//        0x13 = Dodgers
//        0x14 = Yankees
//        0x15 = Mariners
//        0x16 = Pirates
//        0x17 = Padres
//        0x18 = Blue Jays
//        0x19 = Rangers
//        0x1A = Cardinals
//        0x1B = Giants
//        0x1C = AL All-Stars
//        0x1D = NL All-Stars
//        0x46 = Time Warner
function computer_team() => byte(0x00D04B)

// $D04E: [8-bit] Away team runs, Home Run Derby player 1 score
function human_runs() => byte(0x00D04E)

// $D051: [8-bit] Home team runs
function computer_runs() => byte(0x00D051)

// $D064: [8-bit] Runner on first
//        0x00 = No
//        0x01 = Yes
function runner_on_first() => byte(0x00D064)

// $D066: [8-bit] Runner on third
//        0x00 = No
//        0x01 = Yes
function runner_on_third() => byte(0x00D066)

// $D067: [8-bit] Runner on second
//        0x00 = No
//        0x01 = Yes
function runner_on_second() => byte(0x00D067)

// $D072: [8-bit] Away team at-bats
function away_team_at_bats() => byte(0x00D072)

// $D076: [8-bit] Away team hits
function away_team_hits() => byte(0x00D076)

function computer_hits() => byte(0x00d079)

// $D73A: [8-bit] Computer team current batter lineup spot (0-indexed)
//        (If 0- or 2-player, home team)
function computer_team_current_batter_lineup_spot_0_indexed() => byte(0x00D73A)

// $D73B: [8-bit] Human team current batter lineup spot (0-indexed)
//        (If 0- or 2-player, away team)
function human_batter() => byte(0x00D73B)

// $D787: [8-bit] Pitcher has started windup
//        0x00 = No
//        0x01 = Yes
function pitcher_has_started_windup() => byte(0x00D787)

// $D788: [8-bit] Strikes
function strikes() => byte(0x00D788)

// $D78A: [8-bit] Outs
function outs() => byte(0x00D78A)

// $D78B: [8-bit] Balls
function balls() => byte(0x00D78B)

scenario_titles = {
        0x00: "Bring It Home",
        0x01: "Ring It Up",
        0x02: "Garbage Time",
        0x03: "Elite Closer",
        0x04: "Give Me a D",
        0x05: "Give It Three Hundred Percent",
        0x06: "Twofer",
        0x07: "Threepeat",
        0x08: "Go Long",
        0x09: "But I Get Up Again",
        0x0A: "Up the Middle",
        0x0B: "Never Too Late",
        0x0C: "Team Effort",
        0x0D: "Four Top",
        0x0E: "Prepare for Trouble...",
        0x0F: "...And Make It Double",
        0x10: "Depths of Despair"
}

scenario_points = {
        0x00: 1,
        0x01: 2,
        0x02: 1,
        0x03: 3,
        0x04: 2,
        0x05: 3,
        0x06: 2,
        0x07: 2,
        0x08: 3,
        0x09: 4,
        0x0A: 3,
        0x0B: 10,
        0x0C: 3,
        0x0D: 4,
        0x0E: 5,
        0x0F: 5,
        0x10: 10
}

scenario_dict = {
        0x00: "Silver Platter",
        0x01: "Score",
        0x02: "Winding Down",
        0x03: "Save",
        0x04: "Defense",
        0x05: "Sudden Death",
        0x06: "Two Inning Game",
        0x07: "Three Inning Game",
        0x08: "Extra Innings",
        0x09: "Comeback",
        0x0A: "Base Hit",
        0x0B: "Big Comeback",
        0x0C: "Rally",
        0x0D: "Grand Slam",
        0x0E: "Trouble",
        0x0F: "Double Trouble",
        0x10: "Lost Cause"
}

first_batter_addr = 0xd350
first_computer_batter_addr = 0xd460
batter_struct_size = 0x22

first_pitcher_addr = 0xd088
pitcher_struct_size = 0x20

function human_pitch_stamina(n) {
    return byte(first_pitcher_addr + n * pitcher_struct_size + 0x13)
}

function human_batter_name(n) {
    return first_batter_addr + n * batter_struct_size
}

function human_batter_doubles(n) {
    return byte(first_batter_addr + n * batter_struct_size + 0x14)
}

function human_batter_hits(n) {
    return byte(first_batter_addr + n * batter_struct_size + 0x15)
}

function human_batter_home_runs(n) {
    return byte(first_batter_addr + n * batter_struct_size + 0x16)
}

function human_batter_triples(n) {
    return byte(first_batter_addr + n * batter_struct_size + 0x17)
}

function human_batter_at_bats(n) {
    return byte(first_batter_addr + n * batter_struct_size + 0x18)
}

function human_batter_walks(n) {
    return byte(first_batter_addr + n * batter_struct_size + 0x19)
}

function human_batter_rbis(n) {
    return byte(first_batter_addr + n * batter_struct_size + 0x1A)
}

function human_batter_singles(n) {
    return byte(first_batter_addr + n * batter_struct_size + 0x1B)
}

function human_batter_strikeouts(n) {
    return byte(first_batter_addr + n * batter_struct_size + 0x1d)
}

function computer_batter_strikeouts(n) {
    return byte(first_computer_batter_addr + n * batter_struct_size + 0x1d)
}

function human_stolen_bases() => byte(0x6106)

team_lookup = {
    0x00: "Orioles",
    0x01: "Angels",
    0x02: "Cubs",
    0x03: "Braves",
    0x04: "Red Sox",
    0x05: "White Sox",
    0x06: "Marlins",
    0x07: "Reds",
    0x08: "Indians",
    0x09: "Royals",
    0x0A: "Expos",
    0x0B: "Rockies",
    0x0C: "Tigers",
    0x0D: "Twins",
    0x0E: "Mets",
    0x0F: "Astros",
    0x10: "Brewers",
    0x11: "Athletics",
    0x12: "Phillies",
    0x13: "Dodgers",
    0x14: "Yankees",
    0x15: "Mariners",
    0x16: "Pirates",
    0x17: "Padres",
    0x18: "Blue Jays",
    0x19: "Rangers",
    0x1A: "Cardinals",
    0x1B: "Giants",
    0x1C: "AL All-Stars",
    0x1D: "NL All-Stars",
    0x46: "Time Warner"
}

// Achievements

function gb_achievement(title, scenario_name, points, idx) {
    achievement(title = title,
                description = "Win the " + scenario_name + " scenario in Game Breakers.",
                points = points,
                trigger =
                        sp() &&
                        game_breakers_scenario() == idx &&
                        game_mode() == 0x02 && // Game Breakers
                        human_runs() > computer_runs() &&
                        gfd(),
                type = "progression"
    )
}

for scenario in scenario_dict {
    gb_achievement(
        title = scenario_titles[scenario],
        scenario_name = scenario_dict[scenario],
        points = scenario_points[scenario],
        idx = scenario
    )
}

achievement(
    title = "K",
    description = "Strike out a batter.",
    points = 1,
    trigger =
        sp() &&
        game() &&
        human_pitching() &&
        __ornext(any_of(range(0, 8), n => computer_batter_strikeouts(n) > prev(computer_batter_strikeouts(n))))
)

achievement(
    title = "Smoked It",
    description = "Hit a home run outside of Home Run Derby.",
    points = 4,
    trigger =
        sp() &&
        game() &&
        human_batting() &&
        all_of(range(0, 8), n => prev(human_batter_home_runs(n)) == 0) &&
        __ornext(any_of(range(0, 8), n => human_batter_home_runs(n) == 1))
)

achievement(
    title = "I'll Be Having That",
    description = "Successfully steal a base.",
    points = 1,
    trigger =
        sp() &&
        game() &&
        human_batting() &&
        human_stolen_bases() > prev(human_stolen_bases())
)

achievement(
    title = "Perfect Inning",
    description = "End an inning on 9 or less pitches without recording any hits or balls.",
    points = 5,
    trigger =
        never(!sp()) &&
        never(!game()) &&
        once(current_inning() > prev(current_inning())) &&
        never(human_batting()) &&
        never(tally(9, pitcher_has_started_windup() > prev(pitcher_has_started_windup()))) &&
        never(balls() > 0) &&
        never(computer_hits() > prev(computer_hits())) &&
        trigger_when(outs() == 3)
)

achievement(
    title = "The Cycle",
    description = "In one game and one session, hit a single, double, triple, and home run.",
    points = 10,
    trigger =
        sp() &&
        game() &&
        human_batting() &&
        sum_of(range(0, 8), n => human_batter_singles(n)) >= 1 &&
        sum_of(range(0, 8), n => human_batter_doubles(n)) >= 1 &&
        sum_of(range(0, 8), n => human_batter_triples(n)) >= 1 &&
        sum_of(range(0, 8), n => human_batter_home_runs(n)) >= 1 &&
        (sum_of(range(0, 8), n => prev(human_batter_singles(n))) == 0 ||
        sum_of(range(0, 8), n => prev(human_batter_doubles(n))) == 0 ||
        sum_of(range(0, 8), n => prev(human_batter_triples(n))) == 0 ||
        sum_of(range(0, 8), n => prev(human_batter_home_runs(n))) == 0)
)

achievement(
    title = "Play Ball",
    description = "Win a single game in Playball mode.",
    points = 2,
    trigger =
        sp() &&
        game_mode() == 0x00 && // Playball
        human_runs() > computer_runs() &&
        gfd(),
    type = "progression"
)

achievement(
    title = "From Rutschman with Love",
    description = "Finish a Home Run Derby with at least 8 points after hitting a home run from both sides of the plate.",
    points = 5,
    trigger =
        never(!sp()) &&
        never(game_mode() != 0x01) && // Home Run Derby
        never(human_runs() == 0) &&
        human_runs() >= 8 &&
        once(stance() == 0x01 && human_runs() > prev(human_runs())) &&
        once(stance() == 0x02 && human_runs() > prev(human_runs())) &&
        home_run_derby_finished() == 0x01 &&
        prev(home_run_derby_finished()) == 0x00
)

achievement(
    title = "Silver Slugger",
    description = "Finish a Home Run Derby with at least 11 points.",
    points = 5,
    trigger =
        sp() &&
        game_mode() == 0x01 && // Home Run Derby
        human_runs() >= 11 &&
        home_run_derby_finished() == 0x01 &&
        prev(home_run_derby_finished()) == 0x00,
    type = "progression"
)

achievement(
    title = "Pennant King",
    description = "Finish undefeated in a Play Division series.",
    points = 10,
    trigger =
        sp() &&
        game_mode() == 0x00 && // Playball
        series_type() == 0x02 && // Play Division
        human_runs() > computer_runs() &&
        computer_team() == 0x46 && // Time Warner
        gfd()
)

achievement(
    title = "Gold Glove",
    description = "Finish a Defense Practice with at least 16 points.",
    points = 10,
    trigger =
        sp() &&
        game_mode() == 0x00 &&
        human_team() == 0x02 && computer_team() == 0x02 &&
        human_runs() >= 16 &&
        home_run_derby_finished() == 0x01 &&
        prev(home_run_derby_finished()) == 0x00,
    type = "progression"
)

achievement(
    title = "This Day in History I: The Strike Is Over",
    description = "In a home game as the Colorado Rockies, defeat the New York Mets while scoring 11 or more runs and holding them to 9 or fewer.",
    points = 5,
    trigger =
        sp() &&
        game() &&
        phome() &&
        human_team() == 0x0B && // Rockies
        computer_team() == 0x0E && // Mets
        human_runs() >= 11 &&
        computer_runs() <= 9 &&
        gfd()
)

achievement(
    title = "This Day in History III: Drunk Tank",
    description = "In a home game as the Los Angeles Dodgers, defeat the St. Louis Cardinals.",
    points = 2,
    trigger =
        sp() &&
        game() &&
        phome() &&
        human_team() == 0x13 && // Dodgers
        computer_team() == 0x1A && // Cardinals
        human_runs() > computer_runs() &&
        gfd()
)

achievement(
    title = "This Day in History IV: Edge of Glory",
    description = "In a home game as the Colorado Rockies, record a hit with Andrés Galarraga during or after the 9th inning.",
    points = 2,
    trigger =
        sp() &&
        game() &&
        phome() &&
        human_team() == 0x0B && // Rockies
        current_inning() >= 9 &&
        any_of(range(0, 8), n => human_batter() == n && ascii_string_equals(human_batter_name(n), "aGalrrga") && trigger_when(human_batter_hits(n) > prev(human_batter_hits(n))))
)

achievement(
    title = "This Day in History V: The Veteran",
    description = "In a home game as the Baltimore Orioles, hit a home run with Cal Ripken Jr. during or after the 5th inning.",
    points = 4,
    trigger =
        sp() &&
        game() &&
        phome() &&
        human_team() == 0x00 && // Orioles
        current_inning() >= 5 &&
        any_of(range(0, 8), n => human_batter() == n && ascii_string_equals(human_batter_name(n), "aC~liRkpne") && trigger_when(human_batter_home_runs(n) > prev(human_batter_home_runs(n))))
)

// Rich Presence
//
rp_human_team = rich_presence_lookup("Team", human_team(), team_lookup, "Unknown Team")
rp_computer_team = rich_presence_lookup("Team", computer_team(), team_lookup, "Unknown Team")
rp_home_away = rich_presence_lookup("Home/Away", for_1_player_which_team_is_human_controlling(), {
    0x00: "@",
    0x01: "vs."
}, "vs.")
rp_top_bottom = rich_presence_lookup("Top/Bottom", byte(0xd039), {
    0x00: "Bottom",
    0x01: "Top"
}, "Unknown")
rp_inning = rich_presence_lookup("Inning", current_inning(), {
    0x01: "1st",
    0x02: "2nd",
    0x03: "3rd",
    0x04: "4th",
    0x05: "5th",
    0x06: "6th",
    0x07: "7th",
    0x08: "8th",
    0x09: "9th",
    0x0A: "10th",
    0x0B: "11th",
    0x0C: "12th",
    0x0D: "13th",
    0x0E: "14th",
    0x0F: "15th",
    0x10: "16th",
    0x11: "17th",
    0x12: "18th",
    0x13: "19th",
    0x14: "20th",
    0x15: "21st",
    0x16: "22nd",
    0x17: "23rd",
    0x18: "24th",
    0x19: "25th",
    0x1A: "26th",
    0x1B: "27th",
    0x1C: "28th",
    0x1D: "29th",
    0x1E: "30th"
}, "Unknown inning")
rp_human_runs = rich_presence_macro("Number", human_runs())
rp_computer_runs = rich_presence_macro("Number", computer_runs())
rp_gamemode = rich_presence_lookup("Game Mode", game_mode(), {
    0x00: "Playball",
    0x01: "Home Run Derby",
    0x02: "Game Breakers",
    0x03: "Create Teams",
    0x04: "Sound Test",
    0x05: "Stadium Tour",
    0x06: "View Teams",
    0x07: "Defense Practice"
}, "Unknown Game Mode")
rp_series_type = rich_presence_lookup("Series Type", series_type(), {
    0x00: "Single Game",
    0x01: "Best of Seven",
    0x02: "Play Division",
    0x03: "Play All Teams",
    0x04: "80 Game Season",
    0x05: "162 Game Season"
}, "Unknown Series Type")
rp_multi = rich_presence_lookup("Multi", players_setting(), {
    0x01: "2P",
    0x02: "CPU"
}, "Unknown Players Setting")
function rp_ac(addr) => rich_presence_lookup("CustomASCII", byte(addr), {
    0x41: "A",
    0x42: "B",
    0x43: "C",
    0x44: "D",
    0x45: "E",
    0x46: "F",
    0x47: "G",
    0x48: "H",
    0x49: "I",
    0x4A: "J",
    0x4B: "K",
    0x4C: "L",
    0x4D: "M",
    0x4E: "N",
    0x4F: "O",
    0x50: "P",
    0x51: "Q",
    0x52: "R",
    0x53: "S",
    0x54: "T",
    0x55: "U",
    0x56: "V",
    0x57: "W",
    0x58: "X",
    0x59: "Y",
    0x5A: "Z",
    0x20: " ",
    0x2E: ".",
    0x61: "a",
    0x62: "b",
    0x63: "c",
    0x64: "d",
    0x65: "e",
    0x66: "f",
    0x67: "g",
    0x68: "h",
    0x69: "i",
    0x6A: "j",
    0x6B: "k",
    0x6C: "l",
    0x6D: "m",
    0x6E: "n",
    0x6F: "o",
    0x70: "p",
    0x71: "q",
    0x72: "r",
    0x73: "s",
    0x74: "t",
    0x75: "u",
    0x76: "v",
    0x77: "w",
    0x78: "x",
    0x79: "y",
    0x7A: "z",
    0x7E: " "
}, "Unknown Character")
rp_scenario = rich_presence_lookup("Scenario", game_breakers_scenario(), scenario_dict, "Unknown Scenario")

rich_presence_conditional_display(
    current_inning() > 0 && sp() && game() && game_mode() == 0x00, // Playball
     "[Playball] [{0}] {1} {2} {3} {4}-{5} {6} {7}",
    rp_series_type, rp_human_team, rp_home_away, rp_computer_team,
    rp_human_runs, rp_computer_runs, rp_top_bottom, rp_inning
)

rich_presence_conditional_display(
     current_inning() > 0 &&sp() && game_mode() == 0x02,
     "[Game Breakers] [{0}] {1} {2} {3} {4}-{5} {6} {7}",
    rp_scenario, rp_human_team, rp_home_away, rp_computer_team,
    rp_human_runs, rp_computer_runs, rp_top_bottom, rp_inning
)

rich_presence_conditional_display(
     current_inning() > 0 &&sp() && game(),
     "[{0}] {1} {2} {3} {4}-{5} {6} {7}",
    rp_gamemode, rp_human_team, rp_home_away, rp_computer_team,
    rp_human_runs, rp_computer_runs, rp_top_bottom, rp_inning
)

rich_presence_conditional_display(
    current_inning() > 0 && game() && game_mode() == 0x00, // Playball
     "[{0}] [Playball] [{1}] {2} @ {3} {4}-{5} {6} {7}",
    rp_multi, rp_series_type, rp_human_team, rp_computer_team,
    rp_human_runs, rp_computer_runs, rp_top_bottom, rp_inning
)

rich_presence_conditional_display(
     current_inning() > 0 &&game_mode() == 0x02, // Game Breakers
     "[{0}] [Game Breakers] [{1}] {2} @ {3} {4}-{5} {6} {7}",
    rp_multi, rp_gamemode, rp_human_team, rp_computer_team,
    rp_human_runs, rp_computer_runs, rp_top_bottom, rp_inning
)

rich_presence_conditional_display(
    current_inning() > 0 && game(),
     "[{0}] [{1}] {2} @ {3} {4}-{5} {6} {7}",
    rp_multi, rp_gamemode, rp_human_team, rp_computer_team,
    rp_human_runs, rp_computer_runs, rp_top_bottom, rp_inning
)

rich_presence_conditional_display(
     game_mode() == 0x01 && home_run_derby_pitches_remaining() > 0, // Home Run Derby
     "[Home Run Derby] {0}{1}{2}{3}{4}{5}{6}{7}{8}{9} | Score: {10}",
     rp_ac(first_batter_addr +human_batter()*batter_struct_size + 0x01),
     rp_ac(first_batter_addr +human_batter()*batter_struct_size + 0x00),
    rp_ac(first_batter_addr + human_batter()*batter_struct_size +0x03),
    rp_ac(first_batter_addr + human_batter()*batter_struct_size +0x02),
    rp_ac(first_batter_addr + human_batter()*batter_struct_size +0x05),
    rp_ac(first_batter_addr + human_batter()*batter_struct_size +0x04),
    rp_ac(first_batter_addr + human_batter()*batter_struct_size +0x07),
    rp_ac(first_batter_addr + human_batter()*batter_struct_size +0x06),
    rp_ac(first_batter_addr + human_batter()*batter_struct_size +0x09),
    rp_ac(first_batter_addr + human_batter()*batter_struct_size +0x08),
    rp_human_runs
)

rich_presence_conditional_display(
     game_mode() == 0x00 && human_team() == 0x02 && computer_team() == 0x02, // Defense Practice
     "[Defense Practice] Score: {0}",
    rp_human_runs
)

rich_presence_conditional_display(
     game_mode() >= 0x04,
     "[{0}]",
    rp_gamemode
)


rich_presence_display("Playing R.B.I. Baseball '95")
